<div class="api-documentation">
    <h1>Standard Socket API</h1>
    <!-- API Reference -->
    <div class="api-reference">
        <p>This implementation is based on the <a href="https://developer.lovense.com/docs/standard-solutions/socket-api.html" target="_blank">Official Lovense Standard Socket API Documentation</a>.</p>
    </div>

    <div class="content">
        <section id="get-auth-token">
            <h2>1. Get Auth Token</h2>
            <p>First, obtain an authentication token using your developer credentials.</p>
            <form id="auth-form" class="test-form">
                <div class="input-group">
                    <input type="text" id="developer-token" class="form-control" placeholder="Enter Developer Token">
                    <input type="text" id="user-id" class="form-control" placeholder="Enter User ID">
                    <input type="text" id="username" class="form-control" placeholder="Enter Username">
                    <button type="button" class="primary-button" onclick="getAuthToken()">Get Auth Token</button>
                </div>
            </form>

            <div class="api-test-results">
                <div class="request-box">
                    <h4>Request:</h4>
                    <div class="request-url">URL: https://api.lovense-api.com/api/basicApi/getToken</div>
                    <div class="timestamp" id="searchRequestTime">Timestamp: -</div>
                    <div id="searchRequest">Request will appear here...</div>
                </div>
                <div class="response-box">
                    <h4>Response:</h4>
                    <div class="timestamp" id="searchResponseTime">Timestamp: -</div>
                    <div id="searchResponse">Response will appear here...</div>
                </div>
            </div>
            
        </section>

        <section id="initialize">
            <h2>2. Initialize the SDK</h2>
            <form id="init-form" class="test-form">
                <div class="input-group">
                    <input type="text" id="auth-token" class="form-control" placeholder="Enter AuthToken From Last Step">
                    <input type="text" id="platform" class="form-control" placeholder="Enter Platform Name">
                    <button type="button" class="primary-button" onclick="initializeSDK()">Initialize SDK</button>
                    <button type="button" class="secondary-button" onclick="stopSDK()">Stop SDK</button>
                </div>
            </form>
            <div class="api-test-results">
                <div class="request-box">
                    <h4>Request:</h4>
                    <div class="request-url">URL: `LovenseBasicSdk` initialized</div>
                    <div class="timestamp" id="initRequestTime">Timestamp: -</div>
                    <div id="initRequest">Request will appear here...</div>
                </div>
                <div class="response-box">
                    <h4>Response:</h4>
                    <div class="timestamp" id="initResponseTime">Timestamp: -</div>
                    <div id="initResponse">Response will appear here...</div>
                </div>
            </div>
        </section>

        <section id="qr-code">
            <h2>3. Get QR Code</h2>
            <div class="tutorial-steps">
                <div class="step">
                    <span class="step-number">1</span>
                    <span class="step-text">Download <a href="https://www.lovense.com/app/remote" target="_blank">Lovense Remote</a> for mobile</span>
                </div>
                <div class="step">
                    <span class="step-number">2</span>
                    <span class="step-text">Connect Lovense Toys on Remote</span>
                </div>
                <div class="step">
                    <span class="step-number">3</span>
                    <span class="step-text">Scan QR Code to allow control</span>
                </div>
            </div>
            <div class="livestream-container">
                <div class="livestream-display">
                    <div class="video-placeholder">
                        <span>e.g. Livestream Display</span>
                    </div>
                    <div class="generate-qr-button">
                        <button type="button" class="lovense-button" onclick="generateQRCode()">
                            <span class="heart-icon">❤️</span>
                            <span class="button-text">Lovense</span>
                        </button>
                    </div>
                </div>
                <div class="qr-section">
                    <div class="qr-title">Scan QR Code</div>
                    <div id="qr-display" class="qr-container">
                        <div class="qr-placeholder">
                            <span>QR Code will appear here</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="api-test-results">
                <div class="request-box">
                    <h4>Request:</h4>
                    <div class="request-url">URL: Get QR Code</div>
                    <div class="timestamp" id="qrRequestTime">Timestamp: -</div>
                    <div id="qrRequest">Request will appear here...</div>
                </div>
                <div class="response-box">
                    <h4>Response:</h4>
                    <div class="timestamp" id="qrResponseTime">Timestamp: -</div>
                    <div id="qrResponse">Response will appear here...</div>
                </div>
            </div>
            
        </section>

        <section id="toy-info">
            <h2>4. Get Device Information</h2>
            <div class="device-info-container">
                <button onclick="getDeviceInfo()" class="primary-button">Get Device Info</button>
            </div>
            <div class="api-test-results">
                <div class="request-box">
                    <h4>Request:</h4>
                    <div class="request-url">Event: basicapi_update_device_info_tc</div>
                    <div class="timestamp" id="toyRequestTime">Timestamp: -</div>
                    <div id="toyRequest">Request will appear here...</div>
                </div>
                <div class="response-box">
                    <h4>Response:</h4>
                    <div class="timestamp" id="toyResponseTime">Timestamp: -</div>
                    <div id="toyResponse">Response will appear here...</div>
                </div>
            </div>
        </section>

        <section id="toy-commands">
            <div class="test-section">
                <h2>5. Test Function Commands</h2>
                <div class="function-test-container">
                    <div class="button-container">
                        <div class="toy-id-group">
                            <label>Toy ID:</label>
                            <input type="text" id="toyId" class="form-control" placeholder="e.g., ff922f7fd345">
                        </div>
                        <div class="toy-id-group">
                            <label>Total Time:</label>
                            <input type="number" id="timeSec" class="form-control" placeholder="Total running time">
                        </div>
                        <div class="toy-id-group">
                            <label>Loop Run Time:</label>
                            <input type="number" id="loopRunningSec" class="form-control" placeholder="Running time">
                        </div>
                        <div class="toy-id-group">
                            <label>Loop Pause Time:</label>
                            <input type="number" id="loopPauseSec" class="form-control" placeholder="Suspend time">
                        </div>

                        <button onclick="testFunction()" class="primary-button">Test Function</button>
                        <button onclick="resetAllActions()" class="secondary-button">Reset All</button>
                    </div>
                    
                    <!-- Action sliders -->
                    <div class="action-sliders">
                        <div class="action-group">
                            <label>Vibrate (0-20):</label>
                            <div class="strength-control">
                                <input type="range" id="vibrate" class="strength-slider" min="0" max="20" value="0">
                                <input type="number" class="form-control strength-number" data-slider="vibrate" min="0" max="20" value="0">
                            </div>
                        </div>
                        <div class="action-group">
                            <label>Rotate (0-20):</label>
                            <div class="strength-control">
                                <input type="range" id="rotate" class="strength-slider" min="0" max="20" value="0">
                                <input type="number" class="form-control strength-number" data-slider="rotate" min="0" max="20" value="0">
                            </div>
                        </div>
                        <div class="action-group">
                            <label>Pump (0-3):</label>
                            <div class="strength-control">
                                <input type="range" id="pump" class="strength-slider" min="0" max="3" value="0">
                                <input type="number" class="form-control strength-number" data-slider="pump" min="0" max="3" value="0">
                            </div>
                        </div>
                        <div class="action-group">
                            <label>Thrusting (0-20):</label>
                            <div class="strength-control">
                                <input type="range" id="thrusting" class="strength-slider" min="0" max="20" value="0">
                                <input type="number" class="form-control strength-number" data-slider="thrusting" min="0" max="20" value="0">
                            </div>
                        </div>
                        <div class="action-group">
                            <label>Fingering (0-20):</label>
                            <div class="strength-control">
                                <input type="range" id="fingering" class="strength-slider" min="0" max="20" value="0">
                                <input type="number" class="form-control strength-number" data-slider="fingering" min="0" max="20" value="0">
                            </div>
                        </div>
                        <div class="action-group">
                            <label>Suction (0-20):</label>
                            <div class="strength-control">
                                <input type="range" id="suction" class="strength-slider" min="0" max="20" value="0">
                                <input type="number" class="form-control strength-number" data-slider="suction" min="0" max="20" value="0">
                            </div>
                        </div>
                        <div class="action-group">
                            <label>Depth (0-3):</label>
                            <div class="strength-control">
                                <input type="range" id="depth" class="strength-slider" min="0" max="3" value="0">
                                <input type="number" class="form-control strength-number" data-slider="depth" min="0" max="3" value="0">
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="api-test-results">
                <div class="request-box">
                    <h4>Request:</h4>
                    <div class="request-url">URL: basicSDKInstance.sendToyCommand()</div>
                    <div class="timestamp" id="cmdRequestTime">Timestamp: -</div>
                    <div id="cmdRequest">Request will appear here...</div>
                </div>
                <div class="response-box">
                    <h4>Response:</h4>
                    <div class="timestamp" id="cmdResponseTime">Timestamp: -</div>
                    <div id="cmdResponse">Response will appear here...</div>
                </div>
            </div>
        </section>
    </div>
</div>

<style>
.api-documentation {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
}

/* API Reference styling */
.api-reference {
    background: #f8f9fa;
    border-left: 4px solid #3498db;
    padding: 1rem;
    margin-bottom: 2rem;
    border-radius: 0 4px 4px 0;
}

.api-reference p {
    margin: 0;
    font-size: 0.95rem;
    color: #2c3e50;
}

.api-reference a {
    color: #3498db;
    text-decoration: none;
    font-weight: 500;
}

.api-reference a:hover {
    text-decoration: underline;
}

.content section {
    margin-bottom: 40px;
    padding: 30px;
    border-radius: 10px;
    background: #ffffff;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

h1, h2 {
    color: #333;
    border-bottom: 2px solid #f0f0f0;
    padding-bottom: 10px;
}

.test-form {
    margin: 20px 0;
}

.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 8px;
    color: #555;
    font-weight: 500;
}

.form-group input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 14px;
}

.form-group input:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
}

.primary-button {
    background: #007bff;
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 500;
    transition: background 0.3s;
}

.primary-button:hover {
    background: #007bff;
}

.secondary-button {
  background: #6c757d;
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 500;
    transition: background 0.3s;
}

.secondary-button:hover {
    background: #5a6268;
}

.livestream-container {
    display: flex;
    gap: 30px;
    margin-top: 20px;
    height: 300px;
}

.livestream-display {
    flex: 1;
    background: #000000a7;
    border-radius: 10px;
    overflow: hidden;
    position: relative;
    width: 600px;
}

.video-placeholder {
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #fff;
    font-size: 1.2em;
}

.qr-section {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    background: #f8f9fa;
    border-radius: 10px;
    width: 300px;
    height: 100%;
    padding-bottom: 5px;
}

.generate-qr-button {
    position: absolute;
    bottom: 20px;
    right: 20px;
    z-index: 10;
}

.lovense-button {
    background: rgba(255, 255, 255, 0.2);
    border: none;
    border-radius: 25px;
    padding: 10px 20px;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(5px);
}

.lovense-button:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: scale(1.05);
}

.heart-icon {
    font-size: 20px;
    color: #ff1744;
}

.button-text {
    color: white;
    font-weight: 500;
    font-size: 14px;
    text-transform: uppercase;
    letter-spacing: 1px;
}

.qr-title {
    font-size: 1.1em;
    font-weight: 500;
    color: #333;
    padding: 10px;
}

.qr-default {
    font-size: 0.9em;
    color: #666;
    padding-bottom: 10px;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
}

.qr-default input[type="checkbox"] {
    margin: 0;
    cursor: pointer;
}

.qr-container {
    margin: 10px 0;
    text-align: center;
    min-height: 150px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.qr-placeholder {
    width: 150px;
    height: 150px;
    border: 2px dashed #ddd;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #f8f9fa;
    color: #666;
    font-size: 0.9em;
    padding: 20px;
    text-align: center;
}

.qr-container img {
    max-width: 150px;
    height: auto;
    border: 1px solid #ddd;
    border-radius: 3px;
    padding: 3px;
    background: white;
    width: 150px;
    height: 150px;
    object-fit: contain;
    margin-bottom: 5px;
}

.button-group {
    display: flex;
    gap: 10px;
}

.checkbox-group label {
    margin-right: 15px;
}

.preset-commands {
    margin-top: 20px;
}

.input-group {
    display: flex;
    gap: 10px;
    align-items: flex-start;
}

.input-group .form-control {
    flex: 1;
    margin-bottom: 0;
    min-width: 0;
}

.input-group .primary-button {
    white-space: nowrap;
    height: 45px;
    margin-top: 0;
    padding: 0 20px;
}

.form-control {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  margin-bottom: 1rem;
  font-size: 1rem;
  background: #fff;
}

.request-url {
    font-family: monospace;
    color: #0066cc;
    margin-bottom: 8px;
    padding: 4px 0;
    font-size: 0.9em;
}

.timestamp {
    font-family: monospace;
    color: #666;
    font-size: 0.85em;
    margin-bottom: 8px;
}

.error {
    color: #dc3545;
    padding: 10px;
    background: #f8d7da;
    border: 1px solid #f5c6cb;
    border-radius: 4px;
    margin: 10px 0;
}

.tutorial-steps {
    display: flex;
    gap: 20px;
    margin: 20px 0;
    padding: 5px;
    background: #f8f9fa;
    border-radius: 8px;
    border-left: 4px solid #3498db;
}

.step {
    display: flex;
    align-items: center;
    gap: 10px;
}

.step-number {
    width: 24px;
    height: 24px;
    background: #3498db;
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 500;
    font-size: 14px;
}

.step-text {
    color: #2c3e50;
    font-size: 0.95rem;
}

.step-text a {
    color: #3498db;
    text-decoration: none;
    font-weight: 500;
}

.step-text a:hover {
    text-decoration: underline;
}

/* Function Test Styles */
.function-test-container {
    background: #fff;
    padding: 20px;
    border-radius: 8px;
}

.button-container {
    display: flex;
    gap: 15px;
    align-items: center;
    margin-bottom: 20px;
}

.toy-id-group {
    display: flex;
    align-items: center;
    gap: 10px;
    flex: 1;
}

.toy-id-group label {
    min-width: 60px;
    font-size: 0.9em;
    color: #666;
    font-weight: 500;
}

.toy-id-group .form-control {
    max-width: 200px;
}

.action-group {
    display: flex;
    align-items: center;
    padding: 8px 12px;
    background: #f8f9fa;
    border-radius: 4px;
    margin-bottom: 8px;
}

.action-group label {
    min-width: 120px;
    font-size: 0.9em;
    margin-right: 10px;
    color: #666;
}

.strength-control {
    display: flex;
    align-items: center;
    flex: 1;
    gap: 8px;
}

.strength-slider {
    flex: 1;
    margin: 0;
    min-width: 200px;
}

.strength-number {
    width: 45px !important;
    padding: 2px 4px !important;
    margin: 0 !important;
    text-align: center;
    font-size: 0.85em !important;
}

.time-inputs {
    display: flex;
    gap: 20px;
    margin-bottom: 20px;
}

.time-inputs .input-group {
    flex: 1;
    max-width: 200px;
}

.action-checkboxes {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    margin: 10px 0;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 8px;
}

.action-checkbox {
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    user-select: none;
}

.action-checkbox input[type="checkbox"] {
    margin: 0;
    cursor: pointer;
}

.action-checkbox span {
    color: #666;
    font-size: 0.9em;
}

.pattern-inputs {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-bottom: 20px;
}

.pattern-strength-input {
    width: 100%;
}

.pattern-strength-input input {
    max-width: none !important;
}

.pattern-strength-input label {
    min-width: 130px;
    font-size: 0.9em;
    color: #666;
    font-weight: 500;
}

.pattern-params {
    display: flex;
    gap: 15px;
}

.pattern-actions {
    display: flex;
    align-items: center;
    gap: 20px;
}

.action-checkboxes {
    flex: 1;
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    margin: 0;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 8px;
}

.pattern-button {
    padding: 15px 0;
}

.pattern-type-selection {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
}

.pattern-switch-btn {
    padding: 10px 20px;
    border: 1px solid #007bff;
    background: transparent;
    color: #007bff;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.3s;
}

.pattern-switch-btn.active {
    background: #007bff;
    color: white;
}

.preset-buttons {
    display: flex;
    gap: 10px;
    margin-top: 20px;
}

.pattern-container {
    transition: all 0.3s ease;
}
</style> 

<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.5.0/socket.io.js"></script>
<script>
    let basicSdkInstance = null;
    // Helper function to get formatted timestamp
    function getFormattedTimestamp() {
        const now = new Date();
        return now.toLocaleTimeString('en-US', { 
            hour12: false,
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            fractionalSecondDigits: 3
        });
    }

    // Auth Token Handler
    async function getAuthToken() {
        const searchRequest = document.getElementById('searchRequest');
        const searchResponse = document.getElementById('searchResponse');
        const searchRequestTime = document.getElementById('searchRequestTime');
        const searchResponseTime = document.getElementById('searchResponseTime');
        
        const token = document.getElementById('developer-token').value.trim() || 'tf7_SsG7X8qJm5l4gSYzfdLSeaZtlLl8ZaWNOSLt_ScnbUpimwPUIxB5l9TAgNle';
        const uid = document.getElementById('user-id').value.trim() || '8888';
        const uname = document.getElementById('username').value.trim() || 'deltatest';

        const requestUrl = 'https://api.lovense-api.com/api/basicApi/getToken';
        const requestData = { token, uid, uname };

        // Update request timestamp and display
        searchRequestTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
        searchRequest.innerHTML = JSON.stringify(requestData, null, 2);

        try {
            const response = await fetch(requestUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestData)
            });

            const data = await response.json();
            
            // Update response timestamp and display
            searchResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            searchResponse.innerHTML = JSON.stringify(data, null, 2);
            searchResponse.style.color = '#28a745';

            // If successful, update the auth token input
            if (data.data && data.data.authToken) {
                document.getElementById('auth-token').value = data.data.authToken;
            }
        } catch (error) {
            // Update response timestamp and error display
            searchResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            searchResponse.innerHTML = `Error: ${error.message}`;
            searchResponse.style.color = '#dc3545';
        }
    }

    // Initialize SDK Handler
    async function initializeSDK() {
        const initRequest = document.getElementById('initRequest');
        const initResponse = document.getElementById('initResponse');
        const initRequestTime = document.getElementById('initRequestTime');
        const initResponseTime = document.getElementById('initResponseTime');

        const authToken = document.getElementById('auth-token').value.trim();
        const platform = document.getElementById('platform').value.trim() || 'deltatest';
        const uid = document.getElementById('user-id').value.trim() || '8888';

        const requestData = { 
            platform: platform,
            authToken: authToken
        };
        
        // Update request timestamp and display
        initRequestTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
        document.querySelector('#initialize .request-url').innerHTML = 'URL: https://api.lovense-api.com/api/basicApi/getSocketUrl';
        initRequest.innerHTML = JSON.stringify(requestData, null, 2);

        try {
            const response = await fetch('https://api.lovense-api.com/api/basicApi/getSocketUrl', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestData)
            });

            const data = await response.json();
            
            // Update response timestamp and display
            initResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            initResponse.innerHTML = JSON.stringify(data, null, 2);
            
            if (data.message === 'Success') {
                initResponse.style.color = '#28a745';
                // Store socket URL and set initialization flag
                window.socketUrl = data.data.socketIoUrl;
                window.socketPath = data.data.socketIoPath;
                window.sdkInitialized = true;
                console.log('Socket URL:', data.data.socketIoUrl);
            } else {
                initResponse.style.color = '#dc3545';
                window.sdkInitialized = false;
                console.error('Failed to initialize:', data.message);
            }

        } catch (error) {
            const errorResponse = { 
                code: 400, 
                message: error.message 
            };
            
            // Update response timestamp and error display
            initResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            initResponse.innerHTML = JSON.stringify(errorResponse, null, 2);
            initResponse.style.color = '#dc3545';
            console.error('Error initializing:', error);
            window.sdkInitialized = false;
        }
    }

    // Stop SDK Handler
    async function stopSDK() {
        if (!basicSdkInstance) return alert('Please initialize SDK first');
        
        const initRequest = document.getElementById('initRequest');
        const initResponse = document.getElementById('initResponse');
        const initRequestTime = document.getElementById('initRequestTime');
        const initResponseTime = document.getElementById('initResponseTime');
        
        // Update request timestamp and display
        const requestData = { action: 'stop SDK' };
        initRequestTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
        initRequest.innerHTML = JSON.stringify(requestData, null, 2);

        try {
            const startTime = Date.now();
            basicSdkInstance.destroy();
            basicSdkInstance = null;
            const response = { code: 200, message: 'SDK stopped successfully' };
            
            // Update response timestamp and display
            initResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            initResponse.innerHTML = JSON.stringify(response, null, 2);
            initResponse.style.color = '#28a745';
        } catch (error) {
            const errorResponse = { code: 400, message: error.message };
            initResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            initResponse.innerHTML = JSON.stringify(errorResponse, null, 2);
            initResponse.style.color = '#dc3545';
        }
    }

    // Update Toy Info Handlers
    async function getAppStatus() {
        if (!basicSdkInstance) return alert('Please initialize SDK first');
        
        const toyRequest = document.getElementById('toyRequest');
        const toyResponse = document.getElementById('toyResponse');
        const toyRequestTime = document.getElementById('toyRequestTime');
        const toyResponseTime = document.getElementById('toyResponseTime');
        
        // Update request timestamp and display
        const requestData = { action: 'get app status' };
        toyRequestTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
        document.querySelector('#toy-info .request-url').innerHTML = 'URL: basicSdkInstance.getAppStatus()';
        toyRequest.innerHTML = JSON.stringify(requestData, null, 2);

        try {
            const startTime = Date.now();
            const status = await basicSdkInstance.getAppStatus();
            
            // Update response timestamp and display
            toyResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            toyResponse.innerHTML = JSON.stringify(status, null, 2);
            toyResponse.style.color = '#28a745';
        } catch (error) {
            toyResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            toyResponse.innerHTML = JSON.stringify({ code: 400, message: error.message }, null, 2);
            toyResponse.style.color = '#dc3545';
        }
    }

    async function getToys() {
        if (!basicSdkInstance) return alert('Please initialize SDK first');
        
        const toyRequest = document.getElementById('toyRequest');
        const toyResponse = document.getElementById('toyResponse');
        const toyRequestTime = document.getElementById('toyRequestTime');
        const toyResponseTime = document.getElementById('toyResponseTime');
        
        const requestData = { action: 'get toys list' };
        toyRequestTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
        document.querySelector('#toy-info .request-url').innerHTML = 'URL: basicSdkInstance.getToys()';
        toyRequest.innerHTML = JSON.stringify(requestData, null, 2);

        try {
            const startTime = Date.now();
            const toys = await basicSdkInstance.getToys();
            
            // Update response timestamp and display
            toyResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            toyResponse.innerHTML = JSON.stringify(toys, null, 2);
            toyResponse.style.color = '#28a745';
        } catch (error) {
            toyResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            toyResponse.innerHTML = JSON.stringify({ code: 400, message: error.message }, null, 2);
            toyResponse.style.color = '#dc3545';
        }
    }

    async function getOnlineToys() {
        if (!basicSdkInstance) return alert('Please initialize SDK first');
        
        const toyRequest = document.getElementById('toyRequest');
        const toyResponse = document.getElementById('toyResponse');
        const toyRequestTime = document.getElementById('toyRequestTime');
        const toyResponseTime = document.getElementById('toyResponseTime');
        
        const requestData = { action: 'get online toys' };
        toyRequestTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
        document.querySelector('#toy-info .request-url').innerHTML = 'URL: basicSdkInstance.getOnlineToys()';
        toyRequest.innerHTML = JSON.stringify(requestData, null, 2);

        try {
            const startTime = Date.now();
            const toys = await basicSdkInstance.getOnlineToys();
            
            toyResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            toyResponse.innerHTML = JSON.stringify(toys, null, 2);
            toyResponse.style.color = '#28a745';
        } catch (error) {
            toyResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            toyResponse.innerHTML = JSON.stringify({ code: 400, message: error.message }, null, 2);
            toyResponse.style.color = '#dc3545';
        }
    }

    async function checkToyOnline() {
        if (!basicSdkInstance) return alert('Please initialize SDK first');
        
        const toyRequest = document.getElementById('toyRequest');
        const toyResponse = document.getElementById('toyResponse');
        const toyRequestTime = document.getElementById('toyRequestTime');
        const toyResponseTime = document.getElementById('toyResponseTime');
        
        const requestData = { action: 'check toy online status' };
        toyRequestTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
        document.querySelector('#toy-info .request-url').innerHTML = 'URL: basicSdkInstance.checkToyOnline()';
        toyRequest.innerHTML = JSON.stringify(requestData, null, 2);

        try {
            const startTime = Date.now();
            const status = await basicSdkInstance.checkToyOnline();
            
            toyResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            toyResponse.innerHTML = JSON.stringify(status, null, 2);
            toyResponse.style.color = '#28a745';
        } catch (error) {
            toyResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            toyResponse.innerHTML = JSON.stringify({ code: 400, message: error.message }, null, 2);
            toyResponse.style.color = '#dc3545';
        }
    }

    async function getDeviceInfo() {
        const toyRequest = document.getElementById('toyRequest');
        const toyResponse = document.getElementById('toyResponse');
        const toyRequestTime = document.getElementById('toyRequestTime');
        const toyResponseTime = document.getElementById('toyResponseTime');
        
        if (!window.socketUrl) {
            toyResponse.innerHTML = JSON.stringify({ 
                error: 'Socket URL not found. Please initialize first.' 
            }, null, 2);
            toyResponse.style.color = '#dc3545';
            return;
        }

        try {
            const socketIoUrl = window.socketUrl;
            const socketIoPath = window.socketPath;
            
            console.log('Connecting to socket with:', {
                socketIoUrl,
                socketIoPath
            });

            const socket = io(socketIoUrl, {
                path: socketIoPath,
                transports: ["websocket"],
                forceNew: true,
                reconnection: true,
                timeout: 5000,
                upgrade: false,
                rememberUpgrade: false
            });

            // Update request display
            const requestData = {
                socketConnection: {
                    url: socketIoUrl,
                    path: socketIoPath,
                    transports: ["websocket"]
                },
                listenEvent: "basicapi_update_device_info_tc"
            };

            toyRequestTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            toyRequest.innerHTML = JSON.stringify(requestData, null, 2);

            socket.on('connect_error', (error) => {
                console.error('Socket connection error:', error);
                toyResponse.innerHTML = JSON.stringify({ 
                    error: 'Socket connection error: ' + error.message 
                }, null, 2);
                toyResponse.style.color = '#dc3545';
            });

            socket.on("basicapi_update_device_info_tc", (res) => {
                console.log('Received device info response:', res);
                const resData = res ? JSON.parse(res) : {};
                
                toyResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
                toyResponse.innerHTML = JSON.stringify(resData, null, 2);
                toyResponse.style.color = '#28a745'; // Always green for response

                socket.disconnect();
            });

        } catch (error) {
            console.error('Error getting device info:', error);
            toyResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            toyResponse.innerHTML = JSON.stringify({ 
                error: error.message 
            }, null, 2);
            toyResponse.style.color = '#dc3545';
        }
    }

    // Preset Pattern Handler
    async function sendPreset(type) {
        if (!basicSdkInstance) return alert('Please initialize SDK first');

        document.getElementById('pattern-request').textContent = 
            `[${new Date().toISOString()}] Sending preset pattern: ${type}`;

        try {
            const startTime = Date.now();
            const response = await basicSdkInstance.presetPattern(type);
            document.getElementById('pattern-response').textContent = 
                `[${new Date().toISOString()}] (${Date.now() - startTime}ms) ${JSON.stringify(response)}`;
        } catch (error) {
            document.getElementById('pattern-response').textContent = 
                `[${new Date().toISOString()}] Error: ${error.message}`;
        }
    }

    // Sync slider and number input values
    document.querySelectorAll('.strength-slider').forEach(slider => {
        slider.addEventListener('input', function() {
            const numberId = this.id;
            document.querySelector(`input[data-slider="${numberId}"]`).value = this.value;
        });
    });

    document.querySelectorAll('.strength-number').forEach(number => {
        number.addEventListener('input', function() {
            const sliderId = this.dataset.slider;
            document.getElementById(sliderId).value = this.value;
        });
    });

    // Test Function Handler
    async function testFunction() {
        const cmdRequest = document.getElementById('cmdRequest');
        const cmdResponse = document.getElementById('cmdResponse');
        const cmdRequestTime = document.getElementById('cmdRequestTime');
        const cmdResponseTime = document.getElementById('cmdResponseTime');

        if (!window.socketUrl) {
            cmdResponse.innerHTML = JSON.stringify({ 
                error: 'Socket URL not found. Please initialize first.' 
            }, null, 2);
            cmdResponse.style.color = '#dc3545';
            return;
        }

        try {
            const socketIoUrl = window.socketUrl;
            const socketIoPath = window.socketPath;
            
            const socket = io(socketIoUrl, {
                path: socketIoPath,
                transports: ["websocket"],
                forceNew: true,
                reconnection: true,
                timeout: 5000,
                upgrade: false,
                rememberUpgrade: false
            });

            socket.on('connect', () => {
                console.log('Socket connected successfully');
                
                // Build command object
                const command = {
                    command: "Function",
                    apiVer: 1,
                    timeSec: parseInt(document.getElementById('timeSec').value) || 5,
                    //loopRunningSec: parseInt(document.getElementById('loopRunningSec').value) || 5,
                    //loopPauseSec: parseInt(document.getElementById('loopPauseSec').value) || 0
                };

                // Add toyId if provided
                const toyId = document.getElementById('toyId').value.trim();
                if (toyId) {
                    command.toyId = toyId;
                }

                // Add non-zero values as action string
                const actions = [
                    'vibrate', 'rotate', 'pump', 'thrusting', 
                    'fingering', 'suction', 'depth'
                ];

                const actionParts = [];
                actions.forEach(action => {
                    const value = parseInt(document.getElementById(action).value) || 0;
                    if (value > 0) {
                        // Capitalize first letter of action
                        const capitalizedAction = action.charAt(0).toUpperCase() + action.slice(1);
                        actionParts.push(`${capitalizedAction}:${value}`);
                    }
                });

                if (actionParts.length > 0) {
                    command.action = actionParts.join(';');
                }

                console.log('Emitting toy command:', command);
                socket.emit("basicapi_send_toy_command_ts", command);

                // Update request display
                const requestData = {
                    socketConnection: {
                        url: socketIoUrl,
                        path: socketIoPath,
                        transports: ["websocket"]
                    },
                    emitEvent: {
                        event: "basicapi_send_toy_command_ts",
                        data: command
                    }
                };

                cmdRequestTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
                cmdRequest.innerHTML = JSON.stringify(requestData, null, 2);
                
                // Disconnect after sending command
                socket.disconnect();
            });

            socket.on('connect_error', (error) => {
                console.error('Socket connection error:', error);
                cmdResponse.innerHTML = JSON.stringify({ 
                    error: 'Socket connection error: ' + error.message 
                }, null, 2);
                cmdResponse.style.color = '#dc3545';
            });

        } catch (error) {
            console.error('Error sending toy command:', error);
            cmdRequestTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            cmdRequest.innerHTML = JSON.stringify({ 
                error: error.message 
            }, null, 2);
            cmdResponse.innerHTML = 'Command sent';
            cmdResponse.style.color = '#28a745';
        }
    }

    // Update Reset All Actions
    function resetAllActions() {
        document.querySelectorAll('.strength-slider, .strength-number').forEach(input => {
            input.value = 0;
        });
        document.getElementById('time').value = '';
    }

    async function generateQRCode() {
        const qrRequest = document.getElementById('qrRequest');
        const qrResponse = document.getElementById('qrResponse');
        const qrRequestTime = document.getElementById('qrRequestTime');
        const qrResponseTime = document.getElementById('qrResponseTime');
        const qrDisplay = document.getElementById('qr-display');
        
        if (!window.socketUrl) {
            qrResponse.innerHTML = JSON.stringify({ 
                error: 'Socket URL not found. Please initialize first.' 
            }, null, 2);
            qrResponse.style.color = '#dc3545';
            return;
        }

        try {
            // Parse the socket URL to get the base URL and path
            const socketIoUrl = window.socketUrl;
            const socketIoPath = window.socketPath;
            
            console.log('Connecting to socket with:', {
                socketIoUrl,
                socketIoPath
            });

            // Updated socket connection for v2.x compatibility
            const socket = io(socketIoUrl, {
                path: socketIoPath,
                transports: ["websocket"],
                forceNew: true,
                reconnection: true,
                timeout: 5000,
                // v2.x specific options
                upgrade: false,
                rememberUpgrade: false
            });

            // Handle socket connection events
            socket.on('connect', () => {
                console.log('Socket connected successfully');
                
                // Generate a unique ackId
                const ackId = 'qr_' + Date.now();
                
                // Emit after connection is established
                console.log('Emitting basicapi_get_qrcode_ts with:', {
                    event: 'basicapi_get_qrcode_ts',
                    data: { ackId }
                });
                
                socket.emit("basicapi_get_qrcode_ts", {
                    ackId: ackId
                });

                // Prepare request data for display
                const requestData = {
                    socketConnection: {
                        url: socketIoUrl,
                        path: socketIoPath,
                        transports: ["websocket"]
                    },
                    emitEvent: {
                        event: "basicapi_get_qrcode_ts",
                        data: { ackId }
                    }
                };

                // Update request display
                qrRequestTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
                document.querySelector('#qr-code .request-url').innerHTML = 'Event: basicapi_get_qrcode_ts';
                qrRequest.innerHTML = JSON.stringify(requestData, null, 2);
            });

            socket.on('connect_error', (error) => {
                console.error('Socket connection error:', error);
                qrResponse.innerHTML = JSON.stringify({ 
                    error: 'Socket connection error: ' + error.message 
                }, null, 2);
                qrResponse.style.color = '#dc3545';
            });

            // Set up event listener for QR code response
            socket.on("basicapi_get_qrcode_tc", (res) => {
                console.log('Received basicapi_get_qrcode_tc response:', res);
                const resData = res ? JSON.parse(res) : {};
                if (resData.data) {
                    console.log('Parsed response data:', resData);
                    // Update response timestamp and display
                    qrResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
                    qrResponse.innerHTML = JSON.stringify(resData, null, 2);

                    if (resData.data.qrcodeUrl) {
                        qrDisplay.innerHTML = `<img src="${resData.data.qrcodeUrl}" alt="QR Code">`;
                        qrResponse.style.color = '#28a745';
                    } else {
                        qrDisplay.innerHTML = `
                            <div class="qr-placeholder">
                                <span class="error">Failed to generate QR code</span>
                            </div>`;
                        qrResponse.style.color = '#dc3545';
                    }

                    // Close socket connection after receiving response
                    socket.disconnect();
                }
            });

        } catch (error) {
            console.error('Error in generateQRCode:', error);
            qrResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            qrResponse.innerHTML = JSON.stringify({ 
                error: error.message 
            }, null, 2);
            qrResponse.style.color = '#dc3545';
            qrDisplay.innerHTML = `
                <div class="qr-placeholder">
                    <span class="error">Error: ${error.message}</span>
                </div>`;
        }
    }
</script>