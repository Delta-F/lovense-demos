<div class="api-documentation">
    <h1>Standard API - Mobile Remote Control</h1>

    <!-- API Reference -->
    <div class="api-reference">
        <p>This implementation is based on the <a href="https://developer.lovense.com/docs/standard-solutions/standard-api.html" target="_blank">Official Lovense Standard API Documentation</a>.</p>
    </div>

    <!-- Connection Method Selection -->
    <div class="test-section">
        <h3>1. Choose Connection Method</h3>
        <div class="connection-methods">
            <button onclick="selectMethod('qr')" class="btn btn-method" id="qrMethod">QR Code Scan</button>
            <button onclick="selectMethod('game')" class="btn btn-method" id="gameMethod">Game Mode</button>
        </div>
    </div>

    <!-- QR Code Connection Section -->
    <div id="qrSection" class="test-section connection-section">
        <h3>2. QR Code Connection</h3>
        <div class="qr-setup">
            <div class="token-input-group">
                <input type="text" id="devToken" placeholder="tf7_SsG7X8qJm5l4gSYzfdLSeaZtlLl8ZaWNOSLt_ScnbUpimwPUIxB5l9TAgNle" class="form-control">
                <button onclick="getQRCode()" class="btn btn-primary">Generate QR Code</button>
            </div>
            <div id="qrcode" class="qr-container compact"></div>
            <p class="info-text">Default Token: tf7_SsG7X8qJm5l4gSYzfdLSeaZtlLl8ZaWNOSLt_ScnbUpimwPUIxB5l9TAgNle</p>
            <p class="info-text">Callback URL: <span id="callbackUrl">/callback/latest</span></p>
            <div id="callbackData" class="data-box">Waiting for data...</div>
        </div>
    </div>

    <!-- Game Mode Connection Section -->
    <div id="gameSection" class="test-section connection-section" style="display: none;">
        <h3>2. Game Mode Connection</h3>
        <div class="game-setup">
            <p class="info-text">Go to Discover -> Game Mode -> Turn on the "Enable LAN" switch -> input IP and Port</p>
            <div class="game-mode-inputs">
                <input type="text" id="localIp" placeholder="Enter Local IP" class="form-control">
                <input type="text" id="port" placeholder="Enter Port" class="form-control">
                <button onclick="connectGameMode()" class="btn btn-primary">Connect</button>
            </div>
            <div id="gameModeRequest" class="data-box">Request will appear here...</div>
            <div id="gameModeResponse" class="data-box">Response will appear here...</div>
        </div>
    </div>

    <!-- Toy Management -->
    <div class="test-section">
        <h3>3. Get Toy Information</h3>
        <button onclick="getToys()" class="btn btn-primary">Get Toys</button>
        <button onclick="getToyNames()" class="btn btn-primary">Get Toy Names</button>
        
        <div id="getToyRequest" class="data-box">Request will appear here...</div>
        <div id="getToyResponse" class="data-box">Response will appear here...</div>
    </div>

    <!-- Command Testing -->
    <div class="test-section">
        <h3>4. Test Commands</h3>
        <div class="function-test-container">
            <div class="button-container">
                <div class="toy-id-group">
                    <label>Toy ID:</label>
                    <input type="text" id="toyId" class="form-control" placeholder="e.g., ff922f7fd345">
                </div>
                <button onclick="testFunction()" class="btn btn-primary">Test Function</button>
            </div>
            
            <!-- Action sliders -->
            <div class="action-sliders">
                <div class="action-group">
                    <label>Vibrate (0-20):</label>
                    <div class="strength-control">
                        <input type="range" id="vibrate" class="strength-slider" min="0" max="20" value="0">
                        <input type="number" class="form-control strength-number" data-slider="vibrate" min="0" max="20" value="0">
                    </div>
                </div>
                <div class="action-group">
                    <label>Rotate (0-20):</label>
                    <div class="strength-control">
                        <input type="range" id="rotate" class="strength-slider" min="0" max="20" value="0">
                        <input type="number" class="form-control strength-number" data-slider="rotate" min="0" max="20" value="0">
                    </div>
                </div>
                <div class="action-group">
                    <label>Pump (0-3):</label>
                    <div class="strength-control">
                        <input type="range" id="pump" class="strength-slider" min="0" max="3" value="0">
                        <input type="number" class="form-control strength-number" data-slider="pump" min="0" max="3" value="0">
                    </div>
                </div>
                <div class="action-group">
                    <label>Thrusting (0-20):</label>
                    <div class="strength-control">
                        <input type="range" id="thrusting" class="strength-slider" min="0" max="20" value="0">
                        <input type="number" class="form-control strength-number" data-slider="thrusting" min="0" max="20" value="0">
                    </div>
                </div>
                <div class="action-group">
                    <label>Fingering (0-20):</label>
                    <div class="strength-control">
                        <input type="range" id="fingering" class="strength-slider" min="0" max="20" value="0">
                        <input type="number" class="form-control strength-number" data-slider="fingering" min="0" max="20" value="0">
                    </div>
                </div>
                <div class="action-group">
                    <label>Suction (0-20):</label>
                    <div class="strength-control">
                        <input type="range" id="suction" class="strength-slider" min="0" max="20" value="0">
                        <input type="number" class="form-control strength-number" data-slider="suction" min="0" max="20" value="0">
                    </div>
                </div>
                <div class="action-group">
                    <label>Depth (0-3):</label>
                    <div class="strength-control">
                        <input type="range" id="depth" class="strength-slider" min="0" max="3" value="0">
                        <input type="number" class="form-control strength-number" data-slider="depth" min="0" max="3" value="0">
                    </div>
                </div>
                <div class="action-group">
                    <label>Stroke (0-100):</label>
                    <div class="strength-control">
                        <input type="range" id="stroke" class="strength-slider" min="0" max="100" value="0">
                        <input type="number" class="form-control strength-number" data-slider="stroke" min="0" max="100" value="0">
                    </div>
                </div>
                <div class="action-group">
                    <label>All (0-20):</label>
                    <div class="strength-control">
                        <input type="range" id="all" class="strength-slider" min="0" max="20" value="0">
                        <input type="number" class="form-control strength-number" data-slider="all" min="0" max="20" value="0">
                    </div>
                </div>
            </div>

            <div class="time-inputs">
                <div class="input-group">
                    <label>Total:</label>
                    <input type="number" id="totalTime" class="form-control" placeholder="seconds">
                </div>
                <div class="input-group">
                    <label>Running:</label>
                    <input type="number" id="runningTime" class="form-control" placeholder="seconds">
                </div>
                <div class="input-group">
                    <label>Pause:</label>
                    <input type="number" id="pauseTime" class="form-control" placeholder="seconds">
                </div>
            </div>
            <div id="commandResponse" class="data-box">Response will appear here...</div>
        </div>
    </div>

    <!-- Solace Pro Commands -->
    <div class="test-section">
        <h3>5. Test Solace Pro Commands</h3>
        <p class="info-text">In development...</p>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script>
const API_BASE = '/api/v2';
const DEFAULT_TOKEN = "tf7_SsG7X8qJm5l4gSYzfdLSeaZtlLl8ZaWNOSLt_ScnbUpimwPUIxB5l9TAgNle";

function generateMD5(string) {
    if (typeof CryptoJS === 'undefined') {
        throw new Error('CryptoJS library is not loaded');
    }
    return CryptoJS.MD5(string).toString();
}

async function getQRCode() {
    try {
        const qrcodeDiv = document.getElementById('qrcode');
        qrcodeDiv.innerHTML = 'Generating QR Code...';
        
        // Get token value and use default if empty or only whitespace
        const tokenInput = document.getElementById('devToken').value;
        const token = tokenInput.trim() || DEFAULT_TOKEN;
        
        const uid = "test_" + Math.random().toString(36).substr(2, 9);
        const uname = "user_" + uid;
        const utoken = generateMD5(uid + "salt");
        
        const response = await axios.post(
            "https://api.lovense-api.com/api/lan/getQrCode",
            {
                token: token,
                uid: uid,
                uname: uname,
                utoken: utoken,
                v: 2
            }
        );
        
        if (response.data && response.data.code === 0) {
            qrcodeDiv.innerHTML = '';
            const img = document.createElement('img');
            img.src = response.data.data.qr;
            img.style.maxWidth = '200px';
            img.style.height = 'auto';
            qrcodeDiv.appendChild(img);
            
            const callbackUrlText = document.getElementById('callbackUrl');
            if (callbackUrlText) {
                callbackUrlText.textContent = document.createTextNode(`${API_BASE}/lovense/callback/latest`).textContent;
            }
        } else {
            qrcodeDiv.innerHTML = 'Error: ' + (response.data.message || 'Failed to generate QR code');
        }
    } catch (error) {
        console.error('QR Code generation failed:', error);
        document.getElementById('qrcode').innerHTML = 'Error: ' + error.message;
    }
}

function formatRequestResponse(elementId, url = '', requestBody = '', responseData = '', error = null) {
    const now = new Date().toISOString();
    const container = document.getElementById(elementId);
    
    let html = `<div class="request-section">
        <div class="section-header">Request (${now})</div>
        <div class="section-url">URL: ${url}</div>
        <div class="section-body">`;
    
    if (requestBody) {
        html += `${JSON.stringify(requestBody, null, 2)}`;
    } else {
        html += 'Request will appear here...';
    }
    
    html += `</div></div>
    <div class="response-section">
        <div class="section-header">Response (${now})</div>
        <div class="section-body">`;
    
    if (responseData) {
        html += `${JSON.stringify(responseData, null, 2)}`;
    } else if (error) {
        html += `<span class="error-text">Error: ${error}</span>`;
    } else {
        html += 'Response will appear here...';
    }
    
    html += '</div></div>';
    
    container.innerHTML = html;
}

async function getToys() {
    try {
        const isGameMode = document.getElementById('gameSection').style.display !== 'none';
        let apiUrl;
        
        if (isGameMode) {
            const localIp = document.getElementById('localIp').value;
            const port = document.getElementById('port').value;
            if (!localIp || !port) {
                throw new Error('Please enter both IP and Port for Game Mode');
            }
            apiUrl = `https://${localIp}:${port}/command`;
        } else {
            const callbackResponse = await axios.get(`${API_BASE}/lovense/callback/latest`);
            if (!callbackResponse.data || !callbackResponse.data.domain || !callbackResponse.data.httpsPort) {
                throw new Error('No connection data available. Please scan QR code first.');
            }
            
            const { domain, httpsPort } = callbackResponse.data;
            apiUrl = `https://${domain}:${httpsPort}/command`;
        }

        const requestBody = {
            command: "GetToys"
        };

        // Display request
        document.getElementById('getToyRequest').innerHTML = `Request URL: ${apiUrl}\n\nRequest Body:\n${JSON.stringify(requestBody, null, 2)}`;

        const response = await axios.post(apiUrl, requestBody, {
            headers: {
                'Content-Type': 'application/json',
                'X-platform': 'deltatest'
            }
        });
        
        // Display response
        document.getElementById('getToyResponse').innerHTML = `Response:\n${JSON.stringify(response.data, null, 2)}`;
    } catch (error) {
        document.getElementById('getToyResponse').innerHTML = `Error: ${error.message}`;
    }
}

async function getToyNames() {
    try {
        const isGameMode = document.getElementById('gameSection').style.display !== 'none';
        let apiUrl;
        
        if (isGameMode) {
            const localIp = document.getElementById('localIp').value;
            const port = document.getElementById('port').value;
            if (!localIp || !port) {
                throw new Error('Please enter both IP and Port for Game Mode');
            }
            apiUrl = `https://${localIp}:${port}/command`;
        } else {
            const callbackResponse = await axios.get(`${API_BASE}/lovense/callback/latest`);
            if (!callbackResponse.data || !callbackResponse.data.domain || !callbackResponse.data.httpsPort) {
                throw new Error('No connection data available. Please scan QR code first.');
            }
            
            const { domain, httpsPort } = callbackResponse.data;
            apiUrl = `https://${domain}:${httpsPort}/command`;
        }

        const requestBody = {
            command: "GetToyName"
        };

        // Display request
        document.getElementById('getToyRequest').innerHTML = `Request URL: ${apiUrl}\n\nRequest Body:\n${JSON.stringify(requestBody, null, 2)}`;

        const response = await axios.post(apiUrl, requestBody, {
            headers: {
                'Content-Type': 'application/json',
                'X-platform': 'deltatest'
            }
        });
        
        // Display response
        document.getElementById('getToyResponse').innerHTML = `Response:\n${JSON.stringify(response.data, null, 2)}`;
    } catch (error) {
        document.getElementById('getToyResponse').innerHTML = `Error: ${error.message}`;
    }
}

function initCallbackListener() {
    const baseUrl = window.location.origin;
    const callbackUrl = `${baseUrl}/api/v2/lovense/callback`;
    
    const callbackUrlText = document.getElementById('callbackUrl');
    if (callbackUrlText) {
        callbackUrlText.textContent = callbackUrl;
    }

    setInterval(async () => {
        try {
            const response = await axios.get(`${API_BASE}/lovense/callback/latest`);
            if (response.data) {
                document.getElementById('callbackData').innerHTML = 
                    `<pre>${JSON.stringify(response.data, null, 2)}</pre>`;
            }
        } catch (error) {
            console.error('Failed to fetch callback data:', error);
            document.getElementById('callbackData').innerHTML = 
                'Error fetching callback data: ' + error.message;
        }
    }, 20000);
}

function selectMethod(method) {
    // Reset button styles
    document.querySelectorAll('.btn-method').forEach(btn => {
        btn.classList.remove('btn-primary');
        btn.classList.add('btn-secondary');
    });

    // Show/hide appropriate sections
    if (method === 'qr') {
        document.getElementById('qrSection').style.display = 'block';
        document.getElementById('gameSection').style.display = 'none';
        document.getElementById('qrMethod').classList.add('btn-primary');
        document.getElementById('qrMethod').classList.remove('btn-secondary');
    } else {
        document.getElementById('qrSection').style.display = 'none';
        document.getElementById('gameSection').style.display = 'block';
        document.getElementById('gameMethod').classList.add('btn-primary');
        document.getElementById('gameMethod').classList.remove('btn-secondary');
    }
}

async function connectGameMode() {
    const localIp = document.getElementById('localIp').value;
    const port = document.getElementById('port').value;
    
    if (!localIp || !port) {
        document.getElementById('gameModeResponse').innerHTML = 'Please enter both IP and Port';
        return;
    }

    const apiUrl = `https://${localIp}:${port}/command`;
    const requestBody = {
        command: "GetToys"
    };

    try {
        // Display request details
        const requestTimestamp = new Date().toISOString();
        const requestDisplay = `Request (${requestTimestamp})\nURL: ${apiUrl}\n\n${JSON.stringify(requestBody, null, 2)}`;
        document.getElementById('gameModeRequest').innerHTML = requestDisplay;

        const response = await axios.post(apiUrl, requestBody, {
            headers: {
                'Content-Type': 'application/json',
                'X-platform': 'deltatest'
            }
        });
        
        // Display response details
        const responseTimestamp = new Date().toISOString();
        const responseDisplay = `Response (${responseTimestamp})\n\n${JSON.stringify(response.data, null, 2)}`;
        document.getElementById('gameModeResponse').innerHTML = responseDisplay;
        document.getElementById('gameModeResponse').style.color = '#28a745';
    } catch (error) {
        // Display error details
        const errorTimestamp = new Date().toISOString();
        const errorDisplay = `Error (${errorTimestamp})\n\n${error.message}`;
        document.getElementById('gameModeResponse').innerHTML = errorDisplay;
        document.getElementById('gameModeResponse').style.color = '#dc3545';
    }
}

// Initialize with QR method selected
document.addEventListener('DOMContentLoaded', () => {
    selectMethod('qr');
    initCallbackListener();
});

document.addEventListener('DOMContentLoaded', function() {
    // Get all sliders
    const sliders = document.querySelectorAll('.strength-slider');
    const numberInputs = document.querySelectorAll('.strength-number');

    // Add listeners for sliders
    sliders.forEach(slider => {
        slider.addEventListener('input', function() {
            const numberInput = this.nextElementSibling;
            numberInput.value = this.value;
        });
    });

    // Add listeners for number inputs
    numberInputs.forEach(input => {
        input.addEventListener('input', function() {
            const slider = this.previousElementSibling;
            const value = parseInt(this.value);
            const max = parseInt(this.max);
            
            if (!isNaN(value) && value >= 0 && value <= max) {
                slider.value = value;
            }
        });
    });
});

async function testFunction() {
    const toyId = document.getElementById('toyId').value;
    let apiUrl;

    try {
        const isGameMode = document.getElementById('gameSection').style.display !== 'none';
        
        if (isGameMode) {
            const localIp = document.getElementById('localIp').value;
            const port = document.getElementById('port').value;
            if (!localIp || !port) {
                throw new Error('Please enter both IP and Port for Game Mode');
            }
            apiUrl = `https://${localIp}:${port}/command`;
        } else {
            const callbackResponse = await axios.get(`${API_BASE}/lovense/callback/latest`);
            if (!callbackResponse.data || !callbackResponse.data.domain || !callbackResponse.data.httpsPort) {
                throw new Error('No connection data available. Please scan QR code first.');
            }
            
            const { domain, httpsPort } = callbackResponse.data;
            apiUrl = `https://${domain}:${httpsPort}/command`;
        }

        const actions = [];
        const actionTypes = ['vibrate', 'rotate', 'pump', 'thrusting', 'fingering', 'suction', 'depth', 'stroke', 'all'];
        
        actionTypes.forEach(type => {
            const value = document.getElementById(type).value;
            if (value > 0) {
                const actionName = type.charAt(0).toUpperCase() + type.slice(1);
                actions.push(`${actionName}:${value}`);
            }
        });

        if (actions.length === 0) {
            throw new Error('Please set at least one action value above 0');
        }

        const requestBody = {
            command: "Function",
            action: actions.join(','),
            timeSec: parseInt(document.getElementById('totalTime').value) || 0,
            loopRunningSec: parseInt(document.getElementById('runningTime').value) || 0,
            loopPauseSec: parseInt(document.getElementById('pauseTime').value) || 0,
            toy: toyId,
            apiVer: 1
        };

        // Show initial request
        formatRequestResponse('commandResponse', apiUrl, requestBody);

        const response = await axios.post(apiUrl, requestBody, {
            headers: {
                'Content-Type': 'application/json',
                'X-platform': 'deltatest'
            }
        });
        
        // Show response
        formatRequestResponse('commandResponse', apiUrl, requestBody, response.data);
    } catch (error) {
        formatRequestResponse('commandResponse', apiUrl, null, null, error.message);
    }
}
</script>

<style>
.api-documentation {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
}

h1 {
  color: #2c3e50;
  margin-bottom: 2rem;
  padding-bottom: 1rem;
  border-bottom: 2px solid #eee;
}

.test-section {
  background: #fff;
  border-radius: 8px;
  padding: 1.5rem;
  margin-bottom: 2rem;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

h3 {
  color: #34495e;
  margin-bottom: 1rem;
  font-size: 1.2rem;
}

.form-control {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  margin-bottom: 1rem;
  font-size: 1rem;
}

.btn {
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.9rem;
  font-weight: 500;
  transition: all 0.2s;
  margin-right: 0.5rem;
  margin-bottom: 0.5rem;
}

.btn-primary {
  background: #3498db;
  color: white;
}

.btn-primary:hover {
  background: #2980b9;
}

.btn-secondary {
  background: #95a5a6;
  color: white;
}

.btn-danger {
  background: #e74c3c;
  color: white;
}

.data-box {
  background: #f8f9fa;
  border: 1px solid #eee;
  border-radius: 4px;
  padding: 1rem;
  margin-top: 1rem;
  font-family: monospace;
  white-space: pre-wrap;
}

.qr-container {
  display: flex;
  justify-content: center;
  padding: 1rem;
  background: #fff;
  border-radius: 4px;
}

.connection-methods {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
}

.btn-method {
    flex: 1;
    padding: 1rem;
    font-size: 1.1rem;
}

.game-mode-inputs {
    display: grid;
    gap: 1rem;
    margin: 1rem 0;
}

.game-setup p {
    margin: 0.5rem 0;
    color: #666;
}

@media (prefers-color-scheme: dark) {
    .game-setup p {
        color: #aaa;
    }
}

/* Update action group styles for inline layout */
.action-group {
    display: flex;
    align-items: center;
    padding: 8px 12px;
    background: #f8f9fa;
    border-radius: 4px;
    margin-bottom: 8px;
}

.action-group label {
    min-width: 140px;
    font-size: 0.9em;
    margin-right: 10px;
    color: #666;
}

.strength-control {
    display: flex;
    align-items: center;
    flex: 1;
    gap: 10px;
}

.strength-slider {
    flex: 1;
    margin: 0;
}

.strength-number {
    width: 60px !important;
    padding: 4px 8px !important;
    margin: 0 !important;
}

/* Update time inputs for inline layout */
.time-inputs {
    display: flex;
    align-items: center;
    gap: 20px;
    background: #f8f9fa;
    padding: 12px;
    border-radius: 4px;
    margin: 15px 0;
}

.time-inputs .input-group {
    display: flex;
    align-items: center;
    flex: 1;
    gap: 10px;
    margin: 0;
}

.time-inputs .input-group label {
    min-width: 100px;
    white-space: nowrap;
    margin: 0;
}

.time-inputs .form-control {
    margin: 0;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
    .action-group {
        background: #2d2d2d;
    }
    
    .action-group label {
        color: #aaa;
    }
    
    .time-inputs {
        background: #2d2d2d;
    }
}

.token-input-group {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 1rem;
}

.token-input-group .form-control {
    margin-bottom: 0;
}

.token-input-group .btn {
    margin: 0;
    white-space: nowrap;
}

.request-json {
    margin: 1rem 0;
}

.request-json p {
    margin-bottom: 0.5rem;
    color: #666;
    font-weight: 500;
}

@media (prefers-color-scheme: dark) {
    .request-json p {
        color: #aaa;
    }
}

/* Reduce spacing between elements */
.qr-container.compact {
    padding: 0.5rem;
    margin: 0.5rem 0;
}

.info-text {
    margin: 0.25rem 0;
    color: #666;
}

.game-mode-inputs {
    margin: 0.5rem 0;
}

.request-json.compact {
    margin: 0.5rem 0;
}

.request-json.compact p {
    margin-bottom: 0.25rem;
}

.data-box {
    margin-top: 0.5rem;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
    .info-text {
        color: #aaa;
    }
}

/* API Reference styling */
.api-reference {
    background: #f8f9fa;
    border-left: 4px solid #3498db;
    padding: 1rem;
    margin-bottom: 2rem;
    border-radius: 0 4px 4px 0;
}

.api-reference p {
    margin: 0;
    font-size: 0.95rem;
    color: #2c3e50;
}

.api-reference a {
    color: #3498db;
    text-decoration: none;
    font-weight: 500;
}

.api-reference a:hover {
    text-decoration: underline;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
    .api-reference {
        background: #2d2d2d;
        border-left-color: #3498db;
    }

    .api-reference p {
        color: #fff;
    }

    .api-reference a {
        color: #5dade2;
    }
}

/* Request/Response Box Styling */
.request-section,
.response-section {
    margin-bottom: 1rem;
    background: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 4px;
    overflow: hidden;
}

.section-header {
    padding: 0.5rem 1rem;
    background: #e9ecef;
    font-weight: 500;
    color: #495057;
    border-bottom: 1px solid #dee2e6;
}

.section-url {
    padding: 0.5rem 1rem;
    background: #fff;
    border-bottom: 1px solid #dee2e6;
    font-family: monospace;
    font-size: 0.9em;
}

.section-body {
    padding: 1rem;
    white-space: pre-wrap;
    font-family: monospace;
    font-size: 0.9em;
    background: #fff;
}

.error-text {
    color: #dc3545;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
    .request-section,
    .response-section {
        background: #2d2d2d;
        border-color: #404040;
    }

    .section-header {
        background: #404040;
        color: #fff;
        border-bottom-color: #505050;
    }

    .section-url,
    .section-body {
        background: #2d2d2d;
        color: #fff;
        border-bottom-color: #404040;
    }

    .error-text {
        color: #ff6b6b;
    }
}

/* Toy Information Section Styling */
.api-info {
    margin-top: 1rem;
}

.request-info {
    background: #f8f9fa;
    border-radius: 4px;
    padding: 1rem;
    margin: 1rem 0;
}

.request-info h4 {
    margin: 0 0 0.5rem 0;
    color: #2c3e50;
    font-size: 1rem;
}

.url-info, .body-info {
    margin: 0.5rem 0;
}

.label {
    font-weight: 500;
    color: #666;
    margin-right: 0.5rem;
}

.url {
    font-family: monospace;
    word-break: break-all;
}

.body-content {
    background: #fff;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    padding: 0.5rem;
    margin: 0.5rem 0;
    font-family: monospace;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
    .request-info {
        background: #2d2d2d;
    }

    .request-info h4 {
        color: #fff;
    }

    .label {
        color: #aaa;
    }

    .body-content {
        background: #1a1a1a;
        border-color: #404040;
        color: #fff;
    }
}

/* Response Monitor Styling */
.response-monitor {
    margin-top: 1.5rem;
}

.response-monitor h4 {
    margin: 0 0 0.5rem 0;
    color: #2c3e50;
    font-size: 1rem;
}

.monitor-content {
    background: #fff;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    padding: 1rem;
    min-height: 100px;
    font-family: monospace;
    white-space: pre-wrap;
}

.monitor-placeholder {
    color: #6c757d;
    font-style: italic;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
    .response-monitor h4 {
        color: #fff;
    }

    .monitor-content {
        background: #1a1a1a;
        border-color: #404040;
        color: #fff;
    }

    .monitor-placeholder {
        color: #adb5bd;
    }
}
</style> 