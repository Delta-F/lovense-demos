<div class="api-documentation">
    <h1>Standard API - Mobile Remote Control</h1>

    <!-- API Reference -->
    <div class="api-reference">
        <p>This implementation is based on the <a href="https://developer.lovense.com/docs/standard-solutions/standard-api.html" target="_blank">Official Lovense Standard API Documentation</a>.</p>
    </div>

    <!-- Combined Connection Section -->
    <div class="test-section">
        <h3>1. Connection Setup</h3>
        <div class="connection-container">
            <!-- Connection Method Buttons -->
            <div class="connection-methods">
                <button onclick="selectMethod('game')" class="btn btn-method" id="gameMethod">By Game Mode</button>
                <button onclick="selectMethod('qr')" class="btn btn-method" id="qrMethod">By QR Code Scan</button>
            </div>

            <!-- Game Mode Connection Section -->
            <div id="gameSection" class="connection-section">
                <div class="game-setup">
                    <p class="info-text">Go to Discover -> Game Mode -> Turn on the "Enable LAN" switch -> input IP and Port</p>
                    <div class="game-mode-controls">
                        <input type="text" id="localIp" placeholder="Enter Local IP" class="form-control">
                        <input type="text" id="port" placeholder="Port (e.g. 20010 or 30010)" class="form-control">
                        <label class="https-checkbox">
                            <input type="checkbox" id="useHttps" checked> Use HTTPS
                        </label>
                        <button onclick="connectGameMode()" class="btn btn-primary">Connect</button>
                    </div>
                    <div id="gameModeRequest" class="data-box">Request will appear here...</div>
                    <div id="gameModeResponse" class="data-box">Response will appear here...</div>
                </div>
            </div>

            <!-- QR Code Connection Section -->
            <div id="qrSection" class="connection-section" style="display: none;">
                <div class="qr-setup">
                    <p class="info-text">Please scan the QR code generated with Lovense Remote App for further test.</p>
                    <div class="userid-controls">
                        {{!-- <label>User ID:</label> --}}
                        <input type="text" id="custom-user-id" placeholder="Enter fixed User ID if you need, auto-generate if blank" class="form-control">
                        <button onclick="getQRCode()" class="btn btn-primary">Generate QR Code</button>
                    </div>
                    <div id="qrcode" class="qr-container compact"></div>
                    
                    <!-- Add QR Code API Results -->
                    <div class="api-test-results">
                        <div class="request-box">
                            <h4>QR Code Request:</h4>
                            <div id="qrRequestUrl" class="request-url">URL: </div>
                            <div class="timestamp" id="qrRequestTime">Timestamp: -</div>
                            <div id="qrRequest" class="data-box">Request will appear here...</div>
                        </div>
                        <div class="response-box">
                            <h4>QR Code Response:</h4>
                            <div class="timestamp" id="qrResponseTime">Timestamp: -</div>
                            <div id="qrResponse" class="data-box">Response will appear here...</div>
                        </div>
                    </div>

                    <p class="info-text">Callback URL: <span id="callbackUrl">/callback/latest</span></p>
                    <div id="callbackData" class="data-box">Waiting for data...</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Toy Management -->
    <div class="test-section">
        <h3>2. Search Connected Toys</h3>
        <button onclick="getToys()" class="btn btn-primary">Search Toys</button>
        <button onclick="getToyNames()" class="btn btn-primary">Get Toy Names</button>
        
        <div class="api-test-results">
            <div class="request-box">
                <h4>Request:</h4>
                <div id="getToyRequestUrl" class="request-url">URL: </div>
                <div class="timestamp" id="getToyRequestTime">Timestamp: -</div>
                <div id="getToyRequest">Request will appear here...</div>
            </div>
            <div class="response-box">
                <h4>Response:</h4>
                <div class="timestamp" id="getToyResponseTime">Timestamp: -</div>
                <div id="getToyResponse">Response will appear here...</div>
            </div>
        </div>
    </div>

    <!-- Command Testing -->
    <div class="test-section">
        <h3>3. Test `Function` Commands</h3>
        <div class="function-test-container">
            <div class="button-container">
                <div class="toy-id-group">
                    <label>Toy ID:</label>
                    <input type="text" id="toyId" class="form-control" placeholder="e.g., ff922f7fd345">
                </div>
                <button onclick="testFunction()" class="btn btn-primary">Test Function</button>
                <button onclick="stopFunction()" class="btn btn-danger">Stop</button>
                <button onclick="resetAllActions()" class="btn btn-secondary">Reset All</button>
            </div>
            
            <!-- Action sliders -->
            <div class="action-sliders">
                <div class="action-group">
                    <label>Vibrate (0-20):</label>
                    <div class="strength-control">
                        <input type="range" id="vibrate" class="strength-slider" min="0" max="20" value="0">
                        <input type="number" class="form-control strength-number" data-slider="vibrate" min="0" max="20" value="0">
                    </div>
                </div>
                <div class="action-group">
                    <label>Rotate (0-20):</label>
                    <div class="strength-control">
                        <input type="range" id="rotate" class="strength-slider" min="0" max="20" value="0">
                        <input type="number" class="form-control strength-number" data-slider="rotate" min="0" max="20" value="0">
                    </div>
                </div>
                <div class="action-group">
                    <label>Pump (0-3):</label>
                    <div class="strength-control">
                        <input type="range" id="pump" class="strength-slider" min="0" max="3" value="0">
                        <input type="number" class="form-control strength-number" data-slider="pump" min="0" max="3" value="0">
                    </div>
                </div>
                <div class="action-group">
                    <label>Thrusting (0-20):</label>
                    <div class="strength-control">
                        <input type="range" id="thrusting" class="strength-slider" min="0" max="20" value="0">
                        <input type="number" class="form-control strength-number" data-slider="thrusting" min="0" max="20" value="0">
                    </div>
                </div>
                <div class="action-group">
                    <label>Fingering (0-20):</label>
                    <div class="strength-control">
                        <input type="range" id="fingering" class="strength-slider" min="0" max="20" value="0">
                        <input type="number" class="form-control strength-number" data-slider="fingering" min="0" max="20" value="0">
                    </div>
                </div>
                <div class="action-group">
                    <label>Suction (0-20):</label>
                    <div class="strength-control">
                        <input type="range" id="suction" class="strength-slider" min="0" max="20" value="0">
                        <input type="number" class="form-control strength-number" data-slider="suction" min="0" max="20" value="0">
                    </div>
                </div>
                <div class="action-group">
                    <label>Depth (0-3):</label>
                    <div class="strength-control">
                        <input type="range" id="depth" class="strength-slider" min="0" max="3" value="0">
                        <input type="number" class="form-control strength-number" data-slider="depth" min="0" max="3" value="0">
                    </div>
                </div>
                <div class="action-group">
                    <label>Stroke (0-100):</label>
                    <div class="strength-control">
                        <input type="range" id="stroke" class="strength-slider" min="0" max="100" value="0">
                        <input type="number" class="form-control strength-number" data-slider="stroke" min="0" max="100" value="0">
                    </div>
                </div>
                <div class="action-group">
                    <label>All (0-20):</label>
                    <div class="strength-control">
                        <input type="range" id="all" class="strength-slider" min="0" max="20" value="0">
                        <input type="number" class="form-control strength-number" data-slider="all" min="0" max="20" value="0">
                    </div>
                </div>
                <div class="action-group">
                    <label>Oscillate (0-20):</label>
                    <div class="strength-control">
                        <input type="range" id="oscillate" class="strength-slider" min="0" max="20" value="0">
                        <input type="number" class="form-control strength-number" data-slider="oscillate" min="0" max="20" value="0">
                    </div>
                </div>
            </div>

            <div class="time-inputs">
                <div class="input-group">
                    <label>Total:</label>
                    <input type="number" id="totalTime" class="form-control" placeholder="seconds, set 5 if blank">
                </div>
                <div class="input-group">
                    <label>Running:</label>
                    <input type="number" id="runningTime" class="form-control" placeholder="seconds, set 5 if blank">
                </div>
                <div class="input-group">
                    <label>Pause:</label>
                    <input type="number" id="pauseTime" class="form-control" placeholder="seconds, set 0 if blank">
                </div>
            </div>

            <div class="api-test-results">
                <div class="request-box">
                    <h4>Request:</h4>
                    <div id="commandRequestUrl" class="request-url">URL: </div>
                    <div class="timestamp" id="commandRequestTime">Timestamp: -</div>
                    <div id="commandRequest">Request will appear here...</div>
                </div>
                <div class="response-box">
                    <h4>Response:</h4>
                    <div class="timestamp" id="commandResponseTime">Timestamp: -</div>
                    <div id="commandResponse">Response will appear here...</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Update the Solace Pro Commands section -->
    <div class="test-section">
        <h3>4. Test `Position` Commands</h3>
        <p class="test-description">Special Position request for Solace Pro. Note: Solace Pro also responds to Vibrate and Thrust commands in section 3.</p>
        
        <div class="function-test-container">
            <div class="action-group">
                <label>Position (0-100):</label>
                <div class="strength-control">
                    <input type="range" id="position" class="strength-slider" min="0" max="100" value="0">
                    <input type="number" class="form-control strength-number" data-slider="position" min="0" max="100" value="0">
                </div>
                <button onclick="testPosition()" class="btn btn-primary" style="margin-left: 10px;">Test Position</button>
            </div>

            <div class="api-test-results">
                <div class="request-box">
                    <h4>Request:</h4>
                    <div id="positionRequestUrl" class="request-url">URL: </div>
                    <div class="timestamp" id="positionRequestTime">Timestamp: -</div>
                    <div id="positionRequest">Request will appear here...</div>
                </div>
                <div class="response-box">
                    <h4>Response:</h4>
                    <div class="timestamp" id="positionResponseTime">Timestamp: -</div>
                    <div id="positionResponse">Response will appear here...</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Pattern Testing -->
    <div class="test-section">
        <h3>5. Test `Pattern` Commands</h3>

        <!-- Header with Toy ID and Input Method Toggle -->
        <div class="pattern-header">
            <div class="toy-id-group">
                <label>Toy ID:</label>
                <input type="text" id="patternToyId" class="form-control" placeholder="e.g., ff922f7fd345">
                <button onclick="testPattern()" class="btn btn-primary">Test Pattern</button>
            </div>
            <div class="input-method-toggle">
                <button onclick="togglePatternInput('form')" class="btn btn-method" id="formMethod">Form Input</button>
                <button onclick="togglePatternInput('json')" class="btn btn-method" id="jsonMethod">JSON Input</button>
            </div>
        </div>

        <div class="pattern-test-container">
            <!-- Form Input Section -->
            <div id="formInputSection" class="pattern-inputs">
                <div class="pattern-inputs">
                    <div class="feature-group">
                        <div class="feature-header">
                            <label>Features:</label>
                            <button onclick="toggleAllFeatures()" class="btn btn-sm btn-secondary" id="toggleFeaturesBtn">Check All</button>
                        </div>
                        <div class="feature-checkboxes">
                            <label><input type="checkbox" value="v" checked> Vibrate</label>
                            <label><input type="checkbox" value="r"> Rotate</label>
                            <label><input type="checkbox" value="p"> Pump</label>
                            <label><input type="checkbox" value="t"> Thrust</label>
                            <label><input type="checkbox" value="f"> Finger</label>
                            <label><input type="checkbox" value="s"> Suction</label>
                            <label><input type="checkbox" value="d"> Depth</label>
                            <label><input type="checkbox" value="o"> Oscillate</label>
                        </div>
                    </div>

                    <div class="pattern-group">
                        <label>Pattern Strength (semicolon-separated numbers 0-20):</label>
                        <input type="text" id="patternStrength" class="form-control" 
                               placeholder="e.g., 20;20;5;20;10" value="20;20;5;20;10">
                    </div>

                    <div class="interval-group">
                        <label>Interval (milliseconds, min 100):</label>
                        <input type="number" id="patternInterval" class="form-control" 
                               min="100" value="1000">
                    </div>

                    <div class="time-group">
                        <label>Total Time (seconds):</label>
                        <input type="number" id="patternTime" class="form-control" 
                               min="1" value="9">
                    </div>
                </div>
            </div>

            <!-- JSON Input Section -->
            <div id="jsonInputSection" class="pattern-inputs" style="display: none;">
                <div class="json-input-group">
                    <label>Pattern Request JSON:</label>
                    <textarea id="patternJson" class="form-control json-textarea" rows="8" 
                        placeholder='Example:
{
    "command": "Pattern",
    "rule": "V:1;F:v;S:1000#",
    "strength": "20;20;5;20;10",
    "timeSec": 9,
    "toy": "ff922f7fd345",
    "apiVer": 2
}'></textarea>
                </div>
            </div>

            <button onclick="testPattern()" class="btn btn-primary">Test Pattern</button>

            <div class="api-test-results">
                <div class="request-box">
                    <h4>Request:</h4>
                    <div id="patternRequestUrl" class="request-url">URL: </div>
                    <div class="timestamp" id="patternRequestTime">Timestamp: -</div>
                    <div id="patternRequest">Request will appear here...</div>
                </div>
                <div class="response-box">
                    <h4>Response:</h4>
                    <div class="timestamp" id="patternResponseTime">Timestamp: -</div>
                    <div id="patternResponse">Response will appear here...</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Update the PatternV2 Commands section -->
    <div class="test-section">
        <h3>6. Test `PatternV2` Commands</h3>
        <p class="test-description">Send advanced pattern commands to Solace Pro. Each action consists of a timestamp (ms) and position value.</p>
        
        <div class="patternv2-container">
            <!-- Add common toy ID input at the top -->
            <div class="toy-id-container">
                <div class="toy-id-group">
                    <label>Toy ID:</label>
                    <input type="text" id="patternv2ToyId" class="form-control" placeholder="e.g., ff922f7fd345">
                </div>
            </div>

            <!-- Tab navigation -->
            <div class="patternv2-tabs">
                <button class="tab-btn active" onclick="switchPatternV2Tab('setup')">Setup</button>
                <button class="tab-btn" onclick="switchPatternV2Tab('play')">Play</button>
                <button class="tab-btn" onclick="switchPatternV2Tab('stop')">Stop</button>
                <button class="tab-btn" onclick="switchPatternV2Tab('sync')">Sync Time</button>
            </div>

            <!-- Setup Tab -->
            <div id="setup-tab" class="tab-content active">
                <div class="command-container">
                    <div class="form-section">
                        <h4>Form Input</h4>
                        <div class="patternv2-inputs">
                            <div class="pattern-actions" id="patternActions">
                                <div class="action-row">
                                    <div class="input-group">
                                        <label>Timestamp (ms):</label>
                                        <input type="number" class="form-control ts-input" min="0" max="7200000" value="0">
                                    </div>
                                    <div class="input-group">
                                        <label>Position (0-100):</label>
                                        <input type="number" class="form-control pos-input" min="0" max="100" value="10">
                                    </div>
                                    <button onclick="removePatternAction(this)" class="btn btn-danger remove-action">×</button>
                                </div>
                            </div>
                            <div class="action-buttons">
                                <button onclick="addPatternAction()" class="btn btn-secondary">Add Action</button>
                                <button onclick="clearPatternActions()" class="btn btn-secondary">Clear All</button>
                            </div>
                        </div>
                    </div>
                    <div class="json-section">
                        <h4>Direct JSON Input</h4>
                        <div class="json-input-container">
                            <textarea id="setupJsonInput" class="json-textarea" placeholder='[{"ts":0,"pos":10},{"ts":100,"pos":50}]'></textarea>
                            <div class="hint">Input actions array only. Other parameters will use default values.</div>
                        </div>
                    </div>
                    <button onclick="testPatternV2('Setup')" class="btn btn-primary">Test Setup</button>
                </div>
            </div>

            <!-- Play Tab -->
            <div id="play-tab" class="tab-content">
                <div class="command-container">
                    <div class="play-inputs">
                        <div class="input-group">
                            <label>Start Time (ms):</label>
                            <input type="number" id="playStartTime" class="form-control" value="0">
                        </div>
                        <div class="input-group">
                            <label>Offset Time (ms):</label>
                            <input type="number" id="playOffsetTime" class="form-control" value="0">
                        </div>
                        <div class="input-group">
                            <label>Total Running Time (ms):</label>
                            <input type="number" id="playTimeMS" class="form-control" value="10000">
                        </div>
                    </div>
                    <button onclick="testPatternV2('Play')" class="btn btn-primary">Test Play</button>
                </div>
            </div>

            <!-- Stop Tab -->
            <div id="stop-tab" class="tab-content">
                <div class="command-container">
                    <button onclick="testPatternV2('Stop')" class="btn btn-primary">Test Stop</button>
                </div>
            </div>

            <!-- Sync Time Tab -->
            <div id="sync-tab" class="tab-content">
                <div class="command-container">
                    <div class="sync-info">
                        <p>This function helps calculate the offset time from the server:</p>
                        <ol>
                            <li>Records time T1 before sending request</li>
                            <li>Records time T2 after receiving response</li>
                            <li>Calculates offset: (T2 - T1)</li>
                        </ol>
                        <div id="syncResults" class="sync-results">
                            <div>Start Time (T1): <span id="syncT1">-</span></div>
                            <div>End Time (T2): <span id="syncT2">-</span></div>
                            <div>Calculated Offset: <span id="syncOffset">-</span></div>
                        </div>
                    </div>
                    <button onclick="testPatternV2('SyncTime')" class="btn btn-primary">Test Sync Time</button>
                </div>
            </div>

            <!-- API test results -->
            <div class="api-test-results">
                <div class="request-box">
                    <h4>Request:</h4>
                    <div id="patternv2RequestUrl" class="request-url">URL: </div>
                    <div class="timestamp" id="patternv2RequestTime">Timestamp: -</div>
                    <div id="patternv2Request">Request will appear here...</div>
                </div>
                <div class="response-box">
                    <h4>Response:</h4>
                    <div class="timestamp" id="patternv2ResponseTime">Timestamp: -</div>
                    <div id="patternv2Response">Response will appear here...</div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script>
const API_BASE = '/api/v2';
const DEFAULT_TOKEN = "tf7_SsG7X8qJm5l4gSYzfdLSeaZtlLl8ZaWNOSLt_ScnbUpimwPUIxB5l9TAgNle";

function generateMD5(string) {
    if (typeof CryptoJS === 'undefined') {
        throw new Error('CryptoJS library is not loaded');
    }
    return CryptoJS.MD5(string).toString();
}

async function getQRCode() {
    try {
        const qrcodeDiv = document.getElementById('qrcode');
        qrcodeDiv.innerHTML = 'Generating QR Code...';
        
        const token = DEFAULT_TOKEN;  // Always use default token
        const uid = document.getElementById('custom-user-id').value || "test_" + Math.random().toString(36).substr(2, 9);
        const uname = "user_" + uid;
        const utoken = generateMD5(uid + "salt");
        
        // Prepare request data
        const requestData = {
            token: token,
            uid: uid,
            uname: uname,
            utoken: utoken,
            v: 2
        };

        // Update request display
        const requestTimestamp = getChineseTimestamp();
        document.getElementById('qrRequestUrl').innerHTML = 'URL: https://api.lovense-api.com/api/lan/getQrCode';
        document.getElementById('qrRequestTime').innerHTML = `Timestamp: ${requestTimestamp}`;
        document.getElementById('qrRequest').innerHTML = JSON.stringify(requestData, null, 2);
        
        const response = await axios.post(
            "https://api.lovense-api.com/api/lan/getQrCode",
            requestData
        );
        
        // Update response display
        const responseTimestamp = getChineseTimestamp();
        document.getElementById('qrResponseTime').innerHTML = `Timestamp: ${responseTimestamp}`;
        document.getElementById('qrResponse').innerHTML = JSON.stringify(response.data, null, 2);
        
        if (response.data && response.data.code === 0) {
            qrcodeDiv.innerHTML = '';
            const img = document.createElement('img');
            img.src = response.data.data.qr;
            img.style.maxWidth = '200px';
            img.style.height = 'auto';
            qrcodeDiv.appendChild(img);
            
            const callbackUrlText = document.getElementById('callbackUrl');
            callbackUrlText.textContent = document.createTextNode(`${API_BASE}/lovense/callback/latest`).textContent;
        } else {
            qrcodeDiv.innerHTML = 'Error: ' + (response.data.message || 'Failed to generate QR code');
        }
    } catch (error) {
        console.error('QR Code generation failed:', error);
        document.getElementById('qrcode').innerHTML = 'Error: ' + error.message;
        
        // Update response display with error
        const errorTimestamp = getChineseTimestamp();
        document.getElementById('qrResponseTime').innerHTML = `Timestamp: ${errorTimestamp}`;
        document.getElementById('qrResponse').innerHTML = `Error: ${error.message}`;
    }
}

function getChineseTimestamp() {
    const options = {
        timeZone: 'Asia/Shanghai',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: false
    };
    return new Date().toLocaleString('zh-CN', options);
}

async function getToys() {
    const getToyRequest = document.getElementById('getToyRequest');
    const getToyResponse = document.getElementById('getToyResponse');
    const getToyRequestTime = document.getElementById('getToyRequestTime');
    const getToyResponseTime = document.getElementById('getToyResponseTime');

    try {
        const apiUrl = getCurrentApiUrl();
        document.getElementById('getToyRequestUrl').innerHTML = `URL: ${apiUrl}`;
        
        const requestData = {
            command: "GetToys"
        };
        
        // Update request timestamp and display
        getToyRequestTime.innerHTML = `Timestamp: ${getChineseTimestamp()}`;
        getToyRequest.innerHTML = JSON.stringify(requestData, null, 2);

        const response = await axios.post(apiUrl, requestData, { 
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        // Update response timestamp and display
        getToyRequestTime.innerHTML = `Timestamp: ${getChineseTimestamp()}`;
        getToyResponse.innerHTML = JSON.stringify(response.data, null, 2);
        getToyResponse.style.color = '#28a745';
    } catch (error) {
        // Update response timestamp and error display
        getToyRequestTime.innerHTML = `Timestamp: ${getChineseTimestamp()}`;
        getToyResponse.innerHTML = `Error: ${error.message}`;
        getToyResponse.style.color = '#dc3545';
    }
}

async function getToyNames() {
    const getToyRequest = document.getElementById('getToyRequest');
    const getToyResponse = document.getElementById('getToyResponse');
    const getToyRequestTime = document.getElementById('getToyRequestTime');
    const getToyResponseTime = document.getElementById('getToyResponseTime');

    try {
        const apiUrl = getCurrentApiUrl();
        
        const requestData = {
            command: "GetToyName"
        };
        
        // Update request timestamp and display
        getToyRequestTime.innerHTML = `Timestamp: ${getChineseTimestamp()}`;
        getToyRequest.innerHTML = JSON.stringify(requestData, null, 2);
        
        const response = await axios.post(apiUrl, requestData, {
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        // Update response timestamp and display
        getToyRequestTime.innerHTML = `Timestamp: ${getChineseTimestamp()}`;
        getToyResponse.innerHTML = JSON.stringify(response.data, null, 2);
        getToyResponse.style.color = '#28a745';
    } catch (error) {
        // Update response timestamp and error display
        getToyRequestTime.innerHTML = `Timestamp: ${getChineseTimestamp()}`;
        getToyResponse.innerHTML = `Error: ${error.message}`;
        getToyResponse.style.color = '#dc3545';

        {{!-- if (error.code === 'ERR_NETWORK') {
            errorMessage += 'Network Error: Unable to connect to the toy. Please ensure:\n';
            errorMessage += '1. The toy is connected and within range\n';
            errorMessage += '2. The correct IP and port are being used\n';
            errorMessage += '3. Your browser allows mixed content if using HTTPS\n';
            errorMessage += '4. You are on the same network as the toy\n';
            errorMessage += '\nTechnical details: ' + error.message;
        } else {
            errorMessage += error.message;
        }
        console.error('Detailed error:', error); --}}
    }
}

function initCallbackListener() {
    const baseUrl = window.location.origin;
    const callbackUrl = `${baseUrl}/api/v2/lovense/callback/latest`;
    
    const callbackUrlText = document.getElementById('callbackUrl');
    if (callbackUrlText) {
        callbackUrlText.textContent = callbackUrl;
    }

    // Add initial status message
    const callbackData = document.getElementById('callbackData');
    callbackData.innerHTML = `
        <div class="timestamp">Status: Waiting for connection...</div>
        <div class="hint">After scanning QR code, connection data will appear here.</div>
    `;

    // Set up polling interval
    const pollInterval = setInterval(async () => {
        try {
            console.log('Polling for callback data...'); // Debug log
            const response = await axios.get(`${API_BASE}/lovense/callback/latest`);
            
            if (response.data) {
                console.log('Received callback data:', response.data); // Debug log
                const timestamp = getChineseTimestamp();
                const formattedData = JSON.stringify(response.data, null, 2);
                
                callbackData.innerHTML = `
                    <div class="timestamp">Last Updated: ${timestamp}</div>
                    <div class="connection-status">Status: Connected</div>
                    <pre>${formattedData}</pre>
                `;
            } else {
                console.log('No callback data received'); // Debug log
                callbackData.innerHTML = `
                    <div class="timestamp">Last Updated: ${getChineseTimestamp()}</div>
                    <div class="connection-status">Status: Waiting for connection...</div>
                    <div class="hint">Make sure QR code is properly scanned in Lovense Remote app</div>
                `;
            }
        } catch (error) {
            console.error('Callback polling error:', error); // Debug log
            const timestamp = getChineseTimestamp();
            callbackData.innerHTML = `
                <div class="timestamp">Last Updated: ${timestamp}</div>
                <div class="connection-status error">Error: ${error.message}</div>
                <div class="hint">Check server connectivity and try scanning QR code again</div>
            `;
        }
    }, 15000); // Poll every 10 seconds

    // Clean up interval on page unload
    window.addEventListener('unload', () => {
        clearInterval(pollInterval);
    });
}

function selectMethod(method) {
    // Reset button styles
    document.querySelectorAll('.btn-method').forEach(btn => {
        btn.classList.remove('btn-primary');
        btn.classList.add('btn-secondary');
    });

    // Show/hide appropriate sections
    if (method === 'game') {
        document.getElementById('qrSection').style.display = 'none';
        document.getElementById('gameSection').style.display = 'block';
        document.getElementById('gameMethod').classList.add('btn-primary');
        document.getElementById('gameMethod').classList.remove('btn-secondary');
    } else {
        document.getElementById('qrSection').style.display = 'block';
        document.getElementById('gameSection').style.display = 'none';
        document.getElementById('qrMethod').classList.add('btn-primary');
        document.getElementById('qrMethod').classList.remove('btn-secondary');
    }
}

async function connectGameMode() {
    const gameModeRequest = document.getElementById('gameModeRequest');
    const gameModeResponse = document.getElementById('gameModeResponse');
    
    try {
        const apiUrl = getApiUrl();
        const requestData = {
            command: "GetToys"
        };

        // Display request details
        const requestTimestamp = getChineseTimestamp();
        const requestDisplay = `Request (${requestTimestamp})\nURL: ${apiUrl}\n\n${JSON.stringify(requestData, null, 2)}`;
        gameModeRequest.innerHTML = requestDisplay;

        const response = await axios.post(apiUrl, requestData, {
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        // Display response details
        const responseTimestamp = getChineseTimestamp();
        const responseDisplay = `Response (${responseTimestamp})\n\n${JSON.stringify(response.data, null, 2)}`;
        gameModeResponse.innerHTML = responseDisplay;
        gameModeResponse.style.color = '#28a745';
    } catch (error) {
        // Display error details
        const errorTimestamp = getChineseTimestamp();
        const errorDisplay = `Error (${errorTimestamp})\n\n${error.message}`;
        gameModeResponse.innerHTML = errorDisplay;
        gameModeResponse.style.color = '#dc3545';
    }
}

// Initialize with Game Mode selected
document.addEventListener('DOMContentLoaded', () => {
    selectMethod('game');
    initCallbackListener();
});


document.addEventListener('DOMContentLoaded', function() {
    // Get all sliders
    const sliders = document.querySelectorAll('.strength-slider');
    const numberInputs = document.querySelectorAll('.strength-number');

    // Add listeners for sliders
    sliders.forEach(slider => {
        slider.addEventListener('input', function() {
            const numberInput = this.nextElementSibling;
            numberInput.value = this.value;
        });
    });

    // Add listeners for number inputs
    numberInputs.forEach(input => {
        input.addEventListener('input', function() {
            const slider = this.previousElementSibling;
            const value = parseInt(this.value);
            const max = parseInt(this.max);
            
            if (!isNaN(value) && value >= 0 && value <= max) {
                slider.value = value;
            }
        });
    });

    // Add port input validation
    const portInput = document.getElementById('port');
    portInput.addEventListener('input', function() {
        const value = this.value;
        const httpsCheckbox = document.getElementById('useHttps');
        
        // If port is 20010, force HTTP
        if (value === '20010') {
            httpsCheckbox.checked = false;
        }
        // If port is 30010, force HTTPS
        else if (value === '30010') {
            httpsCheckbox.checked = true;
        }
    });
});

async function testFunction() {
    const commandRequest = document.getElementById('commandRequest');
    const commandResponse = document.getElementById('commandResponse');
    const commandRequestTime = document.getElementById('commandRequestTime');
    const commandResponseTime = document.getElementById('commandResponseTime');
    const toyId = document.getElementById('toyId').value;
    const totalTime = document.getElementById('totalTime').value || 5;  // Default to 5 if blank
    const runningTime = document.getElementById('runningTime').value || 5;  // Default to 5 if blank
    const pauseTime = document.getElementById('pauseTime').value || 0;  // Default to 0 if blank
    
    try {
        const apiUrl = getCurrentApiUrl();
        document.getElementById('commandRequestUrl').innerHTML = `URL: ${apiUrl}`;

        // Collect all non-zero actions
        const actions = [];
        const actionTypes = ['vibrate', 'rotate', 'pump', 'thrusting', 'fingering', 'suction', 'depth', 'stroke', 'all', 'oscillate'];
        
        actionTypes.forEach(type => {
            const value = document.getElementById(type).value;
            if (value > 0) {
                // Special handling for Oscillate command
                const actionName = type === 'oscillate' ? 'Oscillate' : type.charAt(0).toUpperCase() + type.slice(1);
                actions.push(`${actionName}:${value}`);
            }
        });

        if (actions.length === 0) {
            throw new Error('Please set at least one action value above 0');
        }

        const requestData = {
            command: "Function",
            action: actions.join(','),
            timeSec: parseInt(totalTime),
            loopRunningSec: parseInt(runningTime),
            loopPauseSec: parseInt(pauseTime),
            toy: toyId,
            apiVer: 1
        };
        
        // Update request timestamp and display
        commandRequestTime.innerHTML = `Timestamp: ${getChineseTimestamp()}`;
        commandRequest.innerHTML = JSON.stringify(requestData, null, 2);

        const response = await axios.post(apiUrl, requestData, {
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        // Update response timestamp and display
        commandResponseTime.innerHTML = `Timestamp: ${getChineseTimestamp()}`;
        commandResponse.innerHTML = JSON.stringify(response.data, null, 2);
        commandResponse.style.color = '#28a745';
    } catch (error) {
        // Update response timestamp and error display
        commandResponseTime.innerHTML = `Timestamp: ${getChineseTimestamp()}`;
        commandResponse.innerHTML = `Error: ${error.message}`;
        commandResponse.style.color = '#dc3545';
    }
}

async function testPosition() {
    const positionRequest = document.getElementById('positionRequest');
    const positionResponse = document.getElementById('positionResponse');
    const positionRequestTime = document.getElementById('positionRequestTime');
    const positionResponseTime = document.getElementById('positionResponseTime');
    const position = document.getElementById('position').value;
    
    try {
        const apiUrl = getCurrentApiUrl();
        document.getElementById('positionRequestUrl').innerHTML = `URL: ${apiUrl}`;

        const requestData = {
            command: "Position",
            value: position,
            apiVer: 1
        };
        
        // Update request timestamp and display
        positionRequestTime.innerHTML = `Timestamp: ${getChineseTimestamp()}`;
        positionRequest.innerHTML = JSON.stringify(requestData, null, 2);

        const response = await axios.post(apiUrl, requestData, {
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        // Update response timestamp and display
        positionRequestTime.innerHTML = `Timestamp: ${getChineseTimestamp()}`;
        positionResponse.innerHTML = JSON.stringify(response.data, null, 2);
        positionResponse.style.color = '#28a745';
    } catch (error) {
        // Update response timestamp and error display
        positionRequestTime.innerHTML = `Timestamp: ${getChineseTimestamp()}`;
        positionResponse.innerHTML = `Error: ${error.message}`;
        positionResponse.style.color = '#dc3545';
    }
}

function togglePatternInput(method) {
    // Update button styles
    document.querySelectorAll('.input-method-toggle .btn-method').forEach(btn => {
        btn.classList.remove('btn-primary');
        btn.classList.add('btn-secondary');
    });
    
    const selectedBtn = document.getElementById(`${method}Method`);
    selectedBtn.classList.add('btn-primary');
    selectedBtn.classList.remove('btn-secondary');

    // Show/hide appropriate sections
    document.getElementById('formInputSection').style.display = method === 'form' ? 'flex' : 'none';
    document.getElementById('jsonInputSection').style.display = method === 'json' ? 'flex' : 'none';
}

async function testPattern() {
    const patternRequest = document.getElementById('patternRequest');
    const patternResponse = document.getElementById('patternResponse');
    const patternRequestTime = document.getElementById('patternRequestTime');
    const patternResponseTime = document.getElementById('patternResponseTime');
    
    try {
        let requestData;
        const isJsonMode = document.getElementById('jsonInputSection').style.display !== 'none';
        
        if (isJsonMode) {
            // Parse JSON input
            const jsonInput = document.getElementById('patternJson').value;
            try {
                requestData = JSON.parse(jsonInput);
            } catch (e) {
                throw new Error('Invalid JSON format: ' + e.message);
            }
        } else {
            // Get form input values
            const toyId = document.getElementById('patternToyId').value;
            const selectedFeatures = Array.from(document.querySelectorAll('.feature-checkboxes input:checked'))
                .map(cb => cb.value)
                .join(',');
            const interval = document.getElementById('patternInterval').value;
            const strength = document.getElementById('patternStrength').value;
            const timeSec = document.getElementById('patternTime').value;

            // Validate inputs
            if (!toyId) throw new Error('Please enter a Toy ID');
            if (!selectedFeatures) throw new Error('Please select at least one feature');
            if (interval < 100) throw new Error('Interval must be at least 100ms');
            if (!strength.match(/^\d+(?:;\d+)*$/)) {
                throw new Error('Pattern strength must be semicolon-separated numbers');
            }

            // Build request data
            requestData = {
                command: "Pattern",
                rule: `V:1;F:${selectedFeatures};S:${interval}#`,
                strength: strength,
                timeSec: parseInt(timeSec),
                toy: toyId,
                apiVer: 2
            };
        }

        const apiUrl = getCurrentApiUrl();
        document.getElementById('patternRequestUrl').innerHTML = `URL: ${apiUrl}`;
        
        // Update request timestamp and display
        patternRequestTime.innerHTML = `Timestamp: ${getChineseTimestamp()}`;
        patternRequest.innerHTML = JSON.stringify(requestData, null, 2);

        const response = await axios.post(apiUrl, requestData, {
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        // Update response timestamp and display
        patternResponseTime.innerHTML = `Timestamp: ${getChineseTimestamp()}`;
        patternResponse.innerHTML = JSON.stringify(response.data, null, 2);
        patternResponse.style.color = '#28a745';
    } catch (error) {
        // Update response timestamp and error display
        patternResponseTime.innerHTML = `Timestamp: ${getChineseTimestamp()}`;
        patternResponse.innerHTML = `Error: ${error.message}`;
        patternResponse.style.color = '#dc3545';
    }
}

function toggleAllFeatures() {
    const checkboxes = document.querySelectorAll('.feature-checkboxes input[type="checkbox"]');
    const button = document.getElementById('toggleFeaturesBtn');
    const isAnyUnchecked = Array.from(checkboxes).some(cb => !cb.checked);
    
    checkboxes.forEach(cb => {
        cb.checked = isAnyUnchecked;
    });
    
    button.textContent = isAnyUnchecked ? 'Uncheck All' : 'Check All';
}

// game mode uses LAN, http 20010 https 30011, request url: http(s)://ip:port/command
function getApiUrl() {
    const localIp = document.getElementById('localIp').value;
    const port = document.getElementById('port').value;
    const useHttps = document.getElementById('useHttps').checked;
    
    if (!localIp || !port) {
        throw new Error('Please enter both IP and Port');
    }

    // Determine protocol and domain based on port and checkbox
    let protocol, domain;
    
    if (port === '20010') {
        protocol = 'http';
        domain = localIp;
    } else if (port === '30010') {
        protocol = 'https';
        domain = `${localIp.replace(/\./g, '-')}.lovense.club`;
    } else {
        protocol = useHttps ? 'https' : 'http';
        domain = protocol === 'https' ? 
            `${localIp.replace(/\./g, '-')}.lovense.club` : 
            localIp;
    }

    return `${protocol}://${domain}:${port}/command`;
}

// Add this helper function to determine the API URL consistently
function getCurrentApiUrl() {
    const isGameMode = document.getElementById('gameSection').style.display !== 'none';
    
    if (isGameMode) {
        return getApiUrl();
    } else {
        // For QR code mode, get URL from callback
        const callbackDataElement = document.getElementById('callbackData');
        const callbackText = callbackDataElement.textContent;
        
        if (callbackText === 'Waiting for data...') {
            throw new Error('No connection data available. Please scan QR code and wait for connection.');
        }

        try {
            const jsonStart = callbackText.indexOf('{');
            if (jsonStart === -1) {
                throw new Error('No valid connection data found. Please scan QR code again.');
            }
            
            const jsonStr = callbackText.substring(jsonStart);
            const data = JSON.parse(jsonStr);
            return `https://${data.domain}:${data.httpsPort}/command`;
        } catch (error) {
            if (error.message.includes('Invalid connection data')) {
                throw error;
            }
            throw new Error('Failed to parse connection data. Please scan QR code again.');
        }
    }
}

async function testPatternV2(type) {
    const patternv2Request = document.getElementById('patternv2Request');
    const patternv2Response = document.getElementById('patternv2Response');
    const patternv2RequestTime = document.getElementById('patternv2RequestTime');
    const patternv2ResponseTime = document.getElementById('patternv2ResponseTime');
    const toyId = document.getElementById('patternv2ToyId').value;

    try {
        let requestData = {
            command: "PatternV2",
            type: type,
            apiVer: 1
        };

        if (toyId) {
            requestData.toy = toyId;
        }

        // Add type-specific properties
        switch(type) {
            case 'Setup':
                const jsonInput = document.getElementById('setupJsonInput').value.trim();
                if (jsonInput) {
                    // Parse actions array from JSON input
                    const actions = JSON.parse(jsonInput);
                    requestData.actions = actions;
                } else {
                    // Get actions from form inputs
                    const actionRows = document.querySelectorAll('.action-row');
                    requestData.actions = Array.from(actionRows).map(row => ({
                        ts: parseInt(row.querySelector('.ts-input').value),
                        pos: parseInt(row.querySelector('.pos-input').value)
                    }));
                }
                break;

            case 'Play':
                requestData.startTime = parseInt(document.getElementById('playStartTime')?.value || 0);
                requestData.offsetTime = parseInt(document.getElementById('playOffsetTime')?.value || 0);
                requestData.timeMs = parseInt(document.getElementById('playTimeMS')?.value || 10000);
                break;

            case 'Stop':
                // No additional properties needed
                break;

            case 'SyncTime':
                const t1 = Date.now();
                document.getElementById('syncT1').textContent = new Date(t1).toISOString();
                
                // Get the current API URL
                const apiUrl = getCurrentApiUrl();
                
                // Send request and get response
                const response = await axios.post(apiUrl, requestData);
                
                const t2 = Date.now();
                document.getElementById('syncT2').textContent = new Date(t2).toISOString();
                
                const offset = t2 - t1;
                document.getElementById('syncOffset').textContent = `${offset}ms`;
                
                // Update display
                updateRequestResponse(requestData, response.data);
                return; // Exit early as we've handled the response
        }

        // Get the current API URL
        const apiUrl = getCurrentApiUrl();
        document.getElementById('patternv2RequestUrl').innerHTML = `URL: ${apiUrl}`;

        // Update request display
        patternv2RequestTime.innerHTML = `Timestamp: ${getChineseTimestamp()}`;
        patternv2Request.innerHTML = JSON.stringify(requestData, null, 2);

        const response = await axios.post(apiUrl, requestData, {
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        // Update response display
        patternv2ResponseTime.innerHTML = `Timestamp: ${getChineseTimestamp()}`;
        patternv2Response.innerHTML = JSON.stringify(response.data, null, 2);
        patternv2Response.style.color = '#28a745';
    } catch (error) {
        patternv2ResponseTime.innerHTML = `Timestamp: ${getChineseTimestamp()}`;
        patternv2Response.innerHTML = `Error: ${error.message}`;
        patternv2Response.style.color = '#dc3545';
    }
}

function updateRequestResponse(request, response) {
    const patternv2Request = document.getElementById('patternv2Request');
    const patternv2Response = document.getElementById('patternv2Response');
    const patternv2RequestTime = document.getElementById('patternv2RequestTime');
    const patternv2ResponseTime = document.getElementById('patternv2ResponseTime');

    patternv2RequestTime.innerHTML = `Timestamp: ${getChineseTimestamp()}`;
    patternv2Request.innerHTML = JSON.stringify(request, null, 2);
    
    patternv2ResponseTime.innerHTML = `Timestamp: ${getChineseTimestamp()}`;
    patternv2Response.innerHTML = JSON.stringify(response, null, 2);
    patternv2Response.style.color = '#28a745';
}

function addPatternAction() {
    const actionsContainer = document.getElementById('patternActions');
    const newRow = document.createElement('div');
    newRow.className = 'action-row';
    newRow.innerHTML = `
        <div class="input-group">
            <label>Timestamp (ms):</label>
            <input type="number" class="form-control ts-input" min="0" max="7200000" value="0">
        </div>
        <div class="input-group">
            <label>Position (0-100):</label>
            <input type="number" class="form-control pos-input" min="0" max="100" value="10">
        </div>
        <button onclick="removePatternAction(this)" class="btn btn-danger remove-action">×</button>
    `;
    actionsContainer.appendChild(newRow);
}

function removePatternAction(button) {
    button.closest('.action-row').remove();
}

function clearPatternActions() {
    const actionsContainer = document.getElementById('patternActions');
    actionsContainer.innerHTML = '';
    addPatternAction(); // Add one empty row
}

function switchPatternV2Tab(tabName) {
    // Remove active class from all tabs and content
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
    });
    
    // Add active class to selected tab and content
    document.querySelector(`.tab-btn[onclick*="${tabName}"]`).classList.add('active');
    document.getElementById(`${tabName}-tab`).classList.add('active');
}

// Initialize first tab on page load
document.addEventListener('DOMContentLoaded', () => {
    switchPatternV2Tab('setup');
});

async function stopFunction() {
    const commandRequest = document.getElementById('commandRequest');
    const commandResponse = document.getElementById('commandResponse');
    const commandRequestTime = document.getElementById('commandRequestTime');
    const commandResponseTime = document.getElementById('commandResponseTime');
    const toyId = document.getElementById('toyId').value;
    
    try {
        const apiUrl = getCurrentApiUrl();
        document.getElementById('commandRequestUrl').innerHTML = `URL: ${apiUrl}`;

        const requestData = {
            command: "Function",
            action: "Stop",
            timeSec: 0,
            apiVer: 1
        };

        if (toyId) {
            requestData.toy = toyId;
        }
        
        // Update request timestamp and display
        commandRequestTime.innerHTML = `Timestamp: ${getChineseTimestamp()}`;
        commandRequest.innerHTML = JSON.stringify(requestData, null, 2);

        const response = await axios.post(apiUrl, requestData, {
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        // Update response timestamp and display
        commandResponseTime.innerHTML = `Timestamp: ${getChineseTimestamp()}`;
        commandResponse.innerHTML = JSON.stringify(response.data, null, 2);
        commandResponse.style.color = '#28a745';
    } catch (error) {
        // Update response timestamp and error display
        commandResponseTime.innerHTML = `Timestamp: ${getChineseTimestamp()}`;
        commandResponse.innerHTML = `Error: ${error.message}`;
        commandResponse.style.color = '#dc3545';
    }
}

</script>

<style>
.api-documentation {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
}

h1 {
  color: #2c3e50;
  margin-bottom: 2rem;
  padding-bottom: 1rem;
  border-bottom: 2px solid #eee;
}

.test-section {
  background: #fff;
  border-radius: 8px;
  padding: 1.5rem;
  margin-bottom: 2rem;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

h3 {
  color: #34495e;
  margin-bottom: 1rem;
  font-size: 1.2rem;
}

.form-control {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  margin-bottom: 1rem;
  font-size: 1rem;
}

.btn {
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.9rem;
  font-weight: 500;
  transition: all 0.2s;
  margin-right: 0.5rem;
  margin-bottom: 0.5rem;
}

.btn-primary {
  background: #3498db;
  color: white;
}

.btn-primary:hover {
  background: #2980b9;
}

.btn-secondary {
  background: #95a5a6;
  color: white;
}

.btn-danger {
  background: #e74c3c;
  color: white;
}

.data-box {
  background: #f8f9fa;
  border: 1px solid #eee;
  border-radius: 4px;
  padding: 1rem;
  margin-top: 1rem;
  font-family: monospace;
  white-space: pre-wrap;
}

.qr-container {
  display: flex;
  justify-content: center;
  padding: 1rem;
  background: #fff;
  border-radius: 4px;
}

.connection-methods {
    display: flex;
    gap: 1rem;
    margin-bottom: 1.5rem;
}

.btn-method {
    padding: 0.75rem 1.5rem;
    font-size: 0.9rem;
    background: #3498db;
    color: white;
}

.btn-method:hover {
    background: #2980b9;
}

.game-mode-inputs {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.input-port-group {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
}

.input-port-group .form-control {
    flex: 1;
    margin: 0;
}

.function-test-container {
    padding: 20px;
}

.button-container {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-bottom: 20px;
}

.toy-id-group {
    display: flex;
    align-items: center;
    gap: 10px;
    flex: 1;
}

.toy-id-group label {
    min-width: 60px;
    font-size: 0.9em;
    color: #666;
    font-weight: 500;
}

.toy-id-group .form-control {
    max-width: 200px;
}

.game-setup p {
    margin: 0.5rem 0;
    color: #666;
}

@media (prefers-color-scheme: dark) {
    .game-setup p {
        color: #aaa;
    }
}

/* Update action group styles for inline layout */
.action-group {
    display: flex;
    align-items: center;
    padding: 8px 12px;
    background: #f8f9fa;
    border-radius: 4px;
    margin-bottom: 8px;
}

.action-group label {
    min-width: 140px;
    font-size: 0.9em;
    margin-right: 10px;
    color: #666;
}

.strength-control {
    display: flex;
    align-items: center;
    flex: 1;
    gap: 10px;
}

.strength-slider {
    flex: 1;
    margin: 0;
}

.strength-number {
    width: 60px !important;
    padding: 4px 8px !important;
    margin: 0 !important;
}

/* Update time inputs for inline layout */
.time-inputs {
    display: flex;
    align-items: center;
    gap: 20px;
    background: #f8f9fa;
    padding: 12px;
    border-radius: 4px;
    margin: 15px 0;
}

.time-inputs .input-group {
    display: flex;
    align-items: center;
    flex: 1;
    gap: 10px;
    margin: 0;
}

.time-inputs .input-group label {
    min-width: 100px;
    white-space: nowrap;
    margin: 0;
}

.time-inputs .form-control {
    margin: 0;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
    .action-group {
        background: #2d2d2d;
    }
    
    .action-group label {
        color: #aaa;
    }
    
    .time-inputs {
        background: #2d2d2d;
    }
}

.token-input-group {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 1rem;
}

.token-input-group .form-control {
    margin-bottom: 0;
}

.token-input-group .btn {
    margin: 0;
    white-space: nowrap;
}

.request-json {
    margin: 1rem 0;
}

.request-json p {
    margin-bottom: 0.5rem;
    color: #666;
    font-weight: 500;
}

@media (prefers-color-scheme: dark) {
    .request-json p {
        color: #aaa;
    }
}

/* Reduce spacing between elements */
.qr-container.compact {
    padding: 0.5rem;
    margin: 0.5rem 0;
}

.info-text {
    margin: 0.25rem 0;
    color: #666;
}

.game-mode-inputs {
    margin: 0.5rem 0;
}

.request-json.compact {
    margin: 0.5rem 0;
}

.request-json.compact p {
    margin-bottom: 0.25rem;
}

.data-box {
    margin-top: 0.5rem;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
    .info-text {
        color: #aaa;
    }
}

/* API Reference styling */
.api-reference {
    background: #f8f9fa;
    border-left: 4px solid #3498db;
    padding: 1rem;
    margin-bottom: 2rem;
    border-radius: 0 4px 4px 0;
}

.api-reference p {
    margin: 0;
    font-size: 0.95rem;
    color: #2c3e50;
}

.api-reference a {
    color: #3498db;
    text-decoration: none;
    font-weight: 500;
}

.api-reference a:hover {
    text-decoration: underline;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
    .api-reference {
        background: #2d2d2d;
        border-left-color: #3498db;
    }

    .api-reference p {
        color: #fff;
    }

    .api-reference a {
        color: #5dade2;
    }
}

.request-url {
    font-family: monospace;
    color: #0066cc;
    margin-bottom: 8px;
    padding: 4px 0;
    font-size: 0.9em;
}

.timestamp {
    font-family: monospace;
    color: #666;
    font-size: 0.85em;
    margin-bottom: 8px;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
    .timestamp {
        color: #aaa;
    }
}

.connection-container {
    margin-top: 1rem;
}

.connection-methods {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
}

.btn-sm {
    padding: 0.4rem 1rem;
    font-size: 0.9rem;
}

.btn-method {
    width: auto;
    min-width: 120px;
}

.connection-section {
    border-top: 1px solid #eee;
    padding-top: 1rem;
    margin-top: 0.5rem;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
    .connection-section {
        border-top-color: #404040;
    }
}

.pattern-test-container {
    padding: 20px;
}

.pattern-inputs {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-bottom: 20px;
}

.feature-group {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.feature-checkboxes {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
}

.feature-checkboxes label {
    display: flex;
    align-items: center;
    gap: 5px;
    cursor: pointer;
}

.feature-checkboxes input[type="checkbox"] {
    margin: 0;
}

.pattern-group, .interval-group, .time-group {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
    .feature-checkboxes label {
        color: #fff;
    }
}

.input-method-toggle {
    margin-bottom: 1rem;
    display: flex;
    gap: 0.5rem;
}

.json-input-group {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.json-textarea {
    font-family: monospace;
    min-height: 200px;
    white-space: pre;
    resize: vertical;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
    .json-textarea {
        background: #1a1a1a;
        color: #fff;
        border-color: #404040;
    }
}

.pattern-header {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    margin-bottom: 1rem;
    gap: 1rem;
}

.pattern-header .toy-id-group {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.pattern-header .toy-id-group label {
    white-space: nowrap;
    min-width: 60px;
}

.pattern-header .toy-id-group .form-control {
    max-width: 200px;
    margin: 0;
}

.pattern-header .toy-id-group .btn {
    margin: 0;
    white-space: nowrap;
}

.input-method-toggle {
    margin-bottom: 1rem;
    display: flex;
    gap: 0.5rem;
    justify-content: center;
}

.feature-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
}

.feature-header .btn-sm {
    padding: 0.25rem 0.75rem;
    font-size: 0.8rem;
}

.https-checkbox {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    white-space: nowrap;
    color: #666;
    cursor: pointer;
}

.https-checkbox input[type="checkbox"] {
    margin: 0;
    cursor: pointer;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
    .https-checkbox {
        color: #aaa;
    }
}

.game-mode-controls {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.game-mode-controls label {
    min-width: 60px;
    font-size: 0.9em;
    color: #666;
    font-weight: 500;
}

.userid-controls .form-control {
    max-width: 400px;
    margin: 0;
}

.game-mode-controls .form-control {
    max-width: 300px;
    margin: 0;
}

.game-mode-controls .btn {
    margin: 0;
    white-space: nowrap;
}

/* PatternV2 Styles */
.patternv2-container {
    padding: 20px;
}

.patternv2-tabs {
    display: flex;
    gap: 8px;
    margin-bottom: 20px;
    border-bottom: 1px solid #ddd;
    padding-bottom: 8px;
}

.tab-btn {
    padding: 8px 16px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background: #f8f9fa;
    cursor: pointer;
    transition: all 0.2s;
}

.tab-btn.active {
    background: #3498db;
    color: white;
    border-color: #3498db;
}

.tab-content {
    display: none;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 4px;
    margin-bottom: 20px;
}

.tab-content.active {
    display: block;
}

.action-row {
    display: flex;
    align-items: center;
    gap: 10px;
    background: white;
    padding: 10px;
    border-radius: 4px;
    border: 1px solid #dee2e6;
}

.action-row .input-group {
    display: flex;
    align-items: center;
    gap: 10px;
    flex: 1;
}

.action-row .input-group label {
    min-width: 120px;
    font-size: 0.9em;
    color: #666;
}

.action-row .form-control {
    width: 100px;
}

.action-buttons {
    margin-top: 12px;
}

.json-section {
    margin-top: 20px;
}

.json-textarea {
    width: 100%;
    min-height: 100px;
    font-family: monospace;
    padding: 8px;
    margin-bottom: 8px;
}

.hint {
    font-size: 0.9em;
    color: #666;
    margin-bottom: 12px;
}

.sync-info {
    margin-bottom: 20px;
}

.sync-results {
    background: #f8f9fa;
    padding: 12px;
    border-radius: 4px;
    margin-top: 12px;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
    .tab-btn {
        background: #2d2d2d;
        border-color: #404040;
        color: #fff;
    }
    
    .tab-btn.active {
        background: #3498db;
        border-color: #3498db;
    }
    
    .tab-content {
        border-color: #404040;
        background: #1a1a1a;
    }
    
    .hint {
        color: #aaa;
    }
    
    .sync-results {
        background: #2d2d2d;
    }
}

/* Add these styles to your existing CSS */
.qr-setup .api-test-results {
    margin-top: 20px;
    margin-bottom: 20px;
    border-top: 1px solid #eee;
    border-bottom: 1px solid #eee;
    padding: 20px 0;
}

.qr-setup .request-box,
.qr-setup .response-box {
    margin-bottom: 15px;
}

.qr-setup h4 {
    color: #666;
    margin-bottom: 10px;
    font-size: 1rem;
}

.qr-setup .data-box {
    background: #f8f9fa;
    border: 1px solid #eee;
    border-radius: 4px;
    padding: 10px;
    font-family: monospace;
    font-size: 0.9em;
    margin-top: 5px;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
    .qr-setup h4 {
        color: #aaa;
    }
    
    .qr-setup .data-box {
        background: #2d2d2d;
        border-color: #404040;
    }
    
    .qr-setup .api-test-results {
        border-color: #404040;
    }
}

</style> 