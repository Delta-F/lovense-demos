<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Toy Events API Demo</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
        }
        .section {
            margin-bottom: 30px;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        .code-block {
            background-color: #f5f5f5;
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
        }
        .input-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
        }
        input[type="text"], input[type="number"] {
            width: 200px;
            padding: 5px;
            margin-right: 10px;
        }
        button {
            padding: 8px 15px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        button:hover {
            background-color: #0056b3;
        }
        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        .status {
            margin-top: 10px;
            padding: 10px;
            border-radius: 4px;
        }
        .connected {
            background-color: #d4edda;
            color: #155724;
        }
        .disconnected {
            background-color: #f8d7da;
            color: #721c24;
        }
        .event-log {
            height: 200px;
            overflow-y: auto;
            background-color: #f8f9fa;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .api-reference {
            color: #666;
            font-size: 0.9em;
            margin-bottom: 20px;
            padding: 15px 20px;
            border-radius: 5px;
            background-color: #f8f9fa;
            border-left: 4px solid #007bff;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .api-reference .icon {
            color: #007bff;
            font-size: 1.2em;
        }
        .api-reference a {
            color: #007bff;
            text-decoration: none;
            font-weight: 500;
        }
        .api-reference a:hover {
            text-decoration: underline;
        }
        .guide-box {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 20px;
            border-left: 4px solid #007bff;
        }
        .guide-box h3 {
            margin-top: 0;
            color: #007bff;
        }
        .guide-steps {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }
        .guide-steps .step-number {
            background-color: #007bff;
            color: white;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 10px;
            flex-shrink: 0;
        }
        .guide-steps .step-text {
            flex-grow: 1;
        }
        .download-btn {
            display: inline-block;
            padding: 10px 20px;
            background-color: #28a745;
            color: white;
            text-decoration: none;
            border-radius: 4px;
            margin-left: 20px;
            transition: background-color 0.3s;
        }
        .download-btn:hover {
            background-color: #218838;
            color: white;
            text-decoration: none;
        }
        .toy-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        .toy-table th, .toy-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
        }
        .toy-table th {
            background-color: #f8f9fa;
        }
        .toy-table tr:nth-child(even) {
            background-color: #f8f9fa;
        }
    </style>
</head>
<body>
    <h1>Toy Events API Demo</h1>
    <div class="api-reference">
        <span class="icon">ℹ️</span>
        <span>This implementation is based on the </span>
        <a href="https://developer.lovense.com/docs/standard-solutions/toy-events-api.html" target="_blank">Official Lovense Toy Event API</a>
        <span>documentation</span>
    </div>
    
    <!-- Step 1: WebSocket Server Configuration -->
    <div class="section" id="step1">
        <h2>Step 1: Configure WebSocket Server</h2>
        <div class="guide-box">
            <h3>How to Enable Game Mode</h3>
            <div class="guide-steps">
                <div class="step-number">1</div>
                <div class="step-text">Open Lovense Remote App</div>
            </div>
            <div class="guide-steps">
                <div class="step-number">2</div>
                <div class="step-text">Click Menu "Discover"</div>
            </div>
            <div class="guide-steps">
                <div class="step-number">3</div>
                <div class="step-text">Click "Game Mode"</div>
            </div>
            <div class="guide-steps">
                <div class="step-number">4</div>
                <div class="step-text">Turn on the "Enable LAN" switch</div>
            </div>
            <div class="guide-steps">
                <div class="step-number">5</div>
                <div class="step-text">Note down the IP and Port shown in the settings</div>
            </div>
        </div>
        <div class="input-group">
            <label for="serverIp">Server IP:</label>
            <input type="text" id="serverIp" value="192.168.31.65">
        </div>
        <div class="input-group">
            <label for="serverPort">Server Port:</label>
            <input type="number" id="serverPort" value="20010" readonly>
        </div>
        <div class="input-group">
            <label>
                <input type="checkbox" id="useHttp" checked> Use HTTP (http port:20010, https port:30010)
            </label>
            <a href="#" id="downloadDemo" class="download-btn">Download Demo (Port 30010 not supported yet, please test locally)</a>
        </div>
        <div class="input-group">
            <label>WebSocket URL:</label>
            <div id="wsUrl" class="code-block">ws://192.168.31.65:20010/v1</div>
        </div>
    </div>

    <!-- Step 2: Connection -->
    <div class="section" id="step2">
        <h2>Step 2: Connect to WebSocket</h2>
        <button id="connectBtn">Connect</button>
        <button id="disconnectBtn" disabled>Disconnect</button>
        <div id="connectionStatus" class="status disconnected">Disconnected</div>
    </div>

    <!-- Step 3: Maintain Connection -->
    <div class="section" id="step3">
        <h2>Step 3: Maintain Connection</h2>
        <button id="startPingBtn">Start Auto Ping</button>
        <button id="stopPingBtn" disabled>Stop Auto Ping</button>
        <div id="pingStatus" class="status">Ping not started</div>
    </div>

    <!-- Step 4: Request Access -->
    <div class="section" id="step4">
        <h2>Step 4: Request Access</h2>
        <div class="input-group">
            <label for="appName">App Name:</label>
            <input type="text" id="appName" value="deltatest">
        </div>
        <button id="requestAccessBtn" disabled>Request Access</button>
        <div id="accessStatus" class="status">Not requested</div>
    </div>

    <!-- Step 5: Event Monitoring -->
    <div class="section" id="step5">
        <h2>Step 5: Event Monitoring</h2>
        <div class="event-log" id="eventLog"></div>
    </div>

    <!-- Add Toy Support Table -->
    <div class="section" id="toySupport">
        <h2>Supported Toy Features</h2>
        <table class="toy-table">
            <thead>
                <tr>
                    <th>Toy</th>
                    <th>Button</th>
                    <th>Function Strength Changed</th>
                    <th>Shake</th>
                    <th>Shake Frequency Changed</th>
                    <th>Battery Changed</th>
                    <th>Depth Changed</th>
                    <th>Motion Changed</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Nora</td>
                    <td>✅ index:0,1</td>
                    <td>✅ function: vibration,rotation</td>
                    <td>✅</td>
                    <td>✅</td>
                    <td>✅</td>
                    <td></td>
                    <td></td>
                </tr>
                <tr>
                    <td>Max 2</td>
                    <td>✅ index:0,1</td>
                    <td>✅ function: vibration,inflation</td>
                    <td>✅</td>
                    <td>✅</td>
                    <td>✅</td>
                    <td></td>
                    <td></td>
                </tr>
                <tr>
                    <td>Solace</td>
                    <td>✅ index:0,1,2,3</td>
                    <td></td>
                    <td>✅</td>
                    <td></td>
                    <td>✅</td>
                    <td>✅</td>
                    <td></td>
                </tr>
                <tr>
                    <td>Solace Pro</td>
                    <td>✅ index:0,1,2,3</td>
                    <td></td>
                    <td>✅</td>
                    <td></td>
                    <td>✅</td>
                    <td></td>
                    <td>✅</td>
                </tr>
                <tr>
                    <td>Mission2</td>
                    <td>✅ index:0,1</td>
                    <td></td>
                    <td>✅</td>
                    <td></td>
                    <td>✅</td>
                    <td></td>
                    <td>✅</td>
                </tr>
            </tbody>
        </table>
    </div>

    <script>
        let ws = null;
        let pingInterval = null;

        // Update WebSocket URL when inputs change
        function updateWsUrl() {
            const ip = document.getElementById('serverIp').value;
            const port = document.getElementById('useHttp').checked ? '20010' : '30010';
            const protocol = document.getElementById('useHttp').checked ? 'ws' : 'wss';
            const wsUrl = `${protocol}://${ip}:${port}/v1`;
            document.getElementById('wsUrl').textContent = wsUrl;
            document.getElementById('serverPort').value = port;
        }

        // Event listeners for URL updates
        document.getElementById('serverIp').addEventListener('input', updateWsUrl);
        document.getElementById('useHttp').addEventListener('change', updateWsUrl);

        // Download demo functionality
        document.getElementById('downloadDemo').addEventListener('click', function(e) {
            e.preventDefault();
            const htmlContent = document.documentElement.outerHTML;
            const blob = new Blob([htmlContent], { type: 'text/html' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'toy-events-api-demo.html';
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        });

        // Initial URL update
        updateWsUrl();

        // Connect to WebSocket
        document.getElementById('connectBtn').addEventListener('click', () => {
            const wsUrl = document.getElementById('wsUrl').textContent;
            try {
                ws = new WebSocket(wsUrl);

                ws.onopen = () => {
                    document.getElementById('connectionStatus').textContent = 'Connected';
                    document.getElementById('connectionStatus').className = 'status connected';
                    document.getElementById('connectBtn').disabled = true;
                    document.getElementById('disconnectBtn').disabled = false;
                    document.getElementById('requestAccessBtn').disabled = false;
                    logEvent('Connected to WebSocket server');
                };

                ws.onclose = (event) => {
                    document.getElementById('connectionStatus').textContent = `Disconnected (Code: ${event.code}, Reason: ${event.reason || 'No reason provided'})`;
                    document.getElementById('connectionStatus').className = 'status disconnected';
                    document.getElementById('connectBtn').disabled = false;
                    document.getElementById('disconnectBtn').disabled = true;
                    document.getElementById('requestAccessBtn').disabled = true;
                    document.getElementById('startPingBtn').disabled = true;
                    document.getElementById('stopPingBtn').disabled = true;
                    logEvent(`Disconnected from WebSocket server. Code: ${event.code}, Reason: ${event.reason || 'No reason provided'}`);
                    stopPing();
                };

                ws.onerror = (error) => {
                    logEvent('WebSocket error occurred. Please check:');
                    logEvent('1. If the server is running');
                    logEvent('2. If the IP address and port are correct');
                    logEvent('3. If you have proper network access');
                    logEvent('4. If the protocol (ws/wss) matches your server configuration');
                    document.getElementById('connectionStatus').textContent = 'Connection Error';
                    document.getElementById('connectionStatus').className = 'status disconnected';
                };

                ws.onmessage = (event) => {
                    try {
                        const { type, data } = JSON.parse(event.data);
                        logEvent(`Received: ${JSON.stringify({ type, data })}`);

                        switch (type) {
                            case 'access-granted':
                                document.getElementById('accessStatus').textContent = 'Access granted';
                                document.getElementById('startPingBtn').disabled = false;
                                break;
                            case 'pong':
                                document.getElementById('pingStatus').textContent = 'Last pong received: ' + new Date().toLocaleTimeString();
                                break;
                        }
                    } catch (e) {
                        logEvent('Error parsing message: ' + event.data);
                    }
                };
            } catch (error) {
                logEvent('Failed to create WebSocket connection: ' + error.message);
                document.getElementById('connectionStatus').textContent = 'Connection Failed';
                document.getElementById('connectionStatus').className = 'status disconnected';
            }
        });

        // Disconnect from WebSocket
        document.getElementById('disconnectBtn').addEventListener('click', () => {
            if (ws) {
                ws.close();
            }
        });

        // Request access
        document.getElementById('requestAccessBtn').addEventListener('click', () => {
            if (ws && ws.readyState === WebSocket.OPEN) {
                const message = {
                    type: 'access',
                    data: {
                        appName: document.getElementById('appName').value
                    }
                };
                ws.send(JSON.stringify(message));
                logEvent('Sent access request: ' + JSON.stringify(message));
            }
        });

        // Start auto ping
        function startPing() {
            if (pingInterval) return;
            pingInterval = setInterval(() => {
                if (ws && ws.readyState === WebSocket.OPEN) {
                    ws.send(JSON.stringify({ type: 'ping' }));
                    logEvent('Sent ping');
                }
            }, 3000);
            document.getElementById('startPingBtn').disabled = true;
            document.getElementById('stopPingBtn').disabled = false;
            document.getElementById('pingStatus').textContent = 'Auto ping started';
        }

        // Stop auto ping
        function stopPing() {
            if (pingInterval) {
                clearInterval(pingInterval);
                pingInterval = null;
            }
            document.getElementById('startPingBtn').disabled = false;
            document.getElementById('stopPingBtn').disabled = true;
            document.getElementById('pingStatus').textContent = 'Auto ping stopped';
        }

        document.getElementById('startPingBtn').addEventListener('click', startPing);
        document.getElementById('stopPingBtn').addEventListener('click', stopPing);

        // Log events
        function logEvent(message) {
            const eventLog = document.getElementById('eventLog');
            const timestamp = new Date().toLocaleTimeString();
            eventLog.innerHTML += `<div>[${timestamp}] ${message}</div>`;
            eventLog.scrollTop = eventLog.scrollHeight;
        }
    </script>
</body>
</html>
