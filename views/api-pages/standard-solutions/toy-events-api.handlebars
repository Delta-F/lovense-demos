<div class="api-documentation">
    <h1>Lovense Toy Events Monitor</h1>

    <div class="control-panel">
        <div class="connection-details">
            <div class="input-group">
                <label for="httpUrl">GameMode IP:</label>
                <input type="text" id="httpUrl" value="192.168.31.66" placeholder="Enter IP (e.g., 192.168.31.66)">
            </div>
            <div class="input-group">
                <label for="port">GameMode Port:</label>
                <input type="text" id="port" value="20010" placeholder="Enter port (e.g., 30010)">
            </div>
            <div class="button-group">
                <button id="connectBtn" class="btn primary">Connect</button>
                <button id="sendBtn" class="btn primary" disabled>Request Access</button>
                <button id="disconnectBtn" class="btn danger" disabled>Disconnect</button>
            </div>
        </div>

        <div class="data-panels">
            <div class="panel-section">
                <h2>Event Log</h2>
                <div class="log-container">
                    <textarea id="eventLog" class="toy-list"></textarea>
                </div>
            </div>
        </div>

        <div class="test-box-container">
            <h2>Test Box</h2>
            <div id="testBox" class="test-box"></div>
        </div>  

        <div class="game-container" id="gameContainer"></div>

    </div>
</div>

<style>
.api-documentation {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

h1, h2 {
    color: #2c3e50;
    margin-bottom: 1rem;
}

.control-panel {
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    padding: 2rem;
    margin-bottom: 2rem;
}

.connection-details {
    margin-bottom: 2rem;
}

.input-group {
    margin-bottom: 1rem;
}

.input-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: #666;
}

.input-group input {
    width: 100%;
    padding: 0.8rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
}

.button-group {
    display: flex;
    gap: 1rem;
    margin-bottom: 2rem;
}

.btn {
    padding: 0.8rem 1.5rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    transition: background-color 0.2s;
}

.btn.primary {
    background: #3498db;
    color: white;
}

.btn.primary:hover {
    background: #2980b9;
}

.btn.danger {
    background: #e74c3c;
    color: white;
}

.btn.danger:hover {
    background: #c0392b;
}

.data-panels {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    height: auto;
}

.panel-section {
    width: 100%;
}

.toy-list {
    height: 500px;
    overflow-y: auto;
    background: #f8f9fa;
    padding: 1rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-family: monospace;
    white-space: pre-wrap;
    word-wrap: break-word;
}

.log-container {
    height: 600px;
}

textarea#eventLog {
    width: 100%;
    height: 100%;
    font-family: monospace;
    font-size: 14px;
    line-height: 1.4;
    padding: 1rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    resize: none;
    white-space: pre-wrap;
    word-wrap: break-word;
}

.toy-item {
    background: white;
    padding: 1rem;
    margin-bottom: 1rem;
    border-radius: 4px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.toy-item h3 {
    margin: 0 0 0.5rem 0;
    color: #2c3e50;
}

.toy-status {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    border-radius: 3px;
    font-size: 0.875rem;
    margin-top: 0.5rem;
}

.status-connected {
    background: #27ae60;
    color: white;
}

.status-disconnected {
    background: #e74c3c;
    color: white;
}

.game-container {
    width: 100%;
    height: 400px;
    background: #0a0a2a;
    border-radius: 8px;
    position: relative;
    overflow: hidden;
    margin: 0 auto 2rem;
    max-width: 1200px;
}

.spaceship {
    position: absolute;
    width: 80px;
    height: 80px;
    transition: all 0.3s ease;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 10px;
    padding: 10px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    backdrop-filter: blur(5px);
}

.spaceship img {
    width: 100%;
    height: 100%;
    object-fit: contain;
}

.battery-indicator {
    position: absolute;
    top: -15px;
    left: 50%;
    transform: translateX(-50%);
    width: 40px;
    height: 5px;
    background: #333;
    border-radius: 3px;
}

.battery-level {
    height: 100%;
    background: #2ecc71;
    border-radius: 3px;
    transition: width 0.3s ease;
}

.status-indicator {
    position: absolute;
    top: -25px;
    left: 50%;
    transform: translateX(-50%);
    width: 10px;
    height: 10px;
    border-radius: 50%;
    transition: background-color 0.3s ease;
}

.status-connected {
    background: #2ecc71;
}

.status-disconnected {
    background: #e74c3c;
}

.vibration-effect {
    animation: vibrate 0.1s infinite;
}

@keyframes vibrate {
    0% { transform: translate(0); }
    25% { transform: translate(2px, 2px); }
    50% { transform: translate(-2px, -2px); }
    75% { transform: translate(-2px, 2px); }
    100% { transform: translate(2px, -2px); }
}

.toy-container {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 5px;
}

.toy-icon {
    font-size: 40px;
    text-align: center;
    z-index: 1;
}

.feature-indicators {
    display: flex;
    gap: 3px;
    font-size: 12px;
    background: rgba(0, 0, 0, 0.5);
    padding: 2px 4px;
    border-radius: 10px;
}

.feature-indicator {
    cursor: help;
    transition: transform 0.2s;
}

.feature-indicator:hover {
    transform: scale(1.2);
}

.button-container {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
}

.button-highlight {
    position: absolute;
    width: 20px;
    height: 20px;
    background: rgba(255, 255, 255, 0.8);
    border-radius: 50%;
    opacity: 0;
    transition: opacity 0.3s;
}

.button-0 { top: 0; left: 50%; transform: translateX(-50%); }
.button-1 { right: 0; top: 50%; transform: translateY(-50%); }
.button-2 { bottom: 0; left: 50%; transform: translateX(-50%); }
.button-3 { left: 0; top: 50%; transform: translateY(-50%); }

.button-active {
    opacity: 1;
}

.test-box-container {
    max-width: 1200px;
    margin: 0 auto 2rem;
    padding: 1rem;
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.test-box {
    height: 200px;
    padding: 1rem;
    background: #f8f9fa;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-family: monospace;
    font-size: 14px;
    overflow-y: auto;
    white-space: pre-wrap;
    word-wrap: break-word;
}
</style>

<script>
class LovenseClient {
    constructor() {
        this.ws = null;
        this.isConnected = false;
        this.pingInterval = null;
        this.toys = new Map();
        this.eventLog = document.getElementById('eventLog');
        this.toyList = document.getElementById('toyList');
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 3;
        this.reconnectTimeout = null;
        this.gameContainer = document.getElementById('gameContainer');
        this.spaceships = new Map();
        this.toyIcons = {
            nora: '🌸',
            max: '🚀',
            solace: '💫',
            'solace-pro': '⭐',
            mission2: '🎯',
            default: '🎮'
        };

        this.toyFeatures = {
            nora: {
                buttons: [0, 1],
                functions: ['vibration', 'rotation'],
                hasShake: true,
                hasShakeFreq: true,
                hasBattery: true
            },
            max: {
                buttons: [0, 1],
                functions: ['vibration', 'inflation'],
                hasShake: true,
                hasShakeFreq: true,
                hasBattery: true
            },
            solace: {
                buttons: [0, 1, 2, 3],
                functions: [],
                hasDepth: true,
                hasBattery: true
            },
            'solace-pro': {
                buttons: [0, 1, 2, 3],
                functions: [],
                hasBattery: true,
                hasMotion: true
            },
            mission2: {
                buttons: [0, 1],
                functions: [],
                hasBattery: true,
                hasMotion: true
            }
        };

        this.testBox = document.getElementById('testBox');
    }

    constructWsUrl(ip, port) {
        // Check if we're on a secure connection (https)
        const isSecure = window.location.protocol === 'https:';
        // Use wss:// for secure connections, ws:// for non-secure
        const protocol = isSecure ? 'wss://' : 'ws://';
        return `${protocol}${ip}:${port}/v1`;
    }

    connect(serverUrl) {
        try {
            if (this.ws) {
                this.ws.close();
                this.ws = null;
            }

            this.updateTestBox(`Connecting to ${serverUrl}...`);
            
            this.ws = new WebSocket(serverUrl);
            
            // Increased timeout to 10 seconds
            const connectTimeout = setTimeout(() => {
                if (this.ws && this.ws.readyState !== WebSocket.OPEN) {
                    const error = 'Connection timeout. Possible causes:\n' +
                        '1. Lovense Connect app is not running\n' +
                        '2. Game Mode is not enabled in Lovense Connect\n' +
                        '3. IP/Port are incorrect\n' +
                        '4. Firewall is blocking the connection';
                    this.logEvent('Error', error);
                    this.ws.close();
                    this.tryReconnect();
                }
            }, 10000);

            this.ws.addEventListener('open', () => {
                clearTimeout(connectTimeout);
                this.reconnectAttempts = 0;
                this.isConnected = true;
                this.updateConnectionStatus();
                this.logEvent('Connection', 'WebSocket connected successfully');
                this.requestAccess();
            });

            this.setupEventListeners();
        } catch (error) {
            this.logDetailedError('Connection failed', error);
        }
    }

    setupEventListeners() {
        this.ws.addEventListener('message', (event) => {
            try {
                const message = JSON.parse(event.data);
                if (!message.type.includes('pong')) {
                    this.logEvent('Received', message);
                }
                this.handleMessage(message);
            } catch (error) {
                this.logDetailedError('Message parsing failed', error);
            }
        });

        this.ws.addEventListener('close', (event) => {
            this.isConnected = false;
            this.updateConnectionStatus();
            this.stopPing();
            
            const reason = this.getCloseReason(event.code);
            this.logEvent('Connection', `WebSocket closed (${event.code}): ${reason}`);
            
            if (this.reconnectAttempts < this.maxReconnectAttempts) {
                this.tryReconnect();
            }
        });

        this.ws.addEventListener('error', (error) => {
            this.logDetailedError('WebSocket error', error);
        });
    }

    handleMessage(message) {
        const { type } = message;
        
        switch (type) {
            case 'access-granted':
                this.accessGranted = true;
                this.logEvent('Access', 'Access granted to Lovense device');
                this.startPing();
                break;

            case 'toy-list':
                if (message.toyList && Array.isArray(message.toyList)) {
                    this.updateToyList(message.toyList);
                    message.toyList.forEach(toy => {
                        this.updateTestBox(`Connected: ${toy.type} (${toy.id})`);
                    });
                }
                break;

            case 'toy-status':
                this.updateToyStatus(message.toyId, message.data.connected);
                this.updateTestBox(`Status changed: ${message.toyId} - ${message.data.connected ? 'Connected' : 'Disconnected'}`);
                break;

            case 'button-down':
                this.handleButtonPress(message.toyId, message.index, true);
                this.updateTestBox(`Button down: ${message.toyId} - Button ${message.index}`);
                break;

            case 'button-up':
                this.handleButtonPress(message.toyId, message.index, false);
                this.updateTestBox(`Button up: ${message.toyId} - Button ${message.index}`);
                break;

            case 'button-pressed':
                this.animateSpaceship(message.toyId, 'pulse-effect');
                this.updateTestBox(`Button pressed: ${message.toyId} - Button ${message.index}`);
                break;

            case 'depth-changed':
                this.handleDepthChange(message.toyId, message.value);
                this.updateTestBox(`Depth changed: ${message.toyId} - Value: ${message.value}`);
                break;

            case 'function-strength-changed':
                this.handleStrengthChange(message.toyId, message.data);
                this.updateTestBox(`Strength changed: ${message.toyId} - ${message.data.function}: ${message.data.value}`);
                break;

            case 'battery-changed':
                this.updateBattery(message.toyId, message.data.value);
                this.updateTestBox(`Battery changed: ${message.toyId} - ${message.data.value}%`);
                break;

            case 'motion-changed':
                this.handleMotion(message.toyId, message.data.motionData);
                this.updateTestBox(`Motion changed: ${message.toyId} - ${message.data.motionData.length} data points`);
                break;
        }
    }

    requestAccess() {
        const accessRequest = {
            type: 'access',
            data: {
                appName: 'deltatest'
            }
        };
        this.sendMessage(accessRequest);
        
        // Add timeout for access request
        setTimeout(() => {
            if (this.ws && this.ws.readyState === WebSocket.OPEN && !this.accessGranted) {
                this.logEvent('Error', 'Access request timeout - No response from Lovense Connect');
            }
        }, 5000);
    }

    updateToyList(toys) {
        if (!Array.isArray(toys)) {
            this.logEvent('Error', 'Received invalid toy list data');
            return;
        }

        // Clear existing spaceships
        this.gameContainer.innerHTML = '';
        this.spaceships.clear();

        // Create spaceships for each toy
        toys.forEach((toy, index) => {
            const spaceship = document.createElement('div');
            spaceship.className = 'spaceship';
            spaceship.id = `spaceship-${toy.id}`;
            
            // Position calculation
            const angle = (index / Math.max(1, toys.length)) * 2 * Math.PI;
            const radius = Math.min(this.gameContainer.clientWidth, this.gameContainer.clientHeight) * 0.3;
            const centerX = this.gameContainer.clientWidth / 2;
            const centerY = this.gameContainer.clientHeight / 2;
            const x = centerX + radius * Math.cos(angle) - 40;
            const y = centerY + radius * Math.sin(angle) - 40;
            
            spaceship.style.left = `${x}px`;
            spaceship.style.top = `${y}px`;

            // Create container for toy icon and features
            const container = document.createElement('div');
            container.className = 'toy-container';

            // Add toy icon
            const icon = document.createElement('div');
            icon.textContent = this.toyIcons[toy.type] || this.toyIcons.default;
            icon.className = 'toy-icon';
            container.appendChild(icon);

            // Add button indicators for Solace
            if (toy.type === 'solace' || toy.type === 'solace-pro') {
                const buttonContainer = document.createElement('div');
                buttonContainer.className = 'button-container';
                
                // Create indicators for all 4 buttons
                for (let i = 0; i < 4; i++) {
                    const buttonIndicator = document.createElement('div');
                    buttonIndicator.className = `button-highlight button-${i}`;
                    buttonContainer.appendChild(buttonIndicator);
                }
                
                container.appendChild(buttonContainer);
            }

            spaceship.appendChild(container);

            // Add battery indicator
            const batteryIndicator = document.createElement('div');
            batteryIndicator.className = 'battery-indicator';
            const batteryLevel = document.createElement('div');
            batteryLevel.className = 'battery-level';
            batteryLevel.style.width = `${toy.battery}%`;
            batteryIndicator.appendChild(batteryLevel);
            spaceship.appendChild(batteryIndicator);

            // Add status indicator
            const statusIndicator = document.createElement('div');
            statusIndicator.className = `status-indicator ${toy.connected ? 'status-connected' : 'status-disconnected'}`;
            spaceship.appendChild(statusIndicator);

            this.gameContainer.appendChild(spaceship);
            this.spaceships.set(toy.id, spaceship);
            
            // Log for debugging
            console.log(`Created spaceship for toy ${toy.id} (${toy.type}) at position (${x}, ${y})`);
            this.updateTestBox(`Created spaceship for ${toy.type} (${toy.id})`);
        });
    }

    updateToyStatus(toyId, connected) {
        const spaceship = this.spaceships.get(toyId);
        if (!spaceship) return;

        const statusIndicator = spaceship.querySelector('.status-indicator');
        if (statusIndicator) {
            statusIndicator.className = `status-indicator ${connected ? 'status-connected' : 'status-disconnected'}`;
        }
    }

    animateSpaceship(toyId, effectClass) {
        const spaceship = this.spaceships.get(toyId);
        if (!spaceship) return;

        spaceship.classList.add(effectClass);
        setTimeout(() => {
            spaceship.classList.remove(effectClass);
        }, 300);
    }

    handleStrengthChange(toyId, data) {
        const spaceship = this.spaceships.get(toyId);
        if (!spaceship) return;

        // Add vibration effect based on strength
        spaceship.style.animation = data.value > 0 ? 
            `vibrate ${0.1 + (1 - data.value/20) * 0.4}s infinite` : 'none';
    }

    updateBattery(toyId, value) {
        const spaceship = this.spaceships.get(toyId);
        if (!spaceship) return;

        const batteryLevel = spaceship.querySelector('.battery-level');
        if (batteryLevel) {
            batteryLevel.style.width = `${value}%`;
        }
    }

    handleMotion(toyId, motionData) {
        const spaceship = this.spaceships.get(toyId);
        if (!spaceship) return;

        // Calculate average position and speed
        const avgPosition = motionData.reduce((sum, data) => sum + data.position, 0) / motionData.length;
        const avgSpeed = motionData.length > 0 ? motionData[motionData.length - 1].speed : 0;

        // Move spaceship based on motion data
        spaceship.style.transform = `translateY(${avgPosition - 50}px) rotate(${avgSpeed}deg)`;
    }

    startPing() {
        this.stopPing();
        this.pingInterval = setInterval(() => {
            this.sendMessage({ type: 'ping' });
        }, 5000);
    }

    stopPing() {
        if (this.pingInterval) {
            clearInterval(this.pingInterval);
            this.pingInterval = null;
        }
    }

    sendMessage(message) {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify(message));
            if (message.type !== 'ping') {
                this.logEvent('Sent', message);
            }
        }
    }

    disconnect() {
        if (this.ws) {
            this.ws.close();
            this.ws = null;
        }
        this.stopPing();
        this.updateTestBox('Disconnected from server');
    }

    getChineseTimestamp() {
        const options = {
            timeZone: 'Asia/Shanghai',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            hour12: false
        };
        return new Date().toLocaleString('zh-CN', options);
    }

    logEvent(type, data) {
        const timestamp = this.getChineseTimestamp();
        const logMessage = `[${timestamp}] ${type}: ${JSON.stringify(data)}\n`;
        this.eventLog.value += logMessage;
        this.eventLog.scrollTop = this.eventLog.scrollHeight;
    }

    updateConnectionStatus() {
        connectBtn.disabled = this.isConnected;
        sendBtn.disabled = !this.isConnected;
        disconnectBtn.disabled = !this.isConnected;
        connectBtn.textContent = this.isConnected ? 'Connected' : 'Connect';
    }

    tryReconnect() {
        if (this.reconnectTimeout) {
            clearTimeout(this.reconnectTimeout);
        }

        this.reconnectAttempts++;
        const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts - 1), 10000);
        
        this.logEvent('Connection', `Reconnect attempt ${this.reconnectAttempts} of ${this.maxReconnectAttempts} in ${delay/1000} seconds...`);
        
        this.reconnectTimeout = setTimeout(() => {
            const ip = document.getElementById('httpUrl').value.trim();
            const port = document.getElementById('port').value.trim();
            const serverUrl = this.constructWsUrl(ip, port);
            this.connect(serverUrl);
        }, delay);
    }

    getCloseReason(code) {
        const closeReasons = {
            1000: 'Normal closure',
            1001: 'Going away',
            1002: 'Protocol error',
            1003: 'Unsupported data',
            1004: 'Reserved',
            1005: 'No status received',
            1006: 'Abnormal closure',
            1007: 'Invalid frame payload data',
            1008: 'Policy violation',
            1009: 'Message too big',
            1010: 'Mandatory extension',
            1011: 'Internal server error',
            1015: 'TLS handshake'
        };
        return closeReasons[code] || 'Unknown reason';
    }

    logDetailedError(context, error) {
        const errorDetails = {
            context,
            message: error.message || 'No error message',
            timestamp: this.getChineseTimestamp(),
            readyState: this.ws ? this.ws.readyState : 'No WebSocket',
            browserInfo: navigator.userAgent
        };

        this.logEvent('Detailed Error', errorDetails);
        console.error('Detailed WebSocket Error:', errorDetails);
        
        this.isConnected = false;
        this.updateConnectionStatus();
    }

    handleButtonPress(toyId, buttonIndex, isDown) {
        const spaceship = this.spaceships.get(toyId);
        if (!spaceship) return;

        const buttonIndicator = spaceship.querySelector(`.button-${buttonIndex}`);
        if (buttonIndicator) {
            buttonIndicator.classList.toggle('button-active', isDown);
        }
    }

    handleDepthChange(toyId, value) {
        const spaceship = this.spaceships.get(toyId);
        if (!spaceship) return;

        // Convert depth value (0-20) to pixels (-50 to 50)
        const movement = ((value / 20) * 100) - 50;
        spaceship.style.setProperty('--depth-movement', `${movement}px`);
        spaceship.classList.add('depth-movement');
    }

    updateTestBox(message) {
        const timestamp = new Date().toLocaleTimeString();
        this.testBox.innerHTML += `[${timestamp}] ${message}\n`;
        this.testBox.scrollTop = this.testBox.scrollHeight;
    }
}

// Initialize everything when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    const client = new LovenseClient();
    
    // Get input references
    const connectBtn = document.getElementById('connectBtn');
    const sendBtn = document.getElementById('sendBtn');
    const disconnectBtn = document.getElementById('disconnectBtn');
    const ipInput = document.getElementById('httpUrl');
    const portInput = document.getElementById('port');
    
    // Add event listeners
    connectBtn.addEventListener('click', () => {
        const ip = ipInput.value.trim();
        const port = portInput.value.trim();
        
        if (!ip || !port) {
            alert('Please enter both IP and Port');
            return;
        }

        try {
            const serverUrl = client.constructWsUrl(ip, port);
            client.connect(serverUrl);
        } catch (error) {
            alert(`Invalid connection parameters: ${error.message}`);
        }
    });

    sendBtn.addEventListener('click', () => {
        client.requestAccess();
    });

    disconnectBtn.addEventListener('click', () => {
        client.disconnect();
    });
});
</script>