<div class="api-documentation">
    <h1>Custom Cam JS SDK</h1>
    <!-- API Reference -->
    <div class="api-reference">
        <p>This implementation is based on the <a href="https://developer.lovense.com/docs/cam-solutions/basic-js-sdk.html" target="_blank">Official Lovense Basic JS SDK Documentation</a>.</p>
    </div>

    <div class="content">
        <section id="get-auth-token">
            <h2>1. Get Auth Token</h2>
            <p>First, obtain an authentication token using your developer credentials.</p>
            <form id="auth-form" class="test-form">
                <div class="input-group">
                    <input type="text" id="developer-token" class="form-control" placeholder="Enter Developer Token">
                    <input type="text" id="user-id" class="form-control" placeholder="Enter User ID">
                    <input type="text" id="username" class="form-control" placeholder="Enter Username">
                    <button type="button" class="primary-button" onclick="getAuthToken()">Get Auth Token</button>
                </div>
            </form>

            <div class="api-test-results">
                <div class="request-box">
                    <h4>Request:</h4>
                    <div class="request-url">URL: https://api.lovense-api.com/api/basicApi/getToken</div>
                    <div class="timestamp" id="searchRequestTime">Timestamp: -</div>
                    <div id="searchRequest">Request will appear here...</div>
                </div>
                <div class="response-box">
                    <h4>Response:</h4>
                    <div class="timestamp" id="searchResponseTime">Timestamp: -</div>
                    <div id="searchResponse">Response will appear here...</div>
                </div>
            </div>
            
        </section>

        <section id="initialize">
            <h2>2. Initialize the SDK</h2>
            <form id="init-form" class="test-form">
                <div class="input-group">
                    <input type="text" id="auth-token" class="form-control" placeholder="Enter AuthToken From Last Step">
                    <input type="text" id="platform" class="form-control" placeholder="Enter Platform Name">
                    <button type="button" class="btn btn-primary" onclick="initializeSDK()">Initialize SDK</button>
                    <button type="button" class="stop-button" onclick="stopSDK()">Stop SDK</button>
                </div>
            </form>
            <div class="api-test-results">
                <div class="request-box">
                    <h4>Request:</h4>
                    <div class="request-url">URL: `LovenseBasicSdk` initialized</div>
                    <div class="timestamp" id="initRequestTime">Timestamp: -</div>
                    <div id="initRequest">Request will appear here...</div>
                </div>
                <div class="response-box">
                    <h4>Response:</h4>
                    <div class="timestamp" id="initResponseTime">Timestamp: -</div>
                    <div id="initResponse">Response will appear here...</div>
                </div>
            </div>
        </section>

        <section id="qr-code">
            <h2>3. Get QR Code</h2>
            <div class="tutorial-steps">
                <div class="step">
                    <span class="step-number">1</span>
                    <span class="step-text">Download <a href="https://www.lovense.com/app/remote" target="_blank">Lovense Remote</a> for mobile</span>
                </div>
                <div class="step">
                    <span class="step-number">2</span>
                    <span class="step-text">Connect Lovense Toys on Remote</span>
                </div>
                <div class="step">
                    <span class="step-number">3</span>
                    <span class="step-text">Scan QR Code to allow control</span>
                </div>
            </div>
            <div class="livestream-container">
                <div class="livestream-display">
                    <div class="video-placeholder">
                        <span>Any User Scenarios</span>
                    </div>
                    <div class="generate-qr-button">
                        <button type="button" class="lovense-button" onclick="generateQRCode()">
                            <span class="heart-icon">❤️</span>
                            <span class="button-text">Lovense</span>
                        </button>
                    </div>
                </div>
                <div class="qr-section">
                    <div class="qr-title">Scan QR Code</div>
                    <div class="qr-options">
                        <label class="checkbox-label">
                            <input type="checkbox" id="use-default-qr" checked>
                            Use default QR code for test
                        </label>
                    </div>
                    <div id="qr-display" class="qr-container">
                        <div class="qr-placeholder">
                            <span>QR Code will appear here</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="api-test-results">
                <div class="request-box">
                    <h4>Request:</h4>
                    <div class="request-url">URL: Get QR Code</div>
                    <div class="timestamp" id="qrRequestTime">Timestamp: -</div>
                    <div id="qrRequest">Request will appear here...</div>
                </div>
                <div class="response-box">
                    <h4>Response:</h4>
                    <div class="timestamp" id="qrResponseTime">Timestamp: -</div>
                    <div id="qrResponse">Response will appear here...</div>
                </div>
            </div>
        </section>

        <section id="toy-info">
            <h2>4. Search For Toys</h2>
            <div class="button-group">
                <button onclick="getAppStatus()" class="primary-button">Get App Status</button>
                <button onclick="getToys()" class="primary-button">Get Toys</button>
                <button onclick="getOnlineToys()" class="primary-button">Get Online Toys</button>
                <button onclick="checkToyOnline()" class="primary-button">Check Toy Online</button>
                <button onclick="getDeviceInfo()" class="primary-button">Get Device Info</button>
            </div>
            <div class="api-test-results">
                <div class="request-box">
                    <h4>Request:</h4>
                    <div class="request-url">URL: Search Toys</div>
                    <div class="timestamp" id="toyRequestTime">Timestamp: -</div>
                    <div id="toyRequest">Request will appear here...</div>
                </div>
                <div class="response-box">
                    <h4>Response:</h4>
                    <div class="timestamp" id="toyResponseTime">Timestamp: -</div>
                    <div id="toyResponse">Response will appear here...</div>
                </div>
            </div>
        </section>

        <section id="toy-commands">
            <h2>5. Test Toy Commands</h2>
            <form id="command-form" class="test-form">
                <div class="command-inputs">
                    <div class="form-group">
                        <label>Vibrate (0-20):</label>
                        <input type="number" id="vibrate" class="form-control" min="0" max="20">
                    </div>
                    <div class="form-group">
                        <label>Rotate (0-20):</label>
                        <input type="number" id="rotate" class="form-control" min="0" max="20">
                    </div>
                    <div class="form-group">
                        <label>Pump (0-3):</label>
                        <input type="number" id="pump" class="form-control" min="0" max="3">
                    </div>
                    <div class="form-group">
                        <label>Time (seconds):</label>
                        <input type="number" id="time" class="form-control" min="0">
                    </div>
                    <div class="form-group">
                        <label>Toy ID (optional):</label>
                        <input type="text" id="toy-id" class="form-control">
                    </div>
                </div>
                <div class="button-group">
                    <button type="submit" class="primary-button">Send Command</button>
                    <button type="button" id="stop-toy" class="secondary-button">Stop Toy</button>
                </div>
            </form>
            <div class="api-test-results">
                <div class="request-box">
                    <h4>Request:</h4>
                    <div class="request-url">URL: Toy Commands</div>
                    <div class="timestamp" id="cmdRequestTime">Timestamp: -</div>
                    <div id="cmdRequest">Request will appear here...</div>
                </div>
                <div class="response-box">
                    <h4>Response:</h4>
                    <div class="timestamp" id="cmdResponseTime">Timestamp: -</div>
                    <div id="cmdResponse">Response will appear here...</div>
                </div>
            </div>
        </section>

        <section id="pattern-commands">
            <h2>6. Test Pattern Commands</h2>
            <form id="pattern-form" class="test-form">
                <div class="pattern-inputs">
                    <div class="form-group">
                        <label>Pattern Strength:</label>
                        <input type="text" id="pattern" class="form-control" placeholder="e.g., 6;8;10;12;14;20;20;20;16;14" required>
                    </div>
                    <div class="form-group">
                        <label>Time (seconds):</label>
                        <input type="number" id="pattern-time" class="form-control" min="0">
                    </div>
                    <div class="form-group">
                        <label>Interval (ms):</label>
                        <input type="number" id="interval" class="form-control" min="100" value="150">
                    </div>
                    <div class="checkbox-group">
                        <label><input type="checkbox" id="vibrate-pattern" checked> Vibrate</label>
                        <label><input type="checkbox" id="rotate-pattern"> Rotate</label>
                        <label><input type="checkbox" id="pump-pattern"> Pump</label>
                    </div>
                </div>
                <div class="button-group">
                    <button type="submit" class="primary-button">Send Pattern</button>
                </div>
            </form>

            <div class="preset-commands">
                <h3>Preset Patterns</h3>
                <button onclick="sendPreset('pulse')" class="primary-button">Pulse</button>
                <button onclick="sendPreset('wave')" class="primary-button">Wave</button>
                <button onclick="sendPreset('fireworks')" class="primary-button">Fireworks</button>
                <button onclick="sendPreset('earthquake')" class="primary-button">Earthquake</button>
                <button id="stop-pattern" class="secondary-button">Stop Pattern</button>
            </div>

            <div class="api-test-results">
                <div class="request-box">
                    <h4>Request:</h4>
                    <div class="request-url">URL: Pattern Commands</div>
                    <div class="timestamp" id="patternRequestTime">Timestamp: -</div>
                    <div id="patternRequest">Request will appear here...</div>
                </div>
                <div class="response-box">
                    <h4>Response:</h4>
                    <div class="timestamp" id="patternResponseTime">Timestamp: -</div>
                    <div id="patternResponse">Response will appear here...</div>
                </div>
            </div>
        </section>
    </div>
</div>

<style>
.api-documentation {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
}

/* API Reference styling */
.api-reference {
    background: #f8f9fa;
    border-left: 4px solid #3498db;
    padding: 1rem;
    margin-bottom: 2rem;
    border-radius: 0 4px 4px 0;
}

.api-reference p {
    margin: 0;
    font-size: 0.95rem;
    color: #2c3e50;
}

.api-reference a {
    color: #3498db;
    text-decoration: none;
    font-weight: 500;
}

.api-reference a:hover {
    text-decoration: underline;
}

.content section {
    margin-bottom: 40px;
    padding: 30px;
    border-radius: 10px;
    background: #ffffff;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

h1, h2 {
    color: #333;
    border-bottom: 2px solid #f0f0f0;
    padding-bottom: 10px;
}

.code-example {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    border: 1px solid #e9ecef;
    margin: 15px 0;
}

.test-form {
    margin: 20px 0;
}

.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 8px;
    color: #555;
    font-weight: 500;
}

.form-group input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 14px;
}

.form-group input:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
}

.primary-button {
    background: #007bff;
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 500;
    transition: background 0.3s;
}

.primary-button:hover {
    background: #007bff;
}
.btn-primary { background: #007bff; color: white; }
.stop-button { background: #6c757d; color: white; }

.secondary-button {
  background: #6c757d;
  color: white;
}

.secondary-button:hover {
    background: #5a6268;
}

.response-area {
    margin-top: 20px;
    padding: 15px;
    background: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 6px;
    min-height: 50px;
}

.livestream-container {
    display: flex;
    gap: 30px;
    margin-top: 20px;
    height: 300px;
}

.livestream-display {
    flex: 1;
    background: #000;
    border-radius: 10px;
    overflow: hidden;
    position: relative;
    width: 600px;
}

.video-placeholder {
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #fff;
    font-size: 1.2em;
}

.qr-section {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    background: #f8f9fa;
    border-radius: 10px;
    width: 300px;
    height: 100%;
    padding-bottom: 5px;
}

.generate-qr-button {
    position: absolute;
    bottom: 20px;
    right: 20px;
    z-index: 10;
}

.lovense-button {
    background: rgba(255, 255, 255, 0.2);
    border: none;
    border-radius: 25px;
    padding: 10px 20px;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(5px);
}

.lovense-button:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: scale(1.05);
}

.heart-icon {
    font-size: 20px;
    color: #ff1744;
}

.button-text {
    color: white;
    font-weight: 500;
    font-size: 14px;
    text-transform: uppercase;
    letter-spacing: 1px;
}

.qr-title {
    font-size: 1.1em;
    font-weight: 500;
    color: #333;
    padding: 20px;
}

.qr-container {
    margin: 10px 0;
    text-align: center;
    min-height: 150px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.qr-placeholder {
    width: 150px;
    height: 150px;
    border: 2px dashed #ddd;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #f8f9fa;
    color: #666;
    font-size: 0.9em;
    padding: 20px;
    text-align: center;
}

.qr-container img {
    max-width: 150px;
    height: auto;
    border: 1px solid #ddd;
    border-radius: 3px;
    padding: 3px;
    background: white;
    width: 150px;
    height: 150px;
    object-fit: contain;
    margin-bottom: 5px;
}

.button-group {
    display: flex;
    gap: 10px;
}

.checkbox-group label {
    margin-right: 15px;
}

.preset-commands {
    margin-top: 20px;
}

.input-group {
    display: flex;
    gap: 10px;
    align-items: flex-start;
}

.input-group .form-control {
    flex: 1;
    margin-bottom: 0;
    min-width: 0;
}

.input-group .primary-button {
    white-space: nowrap;
    height: 45px;
    margin-top: 0;
    padding: 0 20px;
}

.form-control {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    margin-bottom: 0;
    font-size: 1rem;
    height: 45px;
    box-sizing: border-box;
}

.api-display {
    margin-top: 20px;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
}

.request-area, .response-area {
    background: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 6px;
    padding: 15px;
}

.request-area h4, .response-area h4 {
    margin-top: 0;
    color: #555;
    font-size: 14px;
    font-weight: 600;
}

.code-block {
    background: #fff;
    border: 1px solid #e9ecef;
    border-radius: 4px;
    padding: 10px;
    margin: 0;
    min-height: 100px;
    white-space: pre-wrap;
    font-family: monospace;
}

button {
    background: #007bff;
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 500;
    transition: background 0.3s;
}

button:hover {
    background: #0056b3;
}

button.secondary-button {
    background: #6c757d;
}

button.secondary-button:hover {
    background: #5a6268;
}

#command-form button,
#pattern-form button,
.preset-commands button {
    margin-right: 10px;
}

.preset-commands {
    margin-top: 20px;
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
}

.command-inputs, .pattern-inputs {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin-bottom: 20px;
}

.checkbox-group {
    display: flex;
    gap: 20px;
    margin-top: 10px;
}

.checkbox-group label {
    display: flex;
    align-items: center;
    gap: 5px;
}

.checkbox-group input[type="checkbox"] {
    width: auto;
}

.request-url {
    font-family: monospace;
    color: #0066cc;
    margin-bottom: 8px;
    padding: 4px 0;
    font-size: 0.9em;
}

.timestamp {
    font-family: monospace;
    color: #666;
    font-size: 0.85em;
    margin-bottom: 8px;
}

.error {
    color: #dc3545;
    padding: 10px;
    background: #f8d7da;
    border: 1px solid #f5c6cb;
    border-radius: 4px;
    margin: 10px 0;
}

.tutorial-steps {
    display: flex;
    gap: 20px;
    margin: 20px 0;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 8px;
    border-left: 4px solid #3498db;
}

.step {
    display: flex;
    align-items: center;
    gap: 10px;
}

.step-number {
    width: 24px;
    height: 24px;
    background: #3498db;
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 500;
    font-size: 14px;
}

.step-text {
    color: #2c3e50;
    font-size: 0.95rem;
}

.step-text a {
    color: #3498db;
    text-decoration: none;
    font-weight: 500;
}

.step-text a:hover {
    text-decoration: underline;
}

.qr-options {
    margin-bottom: 10px;
    text-align: left;
    width: 100%;
    padding: 0 20px;
}

.checkbox-label {
    display: flex;
    align-items: center;
    gap: 8px;
    color: #666;
    font-size: 0.9em;
}

.checkbox-label input[type="checkbox"] {
    margin: 0;
}
</style> 

<script src="https://api.lovense-api.com/basic-sdk/core.min.js"></script>
<script>
    let basicSdkInstance = null;
    // Helper function to get formatted timestamp
    function getFormattedTimestamp() {
        const now = new Date();
        return now.toLocaleTimeString('en-US', { 
            hour12: false,
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            fractionalSecondDigits: 3
        });
    }

    // Add this helper function at the start of the script
    function isSuccessResponse(data) {
        return data.code === 200 || data.message === 'Success';
    }

    // Auth Token Handler
    async function getAuthToken() {
        const searchRequest = document.getElementById('searchRequest');
        const searchResponse = document.getElementById('searchResponse');
        const searchRequestTime = document.getElementById('searchRequestTime');
        const searchResponseTime = document.getElementById('searchResponseTime');
        
        const token = document.getElementById('developer-token').value.trim() || 'tf7_SsG7X8qJm5l4gSYzfdLSeaZtlLl8ZaWNOSLt_ScnbUpimwPUIxB5l9TAgNle';
        const uid = document.getElementById('user-id').value.trim() || '8888';
        const uname = document.getElementById('username').value.trim() || 'deltatest';

        const requestUrl = 'https://api.lovense-api.com/api/basicApi/getToken';
        const requestData = { token, uid, uname };

        // Update request timestamp and display
        searchRequestTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
        searchRequest.innerHTML = JSON.stringify(requestData, null, 2);

        try {
            const response = await fetch(requestUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestData)
            });

            const data = await response.json();
            
            // Update response timestamp and display
            searchResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            searchResponse.innerHTML = JSON.stringify(data, null, 2);
            searchResponse.style.color = isSuccessResponse(data) ? '#28a745' : '#dc3545';

            // If successful, update the auth token input
            if (data.token) {
                document.getElementById('auth-token').value = data.token;
            }
        } catch (error) {
            // Update response timestamp and error display
            searchResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            searchResponse.innerHTML = `Error: ${error.message}`;
            searchResponse.style.color = '#dc3545';
        }
    }

    // Initialize SDK Handler
    async function initializeSDK() {
        const initRequest = document.getElementById('initRequest');
        const initResponse = document.getElementById('initResponse');
        const initRequestTime = document.getElementById('initRequestTime');
        const initResponseTime = document.getElementById('initResponseTime');

        const authToken = document.getElementById('auth-token').value.trim() || 'VkCNidfMTJFJB0lz7l98keLwTmXJcf+gTFBPc+biH8peKdSu2nkmQmKELsSF2CVX';
        const platform = document.getElementById('platform').value.trim() || 'deltatest';
        const uid = document.getElementById('user-id').value.trim() || '8888';

        const initData = { 
            platform, 
            authToken,  // Auth token from previous step
            uid 
        };
        
        // Update request timestamp and display
        initRequestTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
        initRequest.innerHTML = JSON.stringify(initData, null, 2);

        try {
            const startTime = Date.now();
            
            // Create SDK instance with proper event handlers
            basicSdkInstance = new LovenseBasicSdk(initData);
            
            basicSdkInstance.on('ready', (instance) => {
                const response = { 
                    code: 200, 
                    message: 'SDK initialized successfully',
                    data: { status: 'ready' }
                };
                
                // Update response timestamp and display
                initResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
                initResponse.innerHTML = JSON.stringify(response, null, 2);
                initResponse.style.color = '#28a745';
            });

            basicSdkInstance.on('sdkError', (data) => {
                const errorResponse = {
                    code: data.code,
                    message: data.message
                };
                
                // Update response timestamp and error display
                initResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
                initResponse.innerHTML = JSON.stringify(errorResponse, null, 2);
                initResponse.style.color = '#dc3545';
            });

        } catch (error) {
            const errorResponse = { 
                code: 400, 
                message: error.message 
            };
            
            // Update response timestamp and error display
            initResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            initResponse.innerHTML = JSON.stringify(errorResponse, null, 2);
            initResponse.style.color = '#dc3545';
        }
    }

    // Stop SDK Handler
    async function stopSDK() {
        if (!basicSdkInstance) return alert('Please initialize SDK first');
        
        const initRequest = document.getElementById('initRequest');
        const initResponse = document.getElementById('initResponse');
        const initRequestTime = document.getElementById('initRequestTime');
        const initResponseTime = document.getElementById('initResponseTime');
        
        // Update request timestamp and display
        const requestData = { action: 'stop SDK' };
        initRequestTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
        initRequest.innerHTML = JSON.stringify(requestData, null, 2);

        try {
            const startTime = Date.now();
            basicSdkInstance.destroy();
            basicSdkInstance = null;
            const response = { code: 200, message: 'SDK stopped successfully' };
            
            // Update response timestamp and display
            initResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            initResponse.innerHTML = JSON.stringify(response, null, 2);
            initResponse.style.color = '#28a745';
        } catch (error) {
            const errorResponse = { code: 400, message: error.message };
            initResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            initResponse.innerHTML = JSON.stringify(errorResponse, null, 2);
            initResponse.style.color = '#dc3545';
        }
    }

    // QR Code Handler
    async function generateQRCode() {
        if (!basicSdkInstance) return alert('Please initialize SDK first');
        
        const qrRequest = document.getElementById('qrRequest');
        const qrResponse = document.getElementById('qrResponse');
        const qrRequestTime = document.getElementById('qrRequestTime');
        const qrResponseTime = document.getElementById('qrResponseTime');
        const qrDisplay = document.getElementById('qr-display');
        
        // Check if using default QR code
        const useDefaultQr = document.getElementById('use-default-qr').checked;
        if (useDefaultQr) {
            const defaultQrCode = {
                token: "2Td5iU0YoWSpsE4fx5WSMfLIobOBGWFxwN0qwRuHojRmKJzZuPGvimCeHh203rfcJTNCFBX+rE16MczWZvs1xQ==",
                qrcodeUrl: "https://apps.lovense.com/UploadFiles/qr/20241203/bce5e8934fb342b1bff234070a6e6b18.jpg"
            };
            
            qrRequestTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            qrRequest.innerHTML = JSON.stringify({ action: 'get default QR code' }, null, 2);
            
            qrResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            qrResponse.innerHTML = JSON.stringify(defaultQrCode, null, 2);
            qrResponse.style.color = '#28a745';
            
            qrDisplay.innerHTML = `<img src="${defaultQrCode.qrcodeUrl}" alt="QR Code">`;
            return;
        }

        // Rest of the existing code...
    }

    // Update Toy Info Handlers
    async function getAppStatus() {
        if (!basicSdkInstance) return alert('Please initialize SDK first');
        
        const toyRequest = document.getElementById('toyRequest');
        const toyResponse = document.getElementById('toyResponse');
        const toyRequestTime = document.getElementById('toyRequestTime');
        const toyResponseTime = document.getElementById('toyResponseTime');
        
        // Update request timestamp and display
        const requestData = { action: 'get app status' };
        toyRequestTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
        toyRequest.innerHTML = JSON.stringify(requestData, null, 2);

        try {
            const startTime = Date.now();
            const status = await basicSdkInstance.getAppStatus();
            
            // Update response timestamp and display
            toyResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            toyResponse.innerHTML = JSON.stringify(status, null, 2);
            toyResponse.style.color = '#28a745';
        } catch (error) {
            toyResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            toyResponse.innerHTML = JSON.stringify({ code: 400, message: error.message }, null, 2);
            toyResponse.style.color = '#dc3545';
        }
    }

    async function getToys() {
        if (!basicSdkInstance) return alert('Please initialize SDK first');
        
        const toyRequest = document.getElementById('toyRequest');
        const toyResponse = document.getElementById('toyResponse');
        const toyRequestTime = document.getElementById('toyRequestTime');
        const toyResponseTime = document.getElementById('toyResponseTime');
        
        // Update request timestamp and display
        const requestData = { action: 'get toys list' };
        toyRequestTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
        toyRequest.innerHTML = JSON.stringify(requestData, null, 2);

        try {
            const startTime = Date.now();
            const toys = await basicSdkInstance.getToys();
            
            // Update response timestamp and display
            toyResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            toyResponse.innerHTML = JSON.stringify(toys, null, 2);
            toyResponse.style.color = '#28a745';
        } catch (error) {
            toyResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            toyResponse.innerHTML = JSON.stringify({ code: 400, message: error.message }, null, 2);
            toyResponse.style.color = '#dc3545';
        }
    }

    async function getOnlineToys() {
        if (!basicSdkInstance) return alert('Please initialize SDK first');
        
        const toyRequest = document.getElementById('toyRequest');
        const toyResponse = document.getElementById('toyResponse');
        const toyRequestTime = document.getElementById('toyRequestTime');
        const toyResponseTime = document.getElementById('toyResponseTime');
        
        const requestData = { action: 'get online toys' };
        toyRequestTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
        toyRequest.innerHTML = JSON.stringify(requestData, null, 2);

        try {
            const startTime = Date.now();
            const toys = await basicSdkInstance.getOnlineToys();
            
            toyResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            toyResponse.innerHTML = JSON.stringify(toys, null, 2);
            toyResponse.style.color = '#28a745';
        } catch (error) {
            toyResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            toyResponse.innerHTML = JSON.stringify({ code: 400, message: error.message }, null, 2);
            toyResponse.style.color = '#dc3545';
        }
    }

    async function checkToyOnline() {
        if (!basicSdkInstance) return alert('Please initialize SDK first');
        
        const toyRequest = document.getElementById('toyRequest');
        const toyResponse = document.getElementById('toyResponse');
        const toyRequestTime = document.getElementById('toyRequestTime');
        const toyResponseTime = document.getElementById('toyResponseTime');
        
        const requestData = { action: 'check toy online status' };
        toyRequestTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
        toyRequest.innerHTML = JSON.stringify(requestData, null, 2);

        try {
            const startTime = Date.now();
            const status = await basicSdkInstance.checkToyOnline();
            
            toyResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            toyResponse.innerHTML = JSON.stringify(status, null, 2);
            toyResponse.style.color = '#28a745';
        } catch (error) {
            toyResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            toyResponse.innerHTML = JSON.stringify({ code: 400, message: error.message }, null, 2);
            toyResponse.style.color = '#dc3545';
        }
    }

    async function getDeviceInfo() {
        if (!basicSdkInstance) return alert('Please initialize SDK first');
        
        const toyRequest = document.getElementById('toyRequest');
        const toyResponse = document.getElementById('toyResponse');
        const toyRequestTime = document.getElementById('toyRequestTime');
        const toyResponseTime = document.getElementById('toyResponseTime');
        
        const requestData = { action: 'get device info' };
        toyRequestTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
        toyRequest.innerHTML = JSON.stringify(requestData, null, 2);

        try {
            const startTime = Date.now();
            const info = await basicSdkInstance.getDeviceInfo();
            
            toyResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            toyResponse.innerHTML = JSON.stringify(info, null, 2);
            toyResponse.style.color = '#28a745';
        } catch (error) {
            toyResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            toyResponse.innerHTML = JSON.stringify({ code: 400, message: error.message }, null, 2);
            toyResponse.style.color = '#dc3545';
        }
    }

    // Update Command Handler
    document.getElementById('command-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        if (!basicSdkInstance) return alert('Please initialize SDK first');

        const cmdRequest = document.getElementById('cmdRequest');
        const cmdResponse = document.getElementById('cmdResponse');
        const cmdRequestTime = document.getElementById('cmdRequestTime');
        const cmdResponseTime = document.getElementById('cmdResponseTime');

        const command = {
            vibrate: parseInt(document.getElementById('vibrate').value) || 0,
            rotate: parseInt(document.getElementById('rotate').value) || 0,
            pump: parseInt(document.getElementById('pump').value) || 0,
            time: parseInt(document.getElementById('time').value) || 1,
            toyId: document.getElementById('toy-id').value.trim()
        };

        // Update request timestamp and display
        cmdRequestTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
        cmdRequest.innerHTML = JSON.stringify(command, null, 2);

        try {
            const startTime = Date.now();
            const response = await basicSdkInstance.toyCommand(command);
            
            // Update response timestamp and display
            cmdResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            cmdResponse.innerHTML = JSON.stringify(response, null, 2);
            cmdResponse.style.color = isSuccessResponse(response) ? '#28a745' : '#dc3545';
        } catch (error) {
            cmdResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            cmdResponse.innerHTML = JSON.stringify({ code: 400, message: error.message }, null, 2);
            cmdResponse.style.color = '#dc3545';
        }
    });

    // Stop Toy Handler
    document.getElementById('stop-toy').addEventListener('click', async () => {
        if (!basicSdkInstance) return alert('Please initialize SDK first');
        
        document.getElementById('command-request').textContent = 
            `[${new Date().toISOString()}] Stopping toy`;

        try {
            const startTime = Date.now();
            const response = await basicSdkInstance.stopToy();
            document.getElementById('command-response').textContent = 
                `[${new Date().toISOString()}] (${Date.now() - startTime}ms) ${JSON.stringify(response)}`;
        } catch (error) {
            document.getElementById('command-response').textContent = 
                `[${new Date().toISOString()}] Error: ${error.message}`;
        }
    });

    // Update Pattern Handler
    document.getElementById('pattern-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        if (!basicSdkInstance) return alert('Please initialize SDK first');

        const patternRequest = document.getElementById('patternRequest');
        const patternResponse = document.getElementById('patternResponse');
        const patternRequestTime = document.getElementById('patternRequestTime');
        const patternResponseTime = document.getElementById('patternResponseTime');

        const pattern = {
            pattern: document.getElementById('pattern').value.split(';').map(Number),
            time: parseInt(document.getElementById('pattern-time').value) || 1,
            interval: parseInt(document.getElementById('interval').value) || 150,
            vibrate: document.getElementById('vibrate-pattern').checked,
            rotate: document.getElementById('rotate-pattern').checked,
            pump: document.getElementById('pump-pattern').checked
        };

        // Update request timestamp and display
        patternRequestTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
        patternRequest.innerHTML = JSON.stringify(pattern, null, 2);

        try {
            const startTime = Date.now();
            const response = await basicSdkInstance.patternCommand(pattern);
            
            // Update response timestamp and display
            patternResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            patternResponse.innerHTML = JSON.stringify(response, null, 2);
            patternResponse.style.color = isSuccessResponse(response) ? '#28a745' : '#dc3545';
        } catch (error) {
            patternResponseTime.innerHTML = `Timestamp: ${getFormattedTimestamp()}`;
            patternResponse.innerHTML = JSON.stringify({ code: 400, message: error.message }, null, 2);
            patternResponse.style.color = '#dc3545';
        }
    });

    // Preset Pattern Handler
    async function sendPreset(type) {
        if (!basicSdkInstance) return alert('Please initialize SDK first');

        document.getElementById('pattern-request').textContent = 
            `[${new Date().toISOString()}] Sending preset pattern: ${type}`;

        try {
            const startTime = Date.now();
            const response = await basicSdkInstance.presetPattern(type);
            document.getElementById('pattern-response').textContent = 
                `[${new Date().toISOString()}] (${Date.now() - startTime}ms) ${JSON.stringify(response)}`;
        } catch (error) {
            document.getElementById('pattern-response').textContent = 
                `[${new Date().toISOString()}] Error: ${error.message}`;
        }
    }

    // Stop Pattern Handler
    document.getElementById('stop-pattern').addEventListener('click', async () => {
        if (!basicSdkInstance) return alert('Please initialize SDK first');
        
        document.getElementById('pattern-request').textContent = 
            `[${new Date().toISOString()}] Stopping pattern`;

        try {
            const startTime = Date.now();
            const response = await basicSdkInstance.stopPattern();
            document.getElementById('pattern-response').textContent = 
                `[${new Date().toISOString()}] (${Date.now() - startTime}ms) ${JSON.stringify(response)}`;
        } catch (error) {
            document.getElementById('pattern-response').textContent = 
                `[${new Date().toISOString()}] Error: ${error.message}`;
        }
    });

    // Livestream toy control handlers
    document.querySelectorAll('.toy-button').forEach(button => {
        button.addEventListener('click', async () => {
            if (!basicSdkInstance) return alert('Please initialize SDK first');

            const type = button.title.toLowerCase();
            let command = {};

            switch(type) {
                case 'vibrator':
                    command = { vibrate: 20, time: 1 };
                    break;
                case 'rotator':
                    command = { rotate: 20, time: 1 };
                    break;
                case 'pump':
                    command = { pump: 3, time: 1 };
                    break;
            }

            document.getElementById('command-request').textContent = 
                `[${new Date().toISOString()}] Sending livestream command ${JSON.stringify(command)}`;

            try {
                const startTime = Date.now();
                const response = await basicSdkInstance.toyCommand(command);
                document.getElementById('command-response').textContent = 
                    `[${new Date().toISOString()}] (${Date.now() - startTime}ms) ${JSON.stringify(response)}`;
            } catch (error) {
                document.getElementById('command-response').textContent = 
                    `[${new Date().toISOString()}] Error: ${error.message}`;
            }
        });
    });
</script>