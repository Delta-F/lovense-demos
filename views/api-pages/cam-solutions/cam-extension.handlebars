<div class="api-documentation">
    <h1>Cam Extension for Chrome</h1>
    
    <div class="api-reference">
        <p>This implementation is based on the <a href="https://developer.lovense.com/docs/cam-solutions/cam-extension-for-chrome.html" target="_blank">Official Lovense Cam Extension Documentation</a>.</p>
    </div>

    <div class="content">
        <section class="test-section">
            <div class="steps">
                <h2>1. Getting Started</h2>
                <!-- This section has been removed as per instructions -->
                <ol>
                    <li>Install <a href="https://www.lovense.com/cam-model/extension" target="_blank"><span class="highlight-text">Cam Extension</span></a> from Chrome or <a href="https://www.lovense.com/cam-model/download" target="_blank"><span class="highlight-text">Stream Master</span></a> For PC Desktop</li>
                    <li>Enable the extension in browser</li>
                    <li>Add Cam Site <span class="highlight-text">test:deltatest</span> in Cam Extension setting page</li>
                </ol>

                <div class="system-requirements">
                    <span class="section-label">System Requirements:</span>
                    <div class="req-icons">
                        <span class="req-item"><i class="fab fa-chrome"></i> Chrome</span>
                        <span class="req-item"><i class="fab fa-windows"></i> Windows</span>
                        <span class="req-item"><i class="fab fa-apple"></i> Mac</span>
                    </div>
                </div>
            </div>
        </section>

        <section class="test-section">
            <h2>2. Test Controls</h2>
            <p class="test-description">Click "Start Test" to initialize Cam Extension integration. The widget will appear after successful connection.</p>
            <div class="control-panel">
                <div class="button-group">
                    <button id="startTest" class="btn btn-primary">Start Test</button>
                    <button id="stopTest" class="btn btn-danger">Stop Test</button>
                </div>
                <div id="connectionStatus" class="status-badge">Disconnected</div>
            </div>
        </section>

        <section class="test-section">
            <h2>3. Chat Room Test</h2>
            <div class="chat-container">
                <div class="messages-wrapper">
                    <div id="chatMessages" class="messages-area"></div>
                    <div id="requestMessages" class="messages-area">
                        <div class="area-title">Request/Response Log</div>
                    </div>
                </div>
                <div class="input-area">
                    <input type="text" id="messageInput" placeholder="Type your message...">
                    <button id="sendMessage" class="btn btn-primary">Send Message</button>
                    <input type="number" id="tipAmount" placeholder="Tip amount" min="1" class="tip-input">
                    <button id="sendTip" class="btn btn-success">Send Tip</button>
                </div>
            </div>
        </section>

        <section class="test-section">
            <h2>4. Event Messages</h2>
            <p class="event-description">Events: toyStatusChange, tipQueueChange, settingsChange</p>
            <div class="event-container">
                <div id="eventMessages" class="messages-area"></div>
            </div>
        </section>

        <section class="test-section">
            <h2>5. API Test Functions</h2>
            <div class="test-buttons button-group">
                <button id="getSettings" class="btn btn-primary">Get Settings</button>
                <button id="getToyStatus" class="btn btn-primary">Get Toy Status</button>
                <button id="getVersion" class="btn btn-primary">Get Version</button>
            </div>
            <div id="apiResponse" class="response-area">
                <pre><code>Response will appear here...</code></pre>
            </div>
        </section>
    </div>
</div>

<style>
.api-documentation {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
}

.api-reference {
    background: #f8f9fa;
    border-left: 4px solid #3498db;
    padding: 1rem;
    margin-bottom: 2rem;
    border-radius: 0 4px 4px 0;
}

.api-reference p {
    margin: 0;
    font-size: 0.95rem;
    color: #2c3e50;
}

.api-reference a {
    color: #3498db;
    text-decoration: none;
    font-weight: 500;
}

.api-reference a:hover {
    text-decoration: underline;
}

.test-section {
  background: #fff;
  border-radius: 8px;
  padding: 1.5rem;
  margin-bottom: 2rem;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.test-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
}

.chat-panel {
    grid-column: 1 / -1;
}

.messages-area {
    height: 200px;
    overflow-y: auto;
    background: #f8f9fa;
    padding: 0.5rem;
    border-radius: 4px;
    margin-bottom: 0.5rem;
}

.input-group {
    display: flex;
    gap: 0.5rem;
}

.input-group input {
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.btn-primary { background: #3498db; color: white; }
.btn-danger { background: #e74c3c; color: white; }
.btn-success { background: #2ecc71; color: white; }

.response-area {
    background: #f8f9fa;
    padding: 0.5rem;
    border-radius: 4px;
    margin-top: 0.5rem;
}

.sub-steps {
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
    padding-left: 1.5rem;
    font-size: 0.9em;
    color: #666;
}

.sub-steps li {
    margin-bottom: 0.25rem;
}

.system-requirements {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-top: 1rem;
    padding: 0.75rem 1rem;
    background: #f8f9fa;
    border-radius: 4px;
    border: 1px solid #e9ecef;
}

.req-icons {
    display: flex;
    gap: 1.5rem;
}

.req-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #666;
    font-size: 0.9rem;
}

.req-item i {
    font-size: 1.1rem;
    color: #3498db;
}

.control-panel {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.status-badge {
    padding: 0.5rem 1rem;
    border-radius: 4px;
    background: #f8f9fa;
    border: 1px solid #ddd;
    font-weight: 500;
}

.status-badge.connected {
    background: #2ecc71;
    color: white;
    border-color: #27ae60;
}

.site-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    background: #f8f9fa;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    border: 1px solid #e9ecef;
    margin: 1rem 0;
}

.site-badge i {
    color: #3498db;
}

.site-badge .section-label {
    color: #666;
    font-weight: 500;
}

.site-badge .site-name {
    color: #2c3e50;
    font-weight: 600;
    background: #fff;
    padding: 0.25rem 0.75rem;
    border-radius: 3px;
    border: 1px solid #e9ecef;
}

.highlight-text {
    background: #f8f9fa;
    padding: 0.2rem 0.5rem;
    border-radius: 3px;
    font-family: monospace;
    color: #2c3e50;
    border: 1px solid #e9ecef;
    font-weight: 500;
}

.messages-wrapper {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    margin-bottom: 1rem;
}

.messages-area {
    height: 300px;
    overflow-y: auto;
    background: #f8f9fa;
    padding: 0.5rem;
    border-radius: 4px;
    font-family: monospace;
    font-size: 0.9rem;
}

.area-title {
    font-weight: bold;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #ddd;
    margin-bottom: 0.5rem;
}

.request-log, .response-log, .error-log {
    margin-bottom: 0.5rem;
    padding: 0.5rem;
    border-radius: 4px;
    background: #fff;
}

.request-log {
    border-left: 3px solid #3498db;
}

.response-log {
    border-left: 3px solid #2ecc71;
    margin-left: 1rem;
}

.error-log {
    border-left: 3px solid #e74c3c;
}

.request-url {
    color: #3498db;
    font-weight: bold;
}

.request-body, .response-body {
    word-break: break-all;
    white-space: pre-wrap;
}

.error-details {
    color: #e74c3c;
}
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

<script src="https://api.lovense-api.com/cam-extension/static/js-sdk/broadcast.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const connectionStatus = document.getElementById('connectionStatus');
    const apiResponse = document.getElementById('apiResponse').querySelector('code');
    let currentStream = null;
    let camExtension = null;

    // Initialize CamExtension - keep structure for future implementation
    const initCamExtension = () => {
        camExtension = new CamExtension("test:deltatest", "testmodel");
        
        const readyCallback = function(ce) {
            console.log("CamExtension ready");
            connectionStatus.textContent = 'Connected';
            connectionStatus.classList.add('connected');
        }

        // Add postMessage listener
        camExtension.on("postMessage", (message) => {
            const chatMessages = document.getElementById('chatMessages');
            const requestMessages = document.getElementById('requestMessages');
            const timestamp = getTimeStamp();
            
            // Display in chat messages
            chatMessages.innerHTML += `<div><span class="timestamp">[${timestamp}]</span> <span class="prefix-testmodel">testModel:</span><span class="message-content">${message}</span></div>`;
            
            // Display in request/response log
            requestMessages.innerHTML += `
                <div class="request-log">
                    <div class="timestamp">[${timestamp}]</div>
                    <div class="request-details">
                        <div class="request-url">EVENT postMessage</div>
                        <div class="request-body">Message: ${JSON.stringify(message)}</div>
                    </div>
                </div>`;
            
            requestMessages.scrollTop = requestMessages.scrollHeight;
        });

        // Add toy status change listener
        camExtension.on("toyStatusChange", (data) => {
            const eventMessages = document.getElementById('eventMessages');
            eventMessages.innerHTML += `<div><span class="timestamp">[${getTimeStamp()}]</span> <span class="prefix-event">toyStatusChange:</span><span class="message-content">${JSON.stringify(data)}</span></div><div class="event-spacer"></div>`;
            eventMessages.scrollTop = eventMessages.scrollHeight;
        });

        // Add tip queue change listener
        camExtension.on("tipQueueChange", (data) => {
            const eventMessages = document.getElementById('eventMessages');
            eventMessages.innerHTML += `<div><span class="timestamp">[${getTimeStamp()}]</span> <span class="prefix-event">tipQueueChange:</span><span class="message-content">${JSON.stringify(data)}</span></div><div class="event-spacer"></div>`;
            eventMessages.scrollTop = eventMessages.scrollHeight;
        });

        // Add settings change listener
        camExtension.on("settingsChange", (data) => {
            const eventMessages = document.getElementById('eventMessages');
            eventMessages.innerHTML += `<div><span class="timestamp">[${getTimeStamp()}]</span> <span class="prefix-event">settingsChange:</span><span class="message-content">${JSON.stringify(data)}</span></div><div class="event-spacer"></div>`;
            eventMessages.scrollTop = eventMessages.scrollHeight;
        });

        camExtension.on("ready", readyCallback);
    };

    // Start Test
    document.getElementById('startTest').addEventListener('click', async () => {
        try {
            // Keep the initialization call for future implementation
            initCamExtension();
            
            connectionStatus.textContent = 'Connected';
            connectionStatus.classList.add('connected');
        } catch (error) {
            console.error('Connection error:', error);
            connectionStatus.textContent = 'Error: ' + (error.message || 'Failed to connect');
            connectionStatus.classList.remove('connected');
            connectionStatus.classList.add('error');
            
            // Display error in API response area
            apiResponse.textContent = `Connection Error: ${error.message || 'Failed to connect to Cam Extension. Please make sure the extension is installed and enabled.'}`;
        }
    });

    // Stop Test
    document.getElementById('stopTest').addEventListener('click', async () => {
        try {
            connectionStatus.textContent = 'Disconnected';
            connectionStatus.classList.remove('connected');
            
            // Remove video-related code
            camExtension = null;
        } catch (error) {
            console.error('Stop test error:', error);
        }
    });

    // Chat Functions
    document.getElementById('sendMessage').addEventListener('click', async () => {
        const message = document.getElementById('messageInput').value;
        if (message) {
            const chatMessages = document.getElementById('chatMessages');
            const requestMessages = document.getElementById('requestMessages');
            const timestamp = getTimeStamp();
            
            // Display chat message
            chatMessages.innerHTML += `<div><span class="timestamp">[${timestamp}]</span> <span class="prefix-testuser">testUser:</span><span class="message-content">${message}</span></div>`;
            
            if (camExtension) {
                try {
                    // Display request details
                    const requestBody = {
                        username: "testUser",
                        message: message
                    };
                    requestMessages.innerHTML += `
                        <div class="request-log">
                            <div class="timestamp">[${timestamp}]</div>
                            <div class="request-details">
                                <div class="request-url">POST /receiveMessage</div>
                                <div class="request-body">Request: ${JSON.stringify(requestBody)}</div>
                            </div>
                        </div>`;

                    // Send message and capture response
                    const response = await camExtension.receiveMessage("testUser", message);
                    
                    // Display response
                    requestMessages.innerHTML += `
                        <div class="response-log">
                            <div class="timestamp">[${timestamp}]</div>
                            <div class="response-details">
                                <div class="response-body">Response: ${JSON.stringify(response || 'Success')}</div>
                            </div>
                        </div>`;
                } catch (error) {
                    requestMessages.innerHTML += `
                        <div class="error-log">
                            <div class="timestamp">[${timestamp}]</div>
                            <div class="error-details">Error: ${error.message}</div>
                        </div>`;
                }
            }
            
            document.getElementById('messageInput').value = '';
            requestMessages.scrollTop = requestMessages.scrollHeight;
        }
    });

    // Tips Function
    document.getElementById('sendTip').addEventListener('click', async () => {
        const tipAmount = document.getElementById('tipAmount').value;
        if (tipAmount && tipAmount > 0) {
            const chatMessages = document.getElementById('chatMessages');
            const requestMessages = document.getElementById('requestMessages');
            const timestamp = getTimeStamp();
            
            chatMessages.innerHTML += `<div><span class="timestamp">[${timestamp}]</span> <span class="tip-message">Tip sent: ${tipAmount} tokens</span></div>`;
            
            if (camExtension) {
                try {
                    // Display request details
                    const requestBody = {
                        amount: parseInt(tipAmount),
                        username: "testTipper"
                    };
                    requestMessages.innerHTML += `
                        <div class="request-log">
                            <div class="timestamp">[${timestamp}]</div>
                            <div class="request-details">
                                <div class="request-url">POST /receiveTip</div>
                                <div class="request-body">Request: ${JSON.stringify(requestBody)}</div>
                            </div>
                        </div>`;

                    // Send tip and capture response
                    const response = await camExtension.receiveTip(parseInt(tipAmount), "testTipper");
                    
                    // Display response
                    requestMessages.innerHTML += `
                        <div class="response-log">
                            <div class="timestamp">[${timestamp}]</div>
                            <div class="response-details">
                                <div class="response-body">Response: ${JSON.stringify(response || 'Success')}</div>
                            </div>
                        </div>`;
                } catch (error) {
                    requestMessages.innerHTML += `
                        <div class="error-log">
                            <div class="timestamp">[${timestamp}]</div>
                            <div class="error-details">Error: ${error.message}</div>
                        </div>`;
                }
            }
            
            document.getElementById('tipAmount').value = '';
            requestMessages.scrollTop = requestMessages.scrollHeight;
        }
    });

    // API Test Functions
    document.getElementById('getSettings').addEventListener('click', async () => {
        try {
            if (camExtension) {
                const data = await camExtension.getSettings();
                apiResponse.textContent = JSON.stringify(data, null, 2);
            } else {
                apiResponse.textContent = 'Error: Please start test first';
            }
        } catch (error) {
            apiResponse.textContent = `Error: ${error.message}`;
        }
    });

    document.getElementById('getToyStatus').addEventListener('click', async () => {
        try {
            if (camExtension) {
                const data = await camExtension.getToyStatus();
                apiResponse.textContent = JSON.stringify(data, null, 2);
            } else {
                apiResponse.textContent = 'Error: Please start test first';
            }
        } catch (error) {
            apiResponse.textContent = `Error: ${error.message}`;
        }
    });

    document.getElementById('getVersion').addEventListener('click', async () => {
        try {
            if (camExtension) {
                const data = await camExtension.getCamVersion();
                apiResponse.textContent = JSON.stringify(data, null, 2);
            } else {
                apiResponse.textContent = 'Error: Please start test first';
            }
        } catch (error) {
            apiResponse.textContent = `Error: ${error.message}`;
        }
    });

    // Add these keyboard event listeners in the DOMContentLoaded function
    // Message input Enter key handler
    document.getElementById('messageInput').addEventListener('keypress', (event) => {
        if (event.key === 'Enter') {
            document.getElementById('sendMessage').click();
        }
    });

    // Tip amount Enter key handler
    document.getElementById('tipAmount').addEventListener('keypress', (event) => {
        if (event.key === 'Enter') {
            document.getElementById('sendTip').click();
        }
    });

    // Add keyboard shortcuts for all buttons
    document.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
            // Get the currently focused element
            const focused = document.activeElement;
            if (focused.tagName === 'BUTTON') {
                focused.click();
            }
        }
    });
});

function getTimeStamp() {
    const now = new Date();
    return now.toLocaleTimeString('en-US', { hour12: false });
}
</script> 