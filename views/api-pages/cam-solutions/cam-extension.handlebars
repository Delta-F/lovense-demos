<div class="api-documentation">
    <h1>Cam Extension for Chrome</h1>
    <div class="api-reference">
        <p>This implementation is based on the <a href="https://developer.lovense.com/docs/cam-solutions/cam-extension-for-chrome.html" target="_blank">Official Lovense Cam Extension Documentation</a>.</p>
    </div>
    <div class="content">
        <section class="quick-start test-section">
            <div class="steps">
                <h2>Getting Started</h2>
                <div class="current-site">
                    <span class="section-label"><i class="fas fa-globe"></i> Current Site:</span>
                    <span class="site-name">test:deltatest</span>
                </div>
                <ol>
                    <li>Install <a href="https://www.lovense.com/cam-model/extension" target="_blank">Cam Extension</a> from Chrome or <a href="https://www.lovense.com/cam-model/download" target="_blank">Stream Master</a> For PC Desktop</li>
                    <li>Enable the extension in browser</li>
                    <li>Add Camsite Name in Cam Extension</li>
                    <li>Click Start Test Button to Initialize (Refresh browser if not connected)</li>
                </ol>
            </div>

            <div class="compact-info">
                <div class="info-line">
                    <span class="section-label"><i class="fas fa-laptop"></i> System Requirements:</span>
                    <div class="req-items">
                        <span class="req-item"><i class="fab fa-chrome"></i> Chrome For PC</span>
                        <span class="req-item"><i class="fab fa-windows"></i> Windows</span>
                        <span class="req-item"><i class="fab fa-apple"></i> Mac</span>
                    </div>
                </div>
            </div>
        </section>

        <section class="test-controls">
            <h2>Test Controls</h2>
            <p class="test-description">Click "Start Test" to initialize Cam Extension integration. The widget will appear after successful connection.</p>
            <button id="startTest" class="btn btn-primary">Start Test</button>
            <button id="stopTest" class="btn btn-danger">Stop Test</button>
            <div id="connectionStatus" class="status-badge">Disconnected</div>
        </section>

        <section class="video-test">
            <h2>Video Input Test</h2>
            <div class="video-container">
                <video id="localVideo" autoplay playsinline></video>
                <div class="video-controls">
                    <button id="startVideo" class="btn">Start Video</button>
                    <button id="stopVideo" class="btn">Stop Video</button>
                </div>
            </div>
        </section>

        <section class="chat-test">
            <h2>Chat Room Test</h2>
            <div class="chat-container">
                <div id="chatMessages" class="messages-area"></div>
                <div class="input-area">
                    <input type="text" id="messageInput" placeholder="Type your message...">
                    <button id="sendMessage" class="btn">Send Message</button>
                    <input type="number" id="tipAmount" placeholder="Tip amount" min="1" class="tip-input">
                    <button id="sendTip" class="btn btn-success">Send Tip</button>
                </div>
            </div>
        </section>

        <section class="event-messages">
            <h2>Event Messages</h2>
            <p class="event-description">Events: toyStatusChange, tipQueueChange, settingsChange</p>
            <div class="event-container">
                <div id="eventMessages" class="messages-area"></div>
            </div>
        </section>

        <section class="api-tests">
            <h2>API Test Functions</h2>
            <div class="test-buttons">
                <button id="getSettings" class="btn">Get Settings</button>
                <button id="getToyStatus" class="btn">Get Toy Status</button>
                <button id="getVersion" class="btn">Get Version</button>
            </div>
            <div id="apiResponse" class="response-area">
                <pre><code>Response will appear here...</code></pre>
            </div>
        </section>
    </div>
</div>

<style>
.api-documentation {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
}

.content {
    width: 100%;
    max-width: 800px;
}

.content section {
    margin-bottom: 30px;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 5px;
    width: 100%;
}

.status-badge {
    display: inline-block;
    padding: 5px 10px;
    border-radius: 15px;
    margin-left: 10px;
    background-color: #ff4444;
    color: white;
}

.status-badge.connected {
    background-color: #00C851;
}

.video-container {
    max-width: 640px;
    margin: 20px 0;
}

#localVideo {
    width: 100%;
    background: #f0f0f0;
    border-radius: 5px;
}

.chat-container {
    border: 1px solid #ddd;
    border-radius: 5px;
    height: 400px;
    display: flex;
    flex-direction: column;
}

.messages-area {
    flex: 1;
    overflow-y: auto;
    padding: 10px;
    background: #f9f9f9;
}

.input-area {
    padding: 10px;
    border-top: 1px solid #ddd;
    display: flex;
    gap: 10px;
}

#messageInput {
    flex: 1;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.btn {
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    background: #007bff;
    color: white;
}

.btn:hover {
    opacity: 0.9;
}

.btn-success {
    background: #00C851;
}

.response-area {
    margin-top: 20px;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 5px;
    overflow-x: auto;
}

.test-buttons {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
}

.btn-danger {
    background: #ff4444;
}

.tip-input {
    width: 100px;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.compatibility {
    background: #f8f9fa;
}

.compatibility-items {
    display: flex;
    gap: 20px;
    margin-top: 15px;
}

.comp-item {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 10px 20px;
    background: white;
    border-radius: 5px;
    border: 1px solid #ddd;
}

.comp-item i {
    font-size: 24px;
    color: #007bff;
}

.download-buttons {
    display: flex;
    gap: 20px;
    margin-top: 15px;
}

.download-btn {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 12px 24px;
    border-radius: 5px;
    text-decoration: none;
    color: white;
    transition: opacity 0.2s;
}

.download-btn:hover {
    opacity: 0.9;
    color: white;
}

.download-btn.cam-ext {
    background: #28a745;
}

.download-btn.stream-master {
    background: #17a2b8;
}

.download-btn i {
    font-size: 18px;
}

.quick-start h3 {
    margin: 0 0 15px 0;
    font-size: 1.1em;
    color: #333;
}

.steps {
    margin-bottom: 20px;
}

.steps ol {
    margin: 0;
    padding-left: 20px;
}

.steps li {
    margin-bottom: 5px;
}

.compact-info {
    display: flex;
    flex-direction: column;
    gap: 8px;
    margin-top: 15px;
    font-size: 0.9em;
}

.info-line {
    display: flex;
    align-items: center;
    gap: 10px;
}

.section-label {
    color: #666;
    font-weight: 500;
    white-space: nowrap;
}

.section-label i {
    margin-right: 5px;
}

.download-buttons {
    display: flex;
    gap: 10px;
}

.compact-btn {
    display: inline-flex;
    align-items: center;
    gap: 5px;
    padding: 4px 12px;
    border-radius: 4px;
    font-size: 0.9em;
    text-decoration: none;
    color: white;
    transition: opacity 0.2s;
}

.compact-btn:hover {
    opacity: 0.9;
    color: white;
    text-decoration: none;
}

.compact-btn.cam-ext {
    background: #28a745;
}

.compact-btn.stream-master {
    background: #17a2b8;
}

.req-items {
    display: flex;
    gap: 15px;
    align-items: center;
}

.req-item {
    display: inline-flex;
    align-items: center;
    gap: 5px;
    color: #666;
}

.req-item i {
    font-size: 1.1em;
}

.test-description {
    color: #666;
    margin-bottom: 15px;
    font-size: 0.9em;
    font-style: italic;
}

.system-message {
    color: #666;
    font-style: italic;
    padding: 5px 0;
}

.event-container {
    border: 1px solid #ddd;
    border-radius: 5px;
    height: 300px;
    display: flex;
    flex-direction: column;
}

.event-description {
    color: #666;
    margin-bottom: 15px;
    font-size: 0.9em;
    font-style: italic;
}

.prefix-testuser {
    color: #0a8539;
    font-weight: 500;
}

.prefix-testmodel {
    color: #f32010;
    font-weight: 500;
}

.prefix-event {
    color: #2d7af6;
    font-weight: 500;
}

.message-content {
    margin-left: 5px;
    color: #333;
}

.tip-message {
    color: #17a2b8;
    font-weight: 500;
    font-style: italic;
}

.current-site {
    margin-bottom: 15px;
    padding: 8px;
    background: #f8f9fa;
    border-radius: 4px;
    display: flex;
    align-items: center;
    gap: 10px;
}

.site-name {
    color: #28a745;
    font-weight: 500;
}

.api-reference {
    background: #f8f9fa;
    border-left: 4px solid #3498db;
    padding: 1rem;
    margin-bottom: 2rem;
    border-radius: 0 4px 4px 0;
}

.api-reference p {
    margin: 0;
    font-size: 0.95rem;
    color: #2c3e50;
}

.api-reference a {
    color: #3498db;
    text-decoration: none;
    font-weight: 500;
}

.api-reference a:hover {
    text-decoration: underline;
}

@media (prefers-color-scheme: dark) {
    .api-reference {
        background: #2d2d2d;
        border-left-color: #3498db;
    }

    .api-reference p {
        color: #fff;
    }

    .api-reference a {
        color: #5dade2;
    }
}

.timestamp {
    color: #666;
    font-size: 0.9em;
    margin-right: 5px;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const connectionStatus = document.getElementById('connectionStatus');
    const apiResponse = document.getElementById('apiResponse').querySelector('code');
    let currentStream = null;
    let camExtension = null;

    // Initialize CamExtension - keep structure for future implementation
    const initCamExtension = () => {
        camExtension = new CamExtension("test:deltatest", "testmodel");
        
        const readyCallback = function(ce) {
            console.log("CamExtension ready");
            connectionStatus.textContent = 'Connected';
            connectionStatus.classList.add('connected');
        }

        // Add postMessage listener
        camExtension.on("postMessage", (message) => {
            const chatMessages = document.getElementById('chatMessages');
            chatMessages.innerHTML += `<div><span class="timestamp">[${getTimeStamp()}]</span> <span class="prefix-testmodel">testModel:</span><span class="message-content">${message}</span></div>`;
        });

        // Add toy status change listener
        camExtension.on("toyStatusChange", (data) => {
            const eventMessages = document.getElementById('eventMessages');
            eventMessages.innerHTML += `<div><span class="timestamp">[${getTimeStamp()}]</span> <span class="prefix-event">toyStatusChange:</span><span class="message-content">${JSON.stringify(data)}</span></div><div class="event-spacer"></div>`;
            eventMessages.scrollTop = eventMessages.scrollHeight;
        });

        // Add tip queue change listener
        camExtension.on("tipQueueChange", (data) => {
            const eventMessages = document.getElementById('eventMessages');
            eventMessages.innerHTML += `<div><span class="timestamp">[${getTimeStamp()}]</span> <span class="prefix-event">tipQueueChange:</span><span class="message-content">${JSON.stringify(data)}</span></div><div class="event-spacer"></div>`;
            eventMessages.scrollTop = eventMessages.scrollHeight;
        });

        // Add settings change listener
        camExtension.on("settingsChange", (data) => {
            const eventMessages = document.getElementById('eventMessages');
            eventMessages.innerHTML += `<div><span class="timestamp">[${getTimeStamp()}]</span> <span class="prefix-event">settingsChange:</span><span class="message-content">${JSON.stringify(data)}</span></div><div class="event-spacer"></div>`;
            eventMessages.scrollTop = eventMessages.scrollHeight;
        });

        camExtension.on("ready", readyCallback);
    };

    // Start Test
    document.getElementById('startTest').addEventListener('click', async () => {
        try {
            // Keep the initialization call for future implementation
            initCamExtension();
            
            connectionStatus.textContent = 'Connected';
            connectionStatus.classList.add('connected');
        } catch (error) {
            connectionStatus.textContent = 'Error';
            connectionStatus.classList.remove('connected');
        }
    });

    // Stop Test
    document.getElementById('stopTest').addEventListener('click', async () => {
        try {
            connectionStatus.textContent = 'Disconnected';
            connectionStatus.classList.remove('connected');
            
            if (currentStream) {
                stopVideoStream();
            }
            
            // Reset camExtension for future implementation
            camExtension = null;
        } catch (error) {
            console.error('Stop test error:', error);
        }
    });

    // Video Controls
    document.getElementById('startVideo').addEventListener('click', async () => {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ video: true });
            currentStream = stream;
            document.getElementById('localVideo').srcObject = stream;
        } catch (error) {
            console.error('Video error:', error);
        }
    });

    document.getElementById('stopVideo').addEventListener('click', () => {
        stopVideoStream();
    });

    function stopVideoStream() {
        if (currentStream) {
            currentStream.getTracks().forEach(track => track.stop());
            document.getElementById('localVideo').srcObject = null;
            currentStream = null;
        }
    }

    // Chat Functions
    document.getElementById('sendMessage').addEventListener('click', () => {
        const message = document.getElementById('messageInput').value;
        if (message) {
            const chatMessages = document.getElementById('chatMessages');
            chatMessages.innerHTML += `<div><span class="timestamp">[${getTimeStamp()}]</span> <span class="prefix-testuser">testUser:</span><span class="message-content">${message}</span></div>`;
            
            if (camExtension) {
                camExtension.receiveMessage("testUser", message);
            }
            
            document.getElementById('messageInput').value = '';
        }
    });

    // Tips Function
    document.getElementById('sendTip').addEventListener('click', () => {
        const tipAmount = document.getElementById('tipAmount').value;
        if (tipAmount && tipAmount > 0) {
            const chatMessages = document.getElementById('chatMessages');
            chatMessages.innerHTML += `<div><span class="timestamp">[${getTimeStamp()}]</span> <span class="tip-message">Tip sent: ${tipAmount} tokens</span></div>`;
            
            if (camExtension) {
                camExtension.receiveTip(parseInt(tipAmount), "testTipper");
            }
            
            document.getElementById('tipAmount').value = '';
        }
    });

    // API Test Functions
    document.getElementById('getSettings').addEventListener('click', async () => {
        try {
            if (camExtension) {
                const data = await camExtension.getSettings();
                apiResponse.textContent = JSON.stringify(data, null, 2);
            } else {
                apiResponse.textContent = 'Error: Please start test first';
            }
        } catch (error) {
            apiResponse.textContent = `Error: ${error.message}`;
        }
    });

    document.getElementById('getToyStatus').addEventListener('click', async () => {
        try {
            if (camExtension) {
                const data = await camExtension.getToyStatus();
                apiResponse.textContent = JSON.stringify(data, null, 2);
            } else {
                apiResponse.textContent = 'Error: Please start test first';
            }
        } catch (error) {
            apiResponse.textContent = `Error: ${error.message}`;
        }
    });

    document.getElementById('getVersion').addEventListener('click', async () => {
        try {
            if (camExtension) {
                const data = await camExtension.getCamVersion();
                apiResponse.textContent = JSON.stringify(data, null, 2);
            } else {
                apiResponse.textContent = 'Error: Please start test first';
            }
        } catch (error) {
            apiResponse.textContent = `Error: ${error.message}`;
        }
    });

    // Add these keyboard event listeners in the DOMContentLoaded function
    // Message input Enter key handler
    document.getElementById('messageInput').addEventListener('keypress', (event) => {
        if (event.key === 'Enter') {
            document.getElementById('sendMessage').click();
        }
    });

    // Tip amount Enter key handler
    document.getElementById('tipAmount').addEventListener('keypress', (event) => {
        if (event.key === 'Enter') {
            document.getElementById('sendTip').click();
        }
    });

    // Add keyboard shortcuts for all buttons
    document.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
            // Get the currently focused element
            const focused = document.activeElement;
            if (focused.tagName === 'BUTTON') {
                focused.click();
            }
        }
    });
});

function getTimeStamp() {
    const now = new Date();
    return now.toLocaleTimeString('en-US', { hour12: false });
}
</script> 