<div class="api-documentation">
    <h1>Media Sync - Pattern Editor</h1>

    <div class="api-reference">
        <p>This implementation is based on <a href="https://developer.lovense.com/docs/media-sync.html#sync-with-lovense-toys" target="_blank">Lovense Pattern Editor Documentation</a></p>
    </div>

    <!-- Step 1: Get CToken -->
    <div class="test-section">
        <h3>Step 1: Get CToken</h3>
        <div class="ctoken-container">
            <p class="info-text">Get ctoken for pattern editor initialization.</p>
            <div class="ctoken-controls">
                <div class="input-row">
                    <div class="input-group compact">
                        <label>User ID:</label>
                        <input type="text" id="userId" placeholder="Enter User ID" class="form-control half-width" style="margin-right:1rem;">
                        <label>Developer Token:</label>
                        <input type="text" id="developerToken" placeholder="Enter Developer Token" class="form-control half-width">
                        <button onclick="getCToken()" class="btn btn-primary" style="margin-left:1rem;">Get CToken</button>
                    </div>
                </div>
            </div>
            <div class="api-test-results">
                <div style="display:flex;align-items:center;gap:2rem;">
                    <div id="ctokenRequestUrl" class="request-url">URL: </div>
                </div>
                <div class="response-box">
                    <div class="timestamp" id="ctokenResponseTime">Timestamp: -</div>
                    <div id="ctokenResponse" class="data-box">Response will appear here...</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Step 2: Initialize JavaScript -->
    <div class="test-section">
        <h3>Step 2: Initialize SDK</h3>
        <div class="js-init-container">
            <div class="code-row">
                <div class="code-block">
                    <code>&lt;script src=&quot;https://cdn.lovense-api.com/peditor-v2/pattern-sdk.js&quot;&gt;&lt;/script&gt;<br>const lovensePattern = new LovensePattern()</code>
                </div>
                <button onclick="initializePatternSDK()" class="btn btn-primary" style="margin-left:1rem;">Initialize SDK</button>
            </div>
            <div id="jsInitStatus" class="status-indicator" style="margin-top:0.5rem;">Not Initialized</div>
        </div>
    </div>

    <!-- Step 3: Pattern & Sync Configuration -->
    <div class="test-section">
        <h3>Step 3: Pattern Configuration</h3>
        <div class="sync-container">
            <p class="info-text">Configure pattern data. Choose Pattern Link or Pattern Data.</p>
            
            <!-- Pattern Configuration Cards -->
            <div class="pattern-cards">
                <div class="pattern-card" id="patternLinkCard">
                    <div class="card-header">
                        <h4>üìé Pattern Link (URL)</h4>
                        <p>Use a remote pattern file</p>
                    </div>
                    <div class="card-content">
                        <input type="url" id="patternLink" class="form-control" placeholder="https://example.com/pattern.funscript or https://example.com/pattern.json">
                    </div>
                </div>
                
                <div class="pattern-card active" id="patternDataCard">
                    <div class="card-header">
                        <h4>üìù Pattern Data (JSON)</h4>
                        <p>Enter pattern data directly</p>
                    </div>
                    <div class="card-content">
                        <div class="pattern-data-container">
                            <div class="pattern-data-header">
                                <span class="pattern-label">Pattern Data:</span>
                                <button type="button" class="btn btn-secondary btn-sm" onclick="fillFunScriptExample()">Load 1-min Pattern Sample</button>
                            </div>
                            <textarea id="patternData" class="form-control pattern-textarea" rows="8" placeholder='// FunScript format:
[
  {"pos": 50, "at": 1000},
  {"pos": 80, "at": 2000},
  {"pos": 20, "at": 3000}
]

// Lovense format:
[
  {"v": 10, "t": 1000},
  {"v": 20, "t": 2000},
  {"v": 5, "t": 3000}
]'></textarea>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="sync-controls">
                <div class="input-row">
                    <div class="input-group compact">
                        <label>Supported App:</label>
                        <div class="checkbox-group">
                            <label class="checkbox-label">
                                <input type="checkbox" id="app1" onclick="selectSupportedApp('app1')"> Lovense Remote
                            </label>
                            <label class="checkbox-label">
                                <input type="checkbox" id="app2" onclick="selectSupportedApp('app2')"> VibeMate
                            </label>
                            <label class="checkbox-label">
                                <input type="checkbox" id="app3" onclick="selectSupportedApp('app3')" checked> Both
                            </label>
                        </div>
                    </div>
                    <button onclick="testSync()" class="btn btn-primary">Test Sync</button>
                    <button onclick="clearSync()" class="btn btn-secondary">Clear</button>
                </div>
            </div>
            
            <!-- API Test Results -->
            <div class="api-test-results">
                <div class="request-box">
                    <h4>Sync Request:</h4>
                    <div class="timestamp" id="syncRequestTime">Timestamp: -</div>
                    <div id="syncRequest" class="data-box scrollable-request">Request will appear here...</div>
                </div>
                <div class="response-box">
                    <h4>Sync Response:</h4>
                    <div class="timestamp" id="syncResponseTime">Timestamp: -</div>
                    <div id="syncResponse" class="data-box">Response will appear here...</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Step 4: Media Sample & Sync Test -->
    <div class="test-section">
        <h3>Step 4: Media Sample & Sync Test</h3>
        <div class="media-container">
            <p class="info-text">Choose media file and test sync.</p>
            <div class="media-inputs">
                <div class="input-row">
                    <div class="input-group compact">
                        <label>Media Type:</label>
                        <div class="media-tabs">
                            <button id="audioTab" class="media-tab active" onclick="switchMediaTab('audio')">Audio</button>
                            <button id="videoTab" class="media-tab" onclick="switchMediaTab('video')">Video</button>
                        </div>
                    </div>
                    <div class="input-group compact">
                        <label>Media ID:</label>
                        <span id="mediaIdDisplay" style="font-weight:500;">test_media_001</span>
                    </div>
                </div>
            </div>
            <div id="mediaPreview" class="media-preview">
                <div id="audioPreview" class="media-example" style="display: block;">
                    <h5>Audio Example: Sibbydex - Draining the Power of a Saiyan</h5>
                    <audio id="audioElementUnique" controls class="enhanced-audio-player">
                        <source src="https://assets.shibbydex.com/audio/d4e5bb34-3673-40c4-ad5a-17e4da998d5a.mp3" type="audio/mpeg">
                        Your browser does not support the audio tag.
                    </audio>
                </div>
                <div id="videoPreview" class="media-example" style="display: none;">
                    <h5>Video Example: Lovense Random Video</h5>
                    <video id="videoElementUnique" controls style="max-width: 100%; height: auto;">
                        <source src="https://cdn.lovense.com/UploadFiles/peditor/video/yukari001-720p.mp4" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                </div>
            </div>
            <!-- Lovense Sync Button Area with dashed border -->
            <div class="sync-button-area">
                <div class="sync-button-container">
                    <div id="lovense-sync-btn"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.lovense-api.com/peditor-v2/pattern-sdk.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.0/axios.min.js"></script>

<script>
let lovensePattern = null;
let currentCToken = null;
let syncConfigured = false;
let currentMediaType = 'audio';

function switchMediaTab(type) {
    const audioTab = document.getElementById('audioTab');
    const videoTab = document.getElementById('videoTab');
    const audioPreview = document.getElementById('audioPreview');
    const videoPreview = document.getElementById('videoPreview');
    const audioEl = document.getElementById('audioElementUnique');
    const videoEl = document.getElementById('videoElementUnique');
    const mediaIdDisplay = document.getElementById('mediaIdDisplay');
    
    if (type === 'audio') {
        audioTab.classList.add('active');
        videoTab.classList.remove('active');
        audioPreview.style.display = 'block';
        videoPreview.style.display = 'none';
        if (videoEl) videoEl.pause();
        mediaIdDisplay.textContent = 'audio_sample_001';
        mediaIdDisplay.className = 'audio-media-id';
    } else {
        audioTab.classList.remove('active');
        videoTab.classList.add('active');
        audioPreview.style.display = 'none';
        videoPreview.style.display = 'block';
        if (audioEl) audioEl.pause();
        mediaIdDisplay.textContent = 'video_sample_001';
        mediaIdDisplay.className = 'video-media-id';
    }
    
    // Reset sync configuration when media type changes
    if (currentMediaType !== type && syncConfigured) {
        syncConfigured = false;
        clearSync();
        showMediaChangeWarning();
    }
    currentMediaType = type;
}

// Step 1: Get CToken
async function getCToken() {
    const userId = document.getElementById('userId').value;
    const developerToken = document.getElementById('developerToken').value;
    
    if (!userId || !developerToken) {
        setResponse('ctokenResponse', 'Error: Please enter both User ID and Developer Token');
        return;
    }

    try {
        const url = `https://api.lovense-api.com/api/media/pattern/user/ctoken?userId=${encodeURIComponent(userId)}&developerToken=${encodeURIComponent(developerToken)}`;
        
        document.getElementById('ctokenRequestUrl').innerHTML = `URL: ${url}`;
        const response = await axios.get(url);
        
        document.getElementById('ctokenResponseTime').innerHTML = `Timestamp: ${getTimestamp()}`;
        setResponse('ctokenResponse', JSON.stringify(response.data, null, 2) + ((response.data && response.data.code === 0) ? '' : '\n‚ùå Failed to get CToken: ' + (response.data.message || 'Unknown error')));
        
        if (response.data && response.data.code === 0) {
            currentCToken = response.data.data.ctoken;
        }
    } catch (error) {
        document.getElementById('ctokenResponseTime').innerHTML = `Timestamp: ${getTimestamp()}`;
        setResponse('ctokenResponse', `Error: ${error.message}`);
    }
}

// Step 2: Initialize JavaScript
function initializePatternSDK() {
    try {
        if (typeof LovensePattern === 'undefined') {
            throw new Error('LovensePattern SDK not loaded');
        }
        if (!lovensePattern) {
            lovensePattern = new LovensePattern();
        }
        setResponse('jsInitStatus', 'SDK Initialized');
        document.getElementById('jsInitStatus').className = 'status-indicator success';
    } catch (error) {
        setResponse('jsInitStatus', '‚ùå Initialization Failed: ' + error.message);
        document.getElementById('jsInitStatus').className = 'status-indicator error';
    }
}

async function testSync() {
    if (!lovensePattern) {
        setResponse('syncResponse', 'Error: Please initialize the Pattern SDK first');
        return;
    }
    if (!currentCToken) {
        setResponse('syncResponse', 'Error: Please get a CToken first');
        return;
    }
    try {
        let mediaEl, duration;
        if (document.getElementById('videoTab').classList.contains('active')) {
            mediaEl = document.getElementById('videoElementUnique');
        } else {
            mediaEl = document.getElementById('audioElementUnique');
        }
        duration = mediaEl && !isNaN(mediaEl.duration) && mediaEl.duration > 0 ? Math.round(mediaEl.duration * 1000) : 60000;
        let patternDataInput = document.getElementById('patternData').value;
        if (!patternDataInput.trim()) {
            throw new Error('Please enter pattern data or use the "Load Example" button');
        }
        let patternData;
        try {
            patternData = JSON.parse(patternDataInput);
        } catch (e) {
            throw new Error('Invalid JSON in pattern data');
        }
        let supportedApp = 3;
        if (document.getElementById('app1').checked) supportedApp = 1;
        else if (document.getElementById('app2').checked) supportedApp = 2;
        else if (document.getElementById('app3').checked) supportedApp = 3;
        const syncData = {
            ctoken: currentCToken,
            mediaId: document.getElementById('mediaIdDisplay').textContent,
            duration: duration,
            videoEl: mediaEl,
            patternData: patternData,
            btnId: 'lovense-sync-btn',
            supportedApp: supportedApp,
            syncButtonText: 'Sync with Lovense Toy',
            syncedButtonText: 'Connected to Lovense Toy'
        };
        console.log('Lovense sync data:', JSON.stringify(syncData, null, 2));
        document.getElementById('syncRequestTime').innerHTML = `Timestamp: ${getTimestamp()}`;
        setResponse('syncRequest', JSON.stringify(syncData, null, 2));
        document.getElementById('lovense-sync-btn').innerHTML = '';
        lovensePattern.sync(syncData);
        syncConfigured = true;
        document.getElementById('syncResponseTime').innerHTML = `Timestamp: ${getTimestamp()}`;
        setResponse('syncResponse', '‚úÖ Sync button generated successfully!\n\nüì± Go to Step 4 and click the sync button to connect with your Lovense toys.\n\nüí° Make sure your toys are connected to Lovense Remote app first.');
    } catch (error) {
        document.getElementById('syncResponseTime').innerHTML = `Timestamp: ${getTimestamp()}`;
        setResponse('syncResponse', `Error: ${error.message}`);
    }
}

function showMediaChangeWarning() {
    const warningDiv = document.createElement('div');
    warningDiv.className = 'media-change-warning';
    warningDiv.innerHTML = `
        <div class="warning-content">
            <span>‚ö†Ô∏è Media type changed! Please click the 'Test Sync' button again, and reconfigure if needed.</span>
            <button onclick="this.parentElement.parentElement.remove()" class="btn-close">√ó</button>
        </div>
    `;
    
    const mediaContainer = document.querySelector('.media-container');
    mediaContainer.insertBefore(warningDiv, mediaContainer.firstChild);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        if (warningDiv.parentElement) {
            warningDiv.remove();
        }
    }, 5000);
}

function getTimestamp() {
    return new Date().toLocaleString('en-US', {
        timeZone: 'Asia/Shanghai',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: false
    });
}

function selectSupportedApp(app) {
    document.getElementById('app1').checked = false;
    document.getElementById('app2').checked = false;
    document.getElementById('app3').checked = false;
    document.getElementById(app).checked = true;
}

function clearSync() {
    setResponse('syncRequest', 'Request will appear here...');
    setResponse('syncResponse', 'Response will appear here...');
    document.getElementById('syncRequestTime').innerHTML = 'Timestamp: -';
    document.getElementById('syncResponseTime').innerHTML = 'Timestamp: -';
    syncConfigured = false;
}

function resetToDefaults() {
    document.getElementById('userId').value = 'deltatest';
    document.getElementById('developerToken').value = 'tf7_SsG7X8qJm5l4gSYzfdLSeaZtlLl8ZaWNOSLt_ScnbUpimwPUIxB5l9TAgNle';
    switchMediaTab('audio');
    selectSupportedApp('app3');
    document.getElementById('patternLink').value = '';
    document.getElementById('patternData').value = '';
    syncConfigured = false;
}

document.addEventListener('DOMContentLoaded', function() {
    resetToDefaults();
    initializePatternCards();
});

// Pattern Card Switching
function initializePatternCards() {
    const patternLinkCard = document.getElementById('patternLinkCard');
    const patternDataCard = document.getElementById('patternDataCard');
    
    patternLinkCard.addEventListener('click', function() {
        switchPatternCard('link');
    });
    
    patternDataCard.addEventListener('click', function() {
        switchPatternCard('data');
    });
}

function switchPatternCard(type) {
    const patternLinkCard = document.getElementById('patternLinkCard');
    const patternDataCard = document.getElementById('patternDataCard');
    const patternLinkInput = document.getElementById('patternLink');
    const patternDataInput = document.getElementById('patternData');
    
    if (type === 'link') {
        patternLinkCard.classList.add('active');
        patternDataCard.classList.remove('active');
        patternLinkInput.focus();
    } else {
        patternDataCard.classList.add('active');
        patternLinkCard.classList.remove('active');
        patternDataInput.focus();
    }
}

function setResponse(id, value) {
    document.getElementById(id).innerHTML = cleanResponseText(value);
}
async function getCToken() {
    const userId = document.getElementById('userId').value;
    const developerToken = document.getElementById('developerToken').value;
    if (!userId || !developerToken) {
        setResponse('ctokenResponse', 'Error: Please enter both User ID and Developer Token');
        return;
    }
    try {
        const url = `https://api.lovense-api.com/api/media/pattern/user/ctoken?userId=${encodeURIComponent(userId)}&developerToken=${encodeURIComponent(developerToken)}`;
        document.getElementById('ctokenRequestUrl').innerHTML = `URL: ${url}`;
        const response = await axios.get(url);
        document.getElementById('ctokenResponseTime').innerHTML = `Timestamp: ${getTimestamp()}`;
        setResponse('ctokenResponse', JSON.stringify(response.data, null, 2) + ((response.data && response.data.code === 0) ? '' : '\n‚ùå Failed to get CToken: ' + (response.data.message || 'Unknown error')));
        if (response.data && response.data.code === 0) {
            currentCToken = response.data.data.ctoken;
        }
    } catch (error) {
        document.getElementById('ctokenResponseTime').innerHTML = `Timestamp: ${getTimestamp()}`;
        setResponse('ctokenResponse', `Error: ${error.message}`);
    }
}

function fillFunScriptExample() {
    document.getElementById('patternData').value = `[
  { "at": 0, "pos": 20 },
  { "at": 3000, "pos": 35 },
  { "at": 6000, "pos": 25 },
  { "at": 9000, "pos": 40 },
  { "at": 12000, "pos": 30 },
  { "at": 15000, "pos": 50 },
  { "at": 18000, "pos": 35 },
  { "at": 21000, "pos": 55 },
  { "at": 24000, "pos": 40 },
  { "at": 27000, "pos": 30 },
  { "at": 30000, "pos": 45 },
  { "at": 33000, "pos": 20 },
  { "at": 36000, "pos": 50 },
  { "at": 39000, "pos": 25 },
  { "at": 42000, "pos": 55 },
  { "at": 45000, "pos": 35 },
  { "at": 48000, "pos": 40 },
  { "at": 51000, "pos": 30 },
  { "at": 54000, "pos": 60 },
  { "at": 57000, "pos": 25 },
  { "at": 60000, "pos": 20 }
]`;
}

function cleanResponseText(text) {
    if (!text) return '';
    return text.replace(/undefined/g, '').trim();
}
</script>

<style>
.api-documentation {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
}

h1 {
    color: #2c3e50;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid #eee;
}

.test-section {
    background: #fff;
    border-radius: 8px;
    padding: 1.5rem;
    margin-bottom: 2rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

h3 {
    color: #34495e;
    margin-bottom: 1rem;
    font-size: 1.2rem;
}

h4 {
    color: #2c3e50;
    margin-bottom: 0.75rem;
    font-size: 1.1rem;
}

h5 {
    color: #2c3e50;
    margin-bottom: 0.5rem;
    font-size: 1rem;
}

.form-control {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    margin-bottom: 1rem;
    font-size: 1rem;
}

.btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9rem;
    font-weight: 500;
    transition: all 0.2s;
    margin-right: 0.5rem;
    margin-bottom: 0.5rem;
}

.btn-primary {
    background: #3498db;
    color: white;
}

.btn-primary:hover {
    background: #2980b9;
}

.btn-secondary {
    background: #95a5a6;
    color: white;
}

.btn-secondary:hover {
    background: #7f8c8d;
}

.data-box {
    background: #f8f9fa;
    border: 1px solid #eee;
    border-radius: 4px;
    padding: 1rem;
    margin-top: 1rem;
    font-family: monospace;
    white-space: pre-wrap;
    font-size: 0.9rem;
}

.code-block {
    background: #f8f9fa;
    border: 1px solid #eee;
    border-radius: 4px;
    padding: 1rem;
    margin: 0.5rem 0;
    font-family: monospace;
    font-size: 0.9rem;
}

.status-indicator {
    padding: 0.5rem 1rem;
    border-radius: 4px;
    font-weight: 500;
    margin-bottom: 1rem;
}

.status-indicator.success {
    background: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.status-indicator.error {
    background: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}

.json-textarea {
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', monospace;
    font-size: 0.9rem;
    line-height: 1.4;
    padding: 1rem;
    resize: vertical;
    white-space: pre;
    tab-size: 2;
}

.media-preview {
    margin: 1rem 0;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 4px;
    border: 1px solid #eee;
}

.media-example {
    text-align: center;
}

.media-example h5 {
    margin-bottom: 1rem;
    color: #2c3e50;
}

.input-group {
    margin-bottom: 1rem;
}

.input-group.compact {
    margin-bottom: 0;
}

.input-group label {
    display: inline-block;
    margin-right: 0.5rem;
    font-weight: 500;
    color: #2c3e50;
    min-width: 80px;
}

.checkbox-group {
    display: flex;
    gap: 1rem;
    align-items: center;
}

.checkbox-label {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    cursor: pointer;
    font-weight: normal;
}

.checkbox-label input[type="checkbox"] {
    margin: 0;
}

.input-row {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap;
}

.input-row .input-group {
    flex: 1;
    min-width: 200px;
    display: flex;
    align-items: center;
}

.input-row .btn {
    margin-bottom: 0;
    align-self: flex-end;
}

.info-text {
    margin: 0.5rem 0;
    color: #666;
    font-style: italic;
}

.request-url {
    font-family: monospace;
    color: #0066cc;
    margin-bottom: 8px;
    padding: 4px 0;
    font-size: 0.9em;
}

.timestamp {
    font-family: monospace;
    color: #666;
    font-size: 0.85em;
    margin-bottom: 8px;
}

.api-test-results {
    margin-top: 1.5rem;
}

.request-box, .response-box {
    margin-bottom: 1rem;
}

.request-box h4, .response-box h4 {
    margin-bottom: 0.5rem;
    color: #2c3e50;
}

.api-reference {
    background: #f8f9fa;
    border-left: 4px solid #3498db;
    padding: 1rem;
    margin-bottom: 2rem;
    border-radius: 0 4px 4px 0;
}

.api-reference p {
    margin: 0;
    font-size: 0.95rem;
    color: #2c3e50;
}

.api-reference a {
    color: #3498db;
    text-decoration: none;
    font-weight: 500;
}

.api-reference a:hover {
    text-decoration: underline;
}

@media (max-width: 768px) {
    .input-row {
        flex-direction: column;
        align-items: stretch;
    }
    
    .input-row .input-group {
        min-width: auto;
    }
    
    .checkbox-group {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
    }
    
    .pattern-cards {
        flex-direction: column;
    }
    
    .pattern-card {
        margin-bottom: 1rem;
    }
}
.code-row { display: flex; align-items: center; gap: 1rem; }
.media-tabs { display: flex; gap: 0.5rem; }
.media-tab { padding: 0.5rem 1.5rem; border: 1px solid #ddd; background: #f8f9fa; cursor: pointer; border-radius: 4px 4px 0 0; font-weight: 500; }
.media-tab.active { background: #3498db; color: #fff; border-bottom: 2px solid #3498db; }
.sync-btn-pink {
    background: linear-gradient(90deg, #ff5fa2 0%, #ff498a 100%);
    color: #fff !important;
    border: none;
    border-radius: 14px;
    font-weight: 500;
    font-size: 1rem;
    padding: 0.75rem 2.5rem;
    box-shadow: 0 2px 8px 0 rgba(255, 89, 138, 0.15);
    transition: background 0.2s, box-shadow 0.2s;
    margin-right: 0.5rem;
}
.sync-btn-pink:hover, .sync-btn-pink:focus {
    background: linear-gradient(90deg, #ff498a 0%, #ff5fa2 100%);
    box-shadow: 0 4px 16px 0 rgba(255, 89, 138, 0.25);
}

/* Enhanced Audio Player */
.enhanced-audio-player {
    width: 100%;
    max-width: 600px;
    height: 60px;
    border-radius: 30px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    border: none;
    outline: none;
}

.enhanced-audio-player::-webkit-media-controls-panel {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 30px;
}

.enhanced-audio-player::-webkit-media-controls-play-button {
    background-color: rgba(255, 255, 255, 0.9);
    border-radius: 50%;
    margin: 0 10px;
}

.enhanced-audio-player::-webkit-media-controls-timeline {
    background-color: rgba(255, 255, 255, 0.3);
    border-radius: 10px;
    margin: 0 10px;
}

.enhanced-audio-player::-webkit-media-controls-current-time-display,
.enhanced-audio-player::-webkit-media-controls-time-remaining-display {
    color: white;
    font-weight: 500;
}

/* Sync Button Area with dashed border */
.sync-button-area {
    margin: 2rem 0;
    padding: 1.5rem;
    border: 2px dashed #3498db;
    border-radius: 12px;
    background: linear-gradient(135deg, rgba(52, 152, 219, 0.05) 0%, rgba(52, 152, 219, 0.1) 100%);
    position: relative;
}

.sync-button-area::before {
    content: "üéØ Sync Button Area - Click to connect with Lovense toys";
    position: absolute;
    top: -12px;
    left: 20px;
    background: white;
    padding: 0 10px;
    color: #3498db;
    font-size: 0.9rem;
    font-weight: 500;
}

.sync-button-container {
    text-align: center;
    padding: 1rem 0;
}

/* Scrollable Request Box */
.scrollable-request {
    max-height: 300px;
    overflow-y: auto;
    border: 2px solid #e9ecef;
    background: #f8f9fa;
}

.scrollable-request::-webkit-scrollbar {
    width: 8px;
}

.scrollable-request::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
}

.scrollable-request::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 4px;
}

.scrollable-request::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
}

/* Pattern Cards */
.pattern-cards {
    display: flex;
    gap: 1rem;
    margin-bottom: 2rem;
}

.pattern-card {
    flex: 1;
    border: 2px solid #e9ecef;
    border-radius: 8px;
    background: #f8f9fa;
    cursor: pointer;
    transition: all 0.3s ease;
    overflow: hidden;
}

.pattern-card:hover {
    border-color: #3498db;
    box-shadow: 0 2px 8px rgba(52, 152, 219, 0.1);
}

.pattern-card.active {
    border-color: #3498db;
    background: linear-gradient(135deg, rgba(52, 152, 219, 0.05) 0%, rgba(52, 152, 219, 0.1) 100%);
    box-shadow: 0 4px 12px rgba(52, 152, 219, 0.15);
}

.card-header {
    padding: 1rem;
    background: rgba(52, 152, 219, 0.1);
    border-bottom: 1px solid #e9ecef;
}

.card-header h4 {
    margin: 0 0 0.5rem 0;
    color: #2c3e50;
    font-size: 1.1rem;
}

.card-header p {
    margin: 0;
    color: #666;
    font-size: 0.9rem;
}

.card-content {
    padding: 1rem;
}

.pattern-data-container {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.pattern-data-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.pattern-label {
    font-weight: 500;
    color: #2c3e50;
}

.btn-sm {
    padding: 0.5rem 1rem;
    font-size: 0.85rem;
}

.pattern-textarea {
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', monospace;
    font-size: 0.9rem;
    line-height: 1.4;
    resize: vertical;
    min-height: 200px;
}

.sync-controls {
    margin-top: 1.5rem;
    padding-top: 1.5rem;
    border-top: 1px solid #e9ecef;
}

/* Media ID Styling */
.audio-media-id {
    color: #3498db;
    font-weight: 600;
    background: rgba(52, 152, 219, 0.1);
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    border: 1px solid rgba(52, 152, 219, 0.3);
}

.video-media-id {
    color: #e74c3c;
    font-weight: 600;
    background: rgba(231, 76, 60, 0.1);
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    border: 1px solid rgba(231, 76, 60, 0.3);
}

/* Media Change Warning */
.media-change-warning {
    background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
    border: 2px solid #ffc107;
    border-radius: 8px;
    margin-bottom: 1rem;
    animation: slideIn 0.3s ease-out;
}

.warning-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 1rem;
    color: #856404;
    font-weight: 500;
}

.btn-close {
    background: none;
    border: none;
    color: #856404;
    font-size: 1.2rem;
    cursor: pointer;
    padding: 0;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: background-color 0.2s;
}

.btn-close:hover {
    background-color: rgba(133, 100, 4, 0.1);
}

@keyframes slideIn {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.form-control.half-width {
    width: 220px;
    min-width: 120px;
    display: inline-block;
}
.input-group.compact .form-control.half-width {
    margin-bottom: 0;
}
</style>
